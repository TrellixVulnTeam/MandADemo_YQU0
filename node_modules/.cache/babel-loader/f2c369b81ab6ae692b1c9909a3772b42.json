{"ast":null,"code":"import { compact, contains, forEach, isArray, isEmpty, isFunction, isUndefined, keys, map } from \"../../utils/utils\";\nimport { defineNameProp, functionName } from \"../../lang/lang_extensions\";\nimport { validTermsPattern } from \"../grammar/checks\";\nexport function defaultVisit(ctx, param) {\n  var childrenNames = keys(ctx);\n  var childrenNamesLength = childrenNames.length;\n\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j]; // distinction between Tokens Children and CstNode children\n\n      if (currChild.tokenTypeIdx === undefined) {\n        if (currChild.fullName !== undefined) {\n          this[currChild.fullName](currChild.children, param);\n        } else {\n          this[currChild.name](currChild.children, param);\n        }\n      }\n    }\n  } // defaultVisit does not support generic out param\n\n\n  return undefined;\n}\nexport function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function (cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      } // enables passing optional CstNodes concisely.\n\n\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      if (cstNode.fullName !== undefined) {\n        return this[cstNode.fullName](cstNode.children, param);\n      } else {\n        return this[cstNode.name](cstNode.children, param);\n      }\n    },\n    validateVisitor: function () {\n      var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n\n      if (!isEmpty(semanticDefinitionErrors)) {\n        var errorMessages = map(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\" + functionName(this.constructor) + \">:\\n\\t\" + (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\nexport function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\nexport var CstVisitorDefinitionError;\n\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\n\nexport function validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n  return missingErrors.concat(redundantErrors);\n}\nexport function validateMissingCstMethods(visitorInstance, ruleNames) {\n  var errors = map(ruleNames, function (currRuleName) {\n    if (!isFunction(visitorInstance[currRuleName])) {\n      return {\n        msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor.\",\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      };\n    }\n  });\n  return compact(errors);\n}\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\nexport function validateRedundantMethods(visitorInstance, ruleNames) {\n  var errors = [];\n\n  for (var prop in visitorInstance) {\n    if (validTermsPattern.test(prop) && isFunction(visitorInstance[prop]) && !contains(VALID_PROP_NAMES, prop) && !contains(ruleNames, prop)) {\n      errors.push({\n        msg: \"Redundant visitor method: <\" + prop + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor\\n\" + \"There is no Grammar Rule corresponding to this method's name.\\n\" + (\"For utility methods on visitor classes use methods names that do not match /\" + validTermsPattern.source + \"/.\"),\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      });\n    }\n  }\n\n  return errors;\n}","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/chevrotain/lib_esm/src/parse/cst/cst_visitor.js"],"names":["compact","contains","forEach","isArray","isEmpty","isFunction","isUndefined","keys","map","defineNameProp","functionName","validTermsPattern","defaultVisit","ctx","param","childrenNames","childrenNamesLength","length","i","currChildName","currChildArray","currChildArrayLength","j","currChild","tokenTypeIdx","undefined","fullName","children","name","createBaseSemanticVisitorConstructor","grammarName","ruleNames","derivedConstructor","semanticProto","visit","cstNode","validateVisitor","semanticDefinitionErrors","errorMessages","currDefError","msg","Error","constructor","join","replace","prototype","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","Object","create","ruleName","CstVisitorDefinitionError","visitorInstance","missingErrors","validateMissingCstMethods","redundantErrors","validateRedundantMethods","concat","errors","currRuleName","type","MISSING_METHOD","methodName","VALID_PROP_NAMES","prop","test","push","source","REDUNDANT_METHOD"],"mappings":"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","sourcesContent":["import { compact, contains, forEach, isArray, isEmpty, isFunction, isUndefined, keys, map } from \"../../utils/utils\";\nimport { defineNameProp, functionName } from \"../../lang/lang_extensions\";\nimport { validTermsPattern } from \"../grammar/checks\";\nexport function defaultVisit(ctx, param) {\n    var childrenNames = keys(ctx);\n    var childrenNamesLength = childrenNames.length;\n    for (var i = 0; i < childrenNamesLength; i++) {\n        var currChildName = childrenNames[i];\n        var currChildArray = ctx[currChildName];\n        var currChildArrayLength = currChildArray.length;\n        for (var j = 0; j < currChildArrayLength; j++) {\n            var currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                if (currChild.fullName !== undefined) {\n                    this[currChild.fullName](currChild.children, param);\n                }\n                else {\n                    this[currChild.name](currChild.children, param);\n                }\n            }\n        }\n    }\n    // defaultVisit does not support generic out param\n    return undefined;\n}\nexport function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n    var semanticProto = {\n        visit: function (cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if (isArray(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if (isUndefined(cstNode)) {\n                return undefined;\n            }\n            if (cstNode.fullName !== undefined) {\n                return this[cstNode.fullName](cstNode.children, param);\n            }\n            else {\n                return this[cstNode.name](cstNode.children, param);\n            }\n        },\n        validateVisitor: function () {\n            var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!isEmpty(semanticDefinitionErrors)) {\n                var errorMessages = map(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });\n                throw Error(\"Errors Detected in CST Visitor <\" + functionName(this.constructor) + \">:\\n\\t\" +\n                    (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n            }\n        }\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nexport function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    var withDefaultsProto = Object.create(baseConstructor.prototype);\n    forEach(ruleNames, function (ruleName) {\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nexport var CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\nexport function validateVisitor(visitorInstance, ruleNames) {\n    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n    return missingErrors.concat(redundantErrors);\n}\nexport function validateMissingCstMethods(visitorInstance, ruleNames) {\n    var errors = map(ruleNames, function (currRuleName) {\n        if (!isFunction(visitorInstance[currRuleName])) {\n            return {\n                msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor.\",\n                type: CstVisitorDefinitionError.MISSING_METHOD,\n                methodName: currRuleName\n            };\n        }\n    });\n    return compact(errors);\n}\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\nexport function validateRedundantMethods(visitorInstance, ruleNames) {\n    var errors = [];\n    for (var prop in visitorInstance) {\n        if (validTermsPattern.test(prop) &&\n            isFunction(visitorInstance[prop]) &&\n            !contains(VALID_PROP_NAMES, prop) &&\n            !contains(ruleNames, prop)) {\n            errors.push({\n                msg: \"Redundant visitor method: <\" + prop + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor\\n\" +\n                    \"There is no Grammar Rule corresponding to this method's name.\\n\" +\n                    (\"For utility methods on visitor classes use methods names that do not match /\" + validTermsPattern.source + \"/.\"),\n                type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n                methodName: prop\n            });\n        }\n    }\n    return errors;\n}\n//# sourceMappingURL=cst_visitor.js.map"]},"metadata":{},"sourceType":"module"}