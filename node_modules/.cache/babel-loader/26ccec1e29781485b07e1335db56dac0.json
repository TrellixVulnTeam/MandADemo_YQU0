{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { CellError } from '../Cell';\nexport var parsingError = function parsingError(type, message) {\n  return {\n    type: type,\n    message: message\n  };\n};\nexport var ParsingErrorType;\n\n(function (ParsingErrorType) {\n  ParsingErrorType[\"LexingError\"] = \"LexingError\";\n  ParsingErrorType[\"ParserError\"] = \"ParsingError\";\n  ParsingErrorType[\"StaticOffsetError\"] = \"StaticOffsetError\";\n  ParsingErrorType[\"StaticOffsetOutOfRangeError\"] = \"StaticOffsetOutOfRangeError\";\n  ParsingErrorType[\"RangeOffsetNotAllowed\"] = \"RangeOffsetNotAllowed\";\n})(ParsingErrorType || (ParsingErrorType = {}));\n\nexport var AstNodeType;\n\n(function (AstNodeType) {\n  AstNodeType[\"EMPTY\"] = \"EMPTY\";\n  AstNodeType[\"NUMBER\"] = \"NUMBER\";\n  AstNodeType[\"STRING\"] = \"STRING\";\n  AstNodeType[\"MINUS_UNARY_OP\"] = \"MINUS_UNARY_OP\";\n  AstNodeType[\"PLUS_UNARY_OP\"] = \"PLUS_UNARY_OP\";\n  AstNodeType[\"PERCENT_OP\"] = \"PERCENT_OP\";\n  AstNodeType[\"CONCATENATE_OP\"] = \"CONCATENATE_OP\";\n  AstNodeType[\"EQUALS_OP\"] = \"EQUALS_OP\";\n  AstNodeType[\"NOT_EQUAL_OP\"] = \"NOT_EQUAL_OP\";\n  AstNodeType[\"GREATER_THAN_OP\"] = \"GREATER_THAN_OP\";\n  AstNodeType[\"LESS_THAN_OP\"] = \"LESS_THAN_OP\";\n  AstNodeType[\"GREATER_THAN_OR_EQUAL_OP\"] = \"GREATER_THAN_OR_EQUAL_OP\";\n  AstNodeType[\"LESS_THAN_OR_EQUAL_OP\"] = \"LESS_THAN_OR_EQUAL_OP\";\n  AstNodeType[\"PLUS_OP\"] = \"PLUS_OP\";\n  AstNodeType[\"MINUS_OP\"] = \"MINUS_OP\";\n  AstNodeType[\"TIMES_OP\"] = \"TIMES_OP\";\n  AstNodeType[\"DIV_OP\"] = \"DIV_OP\";\n  AstNodeType[\"POWER_OP\"] = \"POWER_OP\";\n  AstNodeType[\"FUNCTION_CALL\"] = \"FUNCTION_CALL\";\n  AstNodeType[\"NAMED_EXPRESSION\"] = \"NAMED_EXPRESSION\";\n  AstNodeType[\"PARENTHESIS\"] = \"PARENTHESES\";\n  AstNodeType[\"CELL_REFERENCE\"] = \"CELL_REFERENCE\";\n  AstNodeType[\"CELL_RANGE\"] = \"CELL_RANGE\";\n  AstNodeType[\"COLUMN_RANGE\"] = \"COLUMN_RANGE\";\n  AstNodeType[\"ROW_RANGE\"] = \"ROW_RANGE\";\n  AstNodeType[\"ERROR\"] = \"ERROR\";\n  AstNodeType[\"ERROR_WITH_RAW_INPUT\"] = \"ERROR_WITH_RAW_INPUT\";\n  AstNodeType[\"ARRAY\"] = \"ARRAY\";\n})(AstNodeType || (AstNodeType = {}));\n\nexport var RangeSheetReferenceType;\n\n(function (RangeSheetReferenceType) {\n  RangeSheetReferenceType[RangeSheetReferenceType[\"RELATIVE\"] = 0] = \"RELATIVE\";\n  RangeSheetReferenceType[RangeSheetReferenceType[\"START_ABSOLUTE\"] = 1] = \"START_ABSOLUTE\";\n  RangeSheetReferenceType[RangeSheetReferenceType[\"BOTH_ABSOLUTE\"] = 2] = \"BOTH_ABSOLUTE\";\n})(RangeSheetReferenceType || (RangeSheetReferenceType = {}));\n\nexport var buildEmptyArgAst = function buildEmptyArgAst(leadingWhitespace) {\n  return {\n    type: AstNodeType.EMPTY,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildNumberAst = function buildNumberAst(value, leadingWhitespace) {\n  return {\n    type: AstNodeType.NUMBER,\n    value: value,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildStringAst = function buildStringAst(token) {\n  var _a;\n\n  return {\n    type: AstNodeType.STRING,\n    value: token.image.slice(1, -1),\n    leadingWhitespace: (_a = token.leadingWhitespace) === null || _a === void 0 ? void 0 : _a.image\n  };\n};\nexport var buildCellReferenceAst = function buildCellReferenceAst(reference, leadingWhitespace) {\n  return {\n    type: AstNodeType.CELL_REFERENCE,\n    reference: reference,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildCellRangeAst = function buildCellRangeAst(start, end, sheetReferenceType, leadingWhitespace) {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.CELL_RANGE,\n    start: start,\n    end: end,\n    sheetReferenceType: sheetReferenceType,\n    leadingWhitespace: leadingWhitespace\n  };\n};\nexport var buildColumnRangeAst = function buildColumnRangeAst(start, end, sheetReferenceType, leadingWhitespace) {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.COLUMN_RANGE,\n    start: start,\n    end: end,\n    sheetReferenceType: sheetReferenceType,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildRowRangeAst = function buildRowRangeAst(start, end, sheetReferenceType, leadingWhitespace) {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.ROW_RANGE,\n    start: start,\n    end: end,\n    sheetReferenceType: sheetReferenceType,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildConcatenateOpAst = function buildConcatenateOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.CONCATENATE_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildEqualsOpAst = function buildEqualsOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.EQUALS_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildNotEqualOpAst = function buildNotEqualOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.NOT_EQUAL_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildGreaterThanOpAst = function buildGreaterThanOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.GREATER_THAN_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildLessThanOpAst = function buildLessThanOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.LESS_THAN_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildGreaterThanOrEqualOpAst = function buildGreaterThanOrEqualOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.GREATER_THAN_OR_EQUAL_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildLessThanOrEqualOpAst = function buildLessThanOrEqualOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.LESS_THAN_OR_EQUAL_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildPlusOpAst = function buildPlusOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.PLUS_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildMinusOpAst = function buildMinusOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.MINUS_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildTimesOpAst = function buildTimesOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.TIMES_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildDivOpAst = function buildDivOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.DIV_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildPowerOpAst = function buildPowerOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.POWER_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildMinusUnaryOpAst = function buildMinusUnaryOpAst(value, leadingWhitespace) {\n  return {\n    type: AstNodeType.MINUS_UNARY_OP,\n    value: value,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildPlusUnaryOpAst = function buildPlusUnaryOpAst(value, leadingWhitespace) {\n  return {\n    type: AstNodeType.PLUS_UNARY_OP,\n    value: value,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildPercentOpAst = function buildPercentOpAst(value, leadingWhitespace) {\n  return {\n    type: AstNodeType.PERCENT_OP,\n    value: value,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildProcedureAst = function buildProcedureAst(procedureName, args, leadingWhitespace, internalWhitespace) {\n  return {\n    type: AstNodeType.FUNCTION_CALL,\n    procedureName: procedureName,\n    args: args,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n    internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n  };\n};\nexport var buildArrayAst = function buildArrayAst(args, leadingWhitespace, internalWhitespace) {\n  return {\n    type: AstNodeType.ARRAY,\n    args: args,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n    internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n  };\n};\nexport var buildNamedExpressionAst = function buildNamedExpressionAst(expressionName, leadingWhitespace) {\n  return {\n    type: AstNodeType.NAMED_EXPRESSION,\n    expressionName: expressionName,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildParenthesisAst = function buildParenthesisAst(expression, leadingWhitespace, internalWhitespace) {\n  return {\n    type: AstNodeType.PARENTHESIS,\n    expression: expression,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n    internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n  };\n};\nexport var buildCellErrorAst = function buildCellErrorAst(error, leadingWhitespace) {\n  return {\n    type: AstNodeType.ERROR,\n    error: error,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildErrorWithRawInputAst = function buildErrorWithRawInputAst(rawInput, error, leadingWhitespace) {\n  return {\n    type: AstNodeType.ERROR_WITH_RAW_INPUT,\n    error: error,\n    rawInput: rawInput,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildParsingErrorAst = function buildParsingErrorAst() {\n  return {\n    type: AstNodeType.ERROR,\n    error: CellError.parsingError()\n  };\n};\n\nfunction assertRangeConsistency(start, end, sheetReferenceType) {\n  if (start.sheet !== undefined && end.sheet === undefined || start.sheet === undefined && end.sheet !== undefined) {\n    throw new Error('Start address inconsistent with end address');\n  }\n\n  if (start.sheet === undefined && sheetReferenceType !== RangeSheetReferenceType.RELATIVE || start.sheet !== undefined && sheetReferenceType === RangeSheetReferenceType.RELATIVE) {\n    throw new Error('Sheet address inconsistent with sheet reference type');\n  }\n}\n\nexport function imageWithWhitespace(image, leadingWhitespace) {\n  return (leadingWhitespace !== null && leadingWhitespace !== void 0 ? leadingWhitespace : '') + image;\n}","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/parser/Ast.js"],"names":["CellError","parsingError","type","message","ParsingErrorType","AstNodeType","RangeSheetReferenceType","buildEmptyArgAst","leadingWhitespace","EMPTY","image","buildNumberAst","value","NUMBER","buildStringAst","token","_a","STRING","slice","buildCellReferenceAst","reference","CELL_REFERENCE","buildCellRangeAst","start","end","sheetReferenceType","assertRangeConsistency","CELL_RANGE","buildColumnRangeAst","COLUMN_RANGE","buildRowRangeAst","ROW_RANGE","buildConcatenateOpAst","left","right","CONCATENATE_OP","buildEqualsOpAst","EQUALS_OP","buildNotEqualOpAst","NOT_EQUAL_OP","buildGreaterThanOpAst","GREATER_THAN_OP","buildLessThanOpAst","LESS_THAN_OP","buildGreaterThanOrEqualOpAst","GREATER_THAN_OR_EQUAL_OP","buildLessThanOrEqualOpAst","LESS_THAN_OR_EQUAL_OP","buildPlusOpAst","PLUS_OP","buildMinusOpAst","MINUS_OP","buildTimesOpAst","TIMES_OP","buildDivOpAst","DIV_OP","buildPowerOpAst","POWER_OP","buildMinusUnaryOpAst","MINUS_UNARY_OP","buildPlusUnaryOpAst","PLUS_UNARY_OP","buildPercentOpAst","PERCENT_OP","buildProcedureAst","procedureName","args","internalWhitespace","FUNCTION_CALL","buildArrayAst","ARRAY","buildNamedExpressionAst","expressionName","NAMED_EXPRESSION","buildParenthesisAst","expression","PARENTHESIS","buildCellErrorAst","error","ERROR","buildErrorWithRawInputAst","rawInput","ERROR_WITH_RAW_INPUT","buildParsingErrorAst","sheet","undefined","Error","RELATIVE","imageWithWhitespace"],"mappings":"AAEA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,SAA1B;AACA,OAAO,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqC;AAC7D,SAAO;AACLD,IAAAA,IAAI,EAAEA,IADD;AAELC,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,IAAIC,gBAAJ;;AAEP,CAAC,UAAUA,gBAAV,EAA4B;AAC3BA,EAAAA,gBAAgB,CAAC,aAAD,CAAhB,GAAkC,aAAlC;AACAA,EAAAA,gBAAgB,CAAC,aAAD,CAAhB,GAAkC,cAAlC;AACAA,EAAAA,gBAAgB,CAAC,mBAAD,CAAhB,GAAwC,mBAAxC;AACAA,EAAAA,gBAAgB,CAAC,6BAAD,CAAhB,GAAkD,6BAAlD;AACAA,EAAAA,gBAAgB,CAAC,uBAAD,CAAhB,GAA4C,uBAA5C;AACD,CAND,EAMGA,gBAAgB,KAAKA,gBAAgB,GAAG,EAAxB,CANnB;;AAQA,OAAO,IAAIC,WAAJ;;AAEP,CAAC,UAAUA,WAAV,EAAuB;AACtBA,EAAAA,WAAW,CAAC,OAAD,CAAX,GAAuB,OAAvB;AACAA,EAAAA,WAAW,CAAC,QAAD,CAAX,GAAwB,QAAxB;AACAA,EAAAA,WAAW,CAAC,QAAD,CAAX,GAAwB,QAAxB;AACAA,EAAAA,WAAW,CAAC,gBAAD,CAAX,GAAgC,gBAAhC;AACAA,EAAAA,WAAW,CAAC,eAAD,CAAX,GAA+B,eAA/B;AACAA,EAAAA,WAAW,CAAC,YAAD,CAAX,GAA4B,YAA5B;AACAA,EAAAA,WAAW,CAAC,gBAAD,CAAX,GAAgC,gBAAhC;AACAA,EAAAA,WAAW,CAAC,WAAD,CAAX,GAA2B,WAA3B;AACAA,EAAAA,WAAW,CAAC,cAAD,CAAX,GAA8B,cAA9B;AACAA,EAAAA,WAAW,CAAC,iBAAD,CAAX,GAAiC,iBAAjC;AACAA,EAAAA,WAAW,CAAC,cAAD,CAAX,GAA8B,cAA9B;AACAA,EAAAA,WAAW,CAAC,0BAAD,CAAX,GAA0C,0BAA1C;AACAA,EAAAA,WAAW,CAAC,uBAAD,CAAX,GAAuC,uBAAvC;AACAA,EAAAA,WAAW,CAAC,SAAD,CAAX,GAAyB,SAAzB;AACAA,EAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,UAA1B;AACAA,EAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,UAA1B;AACAA,EAAAA,WAAW,CAAC,QAAD,CAAX,GAAwB,QAAxB;AACAA,EAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,UAA1B;AACAA,EAAAA,WAAW,CAAC,eAAD,CAAX,GAA+B,eAA/B;AACAA,EAAAA,WAAW,CAAC,kBAAD,CAAX,GAAkC,kBAAlC;AACAA,EAAAA,WAAW,CAAC,aAAD,CAAX,GAA6B,aAA7B;AACAA,EAAAA,WAAW,CAAC,gBAAD,CAAX,GAAgC,gBAAhC;AACAA,EAAAA,WAAW,CAAC,YAAD,CAAX,GAA4B,YAA5B;AACAA,EAAAA,WAAW,CAAC,cAAD,CAAX,GAA8B,cAA9B;AACAA,EAAAA,WAAW,CAAC,WAAD,CAAX,GAA2B,WAA3B;AACAA,EAAAA,WAAW,CAAC,OAAD,CAAX,GAAuB,OAAvB;AACAA,EAAAA,WAAW,CAAC,sBAAD,CAAX,GAAsC,sBAAtC;AACAA,EAAAA,WAAW,CAAC,OAAD,CAAX,GAAuB,OAAvB;AACD,CA7BD,EA6BGA,WAAW,KAAKA,WAAW,GAAG,EAAnB,CA7Bd;;AA+BA,OAAO,IAAIC,uBAAJ;;AAEP,CAAC,UAAUA,uBAAV,EAAmC;AAClCA,EAAAA,uBAAuB,CAACA,uBAAuB,CAAC,UAAD,CAAvB,GAAsC,CAAvC,CAAvB,GAAmE,UAAnE;AACAA,EAAAA,uBAAuB,CAACA,uBAAuB,CAAC,gBAAD,CAAvB,GAA4C,CAA7C,CAAvB,GAAyE,gBAAzE;AACAA,EAAAA,uBAAuB,CAACA,uBAAuB,CAAC,eAAD,CAAvB,GAA2C,CAA5C,CAAvB,GAAwE,eAAxE;AACD,CAJD,EAIGA,uBAAuB,KAAKA,uBAAuB,GAAG,EAA/B,CAJ1B;;AAMA,OAAO,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,iBAA1B,EAA6C;AACzE,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACI,KADb;AAELD,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAFtG,GAAP;AAID,CALM;AAMP,OAAO,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+BJ,iBAA/B,EAAkD;AAC5E,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACQ,MADb;AAELD,IAAAA,KAAK,EAAEA,KAFF;AAGLJ,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAHtG,GAAP;AAKD,CANM;AAOP,OAAO,IAAII,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AACzD,MAAIC,EAAJ;;AAEA,SAAO;AACLd,IAAAA,IAAI,EAAEG,WAAW,CAACY,MADb;AAELL,IAAAA,KAAK,EAAEG,KAAK,CAACL,KAAN,CAAYQ,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAFF;AAGLV,IAAAA,iBAAiB,EAAE,CAACQ,EAAE,GAAGD,KAAK,CAACP,iBAAZ,MAAmC,IAAnC,IAA2CQ,EAAE,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,EAAE,CAACN;AAHrF,GAAP;AAKD,CARM;AASP,OAAO,IAAIS,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,SAA/B,EAA0CZ,iBAA1C,EAA6D;AAC9F,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACgB,cADb;AAELD,IAAAA,SAAS,EAAEA,SAFN;AAGLZ,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAHtG,GAAP;AAKD,CANM;AAOP,OAAO,IAAIY,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,KAA3B,EAAkCC,GAAlC,EAAuCC,kBAAvC,EAA2DjB,iBAA3D,EAA8E;AAC3GkB,EAAAA,sBAAsB,CAACH,KAAD,EAAQC,GAAR,EAAaC,kBAAb,CAAtB;AACA,SAAO;AACLvB,IAAAA,IAAI,EAAEG,WAAW,CAACsB,UADb;AAELJ,IAAAA,KAAK,EAAEA,KAFF;AAGLC,IAAAA,GAAG,EAAEA,GAHA;AAILC,IAAAA,kBAAkB,EAAEA,kBAJf;AAKLjB,IAAAA,iBAAiB,EAAEA;AALd,GAAP;AAOD,CATM;AAUP,OAAO,IAAIoB,mBAAmB,GAAG,SAASA,mBAAT,CAA6BL,KAA7B,EAAoCC,GAApC,EAAyCC,kBAAzC,EAA6DjB,iBAA7D,EAAgF;AAC/GkB,EAAAA,sBAAsB,CAACH,KAAD,EAAQC,GAAR,EAAaC,kBAAb,CAAtB;AACA,SAAO;AACLvB,IAAAA,IAAI,EAAEG,WAAW,CAACwB,YADb;AAELN,IAAAA,KAAK,EAAEA,KAFF;AAGLC,IAAAA,GAAG,EAAEA,GAHA;AAILC,IAAAA,kBAAkB,EAAEA,kBAJf;AAKLjB,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AALtG,GAAP;AAOD,CATM;AAUP,OAAO,IAAIoB,gBAAgB,GAAG,SAASA,gBAAT,CAA0BP,KAA1B,EAAiCC,GAAjC,EAAsCC,kBAAtC,EAA0DjB,iBAA1D,EAA6E;AACzGkB,EAAAA,sBAAsB,CAACH,KAAD,EAAQC,GAAR,EAAaC,kBAAb,CAAtB;AACA,SAAO;AACLvB,IAAAA,IAAI,EAAEG,WAAW,CAAC0B,SADb;AAELR,IAAAA,KAAK,EAAEA,KAFF;AAGLC,IAAAA,GAAG,EAAEA,GAHA;AAILC,IAAAA,kBAAkB,EAAEA,kBAJf;AAKLjB,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AALtG,GAAP;AAOD,CATM;AAUP,OAAO,IAAIsB,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,IAA/B,EAAqCC,KAArC,EAA4C1B,iBAA5C,EAA+D;AAChG,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAAC8B,cADb;AAELF,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAI0B,gBAAgB,GAAG,SAASA,gBAAT,CAA0BH,IAA1B,EAAgCC,KAAhC,EAAuC1B,iBAAvC,EAA0D;AACtF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACgC,SADb;AAELJ,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAI4B,kBAAkB,GAAG,SAASA,kBAAT,CAA4BL,IAA5B,EAAkCC,KAAlC,EAAyC1B,iBAAzC,EAA4D;AAC1F,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACkC,YADb;AAELN,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAI8B,qBAAqB,GAAG,SAASA,qBAAT,CAA+BP,IAA/B,EAAqCC,KAArC,EAA4C1B,iBAA5C,EAA+D;AAChG,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACoC,eADb;AAELR,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAIgC,kBAAkB,GAAG,SAASA,kBAAT,CAA4BT,IAA5B,EAAkCC,KAAlC,EAAyC1B,iBAAzC,EAA4D;AAC1F,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACsC,YADb;AAELV,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAIkC,4BAA4B,GAAG,SAASA,4BAAT,CAAsCX,IAAtC,EAA4CC,KAA5C,EAAmD1B,iBAAnD,EAAsE;AAC9G,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACwC,wBADb;AAELZ,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAIoC,yBAAyB,GAAG,SAASA,yBAAT,CAAmCb,IAAnC,EAAyCC,KAAzC,EAAgD1B,iBAAhD,EAAmE;AACxG,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAAC0C,qBADb;AAELd,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAIsC,cAAc,GAAG,SAASA,cAAT,CAAwBf,IAAxB,EAA8BC,KAA9B,EAAqC1B,iBAArC,EAAwD;AAClF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAAC4C,OADb;AAELhB,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAIwC,eAAe,GAAG,SAASA,eAAT,CAAyBjB,IAAzB,EAA+BC,KAA/B,EAAsC1B,iBAAtC,EAAyD;AACpF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAAC8C,QADb;AAELlB,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAI0C,eAAe,GAAG,SAASA,eAAT,CAAyBnB,IAAzB,EAA+BC,KAA/B,EAAsC1B,iBAAtC,EAAyD;AACpF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACgD,QADb;AAELpB,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAI4C,aAAa,GAAG,SAASA,aAAT,CAAuBrB,IAAvB,EAA6BC,KAA7B,EAAoC1B,iBAApC,EAAuD;AAChF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACkD,MADb;AAELtB,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAI8C,eAAe,GAAG,SAASA,eAAT,CAAyBvB,IAAzB,EAA+BC,KAA/B,EAAsC1B,iBAAtC,EAAyD;AACpF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACoD,QADb;AAELxB,IAAAA,IAAI,EAAEA,IAFD;AAGLC,IAAAA,KAAK,EAAEA,KAHF;AAIL1B,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAIgD,oBAAoB,GAAG,SAASA,oBAAT,CAA8B9C,KAA9B,EAAqCJ,iBAArC,EAAwD;AACxF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACsD,cADb;AAEL/C,IAAAA,KAAK,EAAEA,KAFF;AAGLJ,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAHtG,GAAP;AAKD,CANM;AAOP,OAAO,IAAIkD,mBAAmB,GAAG,SAASA,mBAAT,CAA6BhD,KAA7B,EAAoCJ,iBAApC,EAAuD;AACtF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACwD,aADb;AAELjD,IAAAA,KAAK,EAAEA,KAFF;AAGLJ,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAHtG,GAAP;AAKD,CANM;AAOP,OAAO,IAAIoD,iBAAiB,GAAG,SAASA,iBAAT,CAA2BlD,KAA3B,EAAkCJ,iBAAlC,EAAqD;AAClF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAAC0D,UADb;AAELnD,IAAAA,KAAK,EAAEA,KAFF;AAGLJ,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAHtG,GAAP;AAKD,CANM;AAOP,OAAO,IAAIsD,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,aAA3B,EAA0CC,IAA1C,EAAgD1D,iBAAhD,EAAmE2D,kBAAnE,EAAuF;AACpH,SAAO;AACLjE,IAAAA,IAAI,EAAEG,WAAW,CAAC+D,aADb;AAELH,IAAAA,aAAa,EAAEA,aAFV;AAGLC,IAAAA,IAAI,EAAEA,IAHD;AAIL1D,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE,KAJtG;AAKLyD,IAAAA,kBAAkB,EAAEA,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,kBAAkB,CAACzD;AAL1G,GAAP;AAOD,CARM;AASP,OAAO,IAAI2D,aAAa,GAAG,SAASA,aAAT,CAAuBH,IAAvB,EAA6B1D,iBAA7B,EAAgD2D,kBAAhD,EAAoE;AAC7F,SAAO;AACLjE,IAAAA,IAAI,EAAEG,WAAW,CAACiE,KADb;AAELJ,IAAAA,IAAI,EAAEA,IAFD;AAGL1D,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE,KAHtG;AAILyD,IAAAA,kBAAkB,EAAEA,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,kBAAkB,CAACzD;AAJ1G,GAAP;AAMD,CAPM;AAQP,OAAO,IAAI6D,uBAAuB,GAAG,SAASA,uBAAT,CAAiCC,cAAjC,EAAiDhE,iBAAjD,EAAoE;AACvG,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAACoE,gBADb;AAELD,IAAAA,cAAc,EAAEA,cAFX;AAGLhE,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAHtG,GAAP;AAKD,CANM;AAOP,OAAO,IAAIgE,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,UAA7B,EAAyCnE,iBAAzC,EAA4D2D,kBAA5D,EAAgF;AAC/G,SAAO;AACLjE,IAAAA,IAAI,EAAEG,WAAW,CAACuE,WADb;AAELD,IAAAA,UAAU,EAAEA,UAFP;AAGLnE,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE,KAHtG;AAILyD,IAAAA,kBAAkB,EAAEA,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,kBAAkB,CAACzD;AAJ1G,GAAP;AAMD,CAPM;AAQP,OAAO,IAAImE,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,KAA3B,EAAkCtE,iBAAlC,EAAqD;AAClF,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAAC0E,KADb;AAELD,IAAAA,KAAK,EAAEA,KAFF;AAGLtE,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAHtG,GAAP;AAKD,CANM;AAOP,OAAO,IAAIsE,yBAAyB,GAAG,SAASA,yBAAT,CAAmCC,QAAnC,EAA6CH,KAA7C,EAAoDtE,iBAApD,EAAuE;AAC5G,SAAO;AACLN,IAAAA,IAAI,EAAEG,WAAW,CAAC6E,oBADb;AAELJ,IAAAA,KAAK,EAAEA,KAFF;AAGLG,IAAAA,QAAQ,EAAEA,QAHL;AAILzE,IAAAA,iBAAiB,EAAEA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACE;AAJtG,GAAP;AAMD,CAPM;AAQP,OAAO,IAAIyE,oBAAoB,GAAG,SAASA,oBAAT,GAAgC;AAChE,SAAO;AACLjF,IAAAA,IAAI,EAAEG,WAAW,CAAC0E,KADb;AAELD,IAAAA,KAAK,EAAE9E,SAAS,CAACC,YAAV;AAFF,GAAP;AAID,CALM;;AAOP,SAASyB,sBAAT,CAAgCH,KAAhC,EAAuCC,GAAvC,EAA4CC,kBAA5C,EAAgE;AAC9D,MAAIF,KAAK,CAAC6D,KAAN,KAAgBC,SAAhB,IAA6B7D,GAAG,CAAC4D,KAAJ,KAAcC,SAA3C,IAAwD9D,KAAK,CAAC6D,KAAN,KAAgBC,SAAhB,IAA6B7D,GAAG,CAAC4D,KAAJ,KAAcC,SAAvG,EAAkH;AAChH,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,MAAI/D,KAAK,CAAC6D,KAAN,KAAgBC,SAAhB,IAA6B5D,kBAAkB,KAAKnB,uBAAuB,CAACiF,QAA5E,IAAwFhE,KAAK,CAAC6D,KAAN,KAAgBC,SAAhB,IAA6B5D,kBAAkB,KAAKnB,uBAAuB,CAACiF,QAAxK,EAAkL;AAChL,UAAM,IAAID,KAAJ,CAAU,sDAAV,CAAN;AACD;AACF;;AAED,OAAO,SAASE,mBAAT,CAA6B9E,KAA7B,EAAoCF,iBAApC,EAAuD;AAC5D,SAAO,CAACA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6DA,iBAA7D,GAAiF,EAAlF,IAAwFE,KAA/F;AACD","sourcesContent":["import \"core-js/modules/es.array.slice.js\";\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { CellError } from '../Cell';\nexport var parsingError = function parsingError(type, message) {\n  return {\n    type: type,\n    message: message\n  };\n};\nexport var ParsingErrorType;\n\n(function (ParsingErrorType) {\n  ParsingErrorType[\"LexingError\"] = \"LexingError\";\n  ParsingErrorType[\"ParserError\"] = \"ParsingError\";\n  ParsingErrorType[\"StaticOffsetError\"] = \"StaticOffsetError\";\n  ParsingErrorType[\"StaticOffsetOutOfRangeError\"] = \"StaticOffsetOutOfRangeError\";\n  ParsingErrorType[\"RangeOffsetNotAllowed\"] = \"RangeOffsetNotAllowed\";\n})(ParsingErrorType || (ParsingErrorType = {}));\n\nexport var AstNodeType;\n\n(function (AstNodeType) {\n  AstNodeType[\"EMPTY\"] = \"EMPTY\";\n  AstNodeType[\"NUMBER\"] = \"NUMBER\";\n  AstNodeType[\"STRING\"] = \"STRING\";\n  AstNodeType[\"MINUS_UNARY_OP\"] = \"MINUS_UNARY_OP\";\n  AstNodeType[\"PLUS_UNARY_OP\"] = \"PLUS_UNARY_OP\";\n  AstNodeType[\"PERCENT_OP\"] = \"PERCENT_OP\";\n  AstNodeType[\"CONCATENATE_OP\"] = \"CONCATENATE_OP\";\n  AstNodeType[\"EQUALS_OP\"] = \"EQUALS_OP\";\n  AstNodeType[\"NOT_EQUAL_OP\"] = \"NOT_EQUAL_OP\";\n  AstNodeType[\"GREATER_THAN_OP\"] = \"GREATER_THAN_OP\";\n  AstNodeType[\"LESS_THAN_OP\"] = \"LESS_THAN_OP\";\n  AstNodeType[\"GREATER_THAN_OR_EQUAL_OP\"] = \"GREATER_THAN_OR_EQUAL_OP\";\n  AstNodeType[\"LESS_THAN_OR_EQUAL_OP\"] = \"LESS_THAN_OR_EQUAL_OP\";\n  AstNodeType[\"PLUS_OP\"] = \"PLUS_OP\";\n  AstNodeType[\"MINUS_OP\"] = \"MINUS_OP\";\n  AstNodeType[\"TIMES_OP\"] = \"TIMES_OP\";\n  AstNodeType[\"DIV_OP\"] = \"DIV_OP\";\n  AstNodeType[\"POWER_OP\"] = \"POWER_OP\";\n  AstNodeType[\"FUNCTION_CALL\"] = \"FUNCTION_CALL\";\n  AstNodeType[\"NAMED_EXPRESSION\"] = \"NAMED_EXPRESSION\";\n  AstNodeType[\"PARENTHESIS\"] = \"PARENTHESES\";\n  AstNodeType[\"CELL_REFERENCE\"] = \"CELL_REFERENCE\";\n  AstNodeType[\"CELL_RANGE\"] = \"CELL_RANGE\";\n  AstNodeType[\"COLUMN_RANGE\"] = \"COLUMN_RANGE\";\n  AstNodeType[\"ROW_RANGE\"] = \"ROW_RANGE\";\n  AstNodeType[\"ERROR\"] = \"ERROR\";\n  AstNodeType[\"ERROR_WITH_RAW_INPUT\"] = \"ERROR_WITH_RAW_INPUT\";\n  AstNodeType[\"ARRAY\"] = \"ARRAY\";\n})(AstNodeType || (AstNodeType = {}));\n\nexport var RangeSheetReferenceType;\n\n(function (RangeSheetReferenceType) {\n  RangeSheetReferenceType[RangeSheetReferenceType[\"RELATIVE\"] = 0] = \"RELATIVE\";\n  RangeSheetReferenceType[RangeSheetReferenceType[\"START_ABSOLUTE\"] = 1] = \"START_ABSOLUTE\";\n  RangeSheetReferenceType[RangeSheetReferenceType[\"BOTH_ABSOLUTE\"] = 2] = \"BOTH_ABSOLUTE\";\n})(RangeSheetReferenceType || (RangeSheetReferenceType = {}));\n\nexport var buildEmptyArgAst = function buildEmptyArgAst(leadingWhitespace) {\n  return {\n    type: AstNodeType.EMPTY,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildNumberAst = function buildNumberAst(value, leadingWhitespace) {\n  return {\n    type: AstNodeType.NUMBER,\n    value: value,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildStringAst = function buildStringAst(token) {\n  var _a;\n\n  return {\n    type: AstNodeType.STRING,\n    value: token.image.slice(1, -1),\n    leadingWhitespace: (_a = token.leadingWhitespace) === null || _a === void 0 ? void 0 : _a.image\n  };\n};\nexport var buildCellReferenceAst = function buildCellReferenceAst(reference, leadingWhitespace) {\n  return {\n    type: AstNodeType.CELL_REFERENCE,\n    reference: reference,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildCellRangeAst = function buildCellRangeAst(start, end, sheetReferenceType, leadingWhitespace) {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.CELL_RANGE,\n    start: start,\n    end: end,\n    sheetReferenceType: sheetReferenceType,\n    leadingWhitespace: leadingWhitespace\n  };\n};\nexport var buildColumnRangeAst = function buildColumnRangeAst(start, end, sheetReferenceType, leadingWhitespace) {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.COLUMN_RANGE,\n    start: start,\n    end: end,\n    sheetReferenceType: sheetReferenceType,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildRowRangeAst = function buildRowRangeAst(start, end, sheetReferenceType, leadingWhitespace) {\n  assertRangeConsistency(start, end, sheetReferenceType);\n  return {\n    type: AstNodeType.ROW_RANGE,\n    start: start,\n    end: end,\n    sheetReferenceType: sheetReferenceType,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildConcatenateOpAst = function buildConcatenateOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.CONCATENATE_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildEqualsOpAst = function buildEqualsOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.EQUALS_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildNotEqualOpAst = function buildNotEqualOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.NOT_EQUAL_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildGreaterThanOpAst = function buildGreaterThanOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.GREATER_THAN_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildLessThanOpAst = function buildLessThanOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.LESS_THAN_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildGreaterThanOrEqualOpAst = function buildGreaterThanOrEqualOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.GREATER_THAN_OR_EQUAL_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildLessThanOrEqualOpAst = function buildLessThanOrEqualOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.LESS_THAN_OR_EQUAL_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildPlusOpAst = function buildPlusOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.PLUS_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildMinusOpAst = function buildMinusOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.MINUS_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildTimesOpAst = function buildTimesOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.TIMES_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildDivOpAst = function buildDivOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.DIV_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildPowerOpAst = function buildPowerOpAst(left, right, leadingWhitespace) {\n  return {\n    type: AstNodeType.POWER_OP,\n    left: left,\n    right: right,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildMinusUnaryOpAst = function buildMinusUnaryOpAst(value, leadingWhitespace) {\n  return {\n    type: AstNodeType.MINUS_UNARY_OP,\n    value: value,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildPlusUnaryOpAst = function buildPlusUnaryOpAst(value, leadingWhitespace) {\n  return {\n    type: AstNodeType.PLUS_UNARY_OP,\n    value: value,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildPercentOpAst = function buildPercentOpAst(value, leadingWhitespace) {\n  return {\n    type: AstNodeType.PERCENT_OP,\n    value: value,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildProcedureAst = function buildProcedureAst(procedureName, args, leadingWhitespace, internalWhitespace) {\n  return {\n    type: AstNodeType.FUNCTION_CALL,\n    procedureName: procedureName,\n    args: args,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n    internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n  };\n};\nexport var buildArrayAst = function buildArrayAst(args, leadingWhitespace, internalWhitespace) {\n  return {\n    type: AstNodeType.ARRAY,\n    args: args,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n    internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n  };\n};\nexport var buildNamedExpressionAst = function buildNamedExpressionAst(expressionName, leadingWhitespace) {\n  return {\n    type: AstNodeType.NAMED_EXPRESSION,\n    expressionName: expressionName,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildParenthesisAst = function buildParenthesisAst(expression, leadingWhitespace, internalWhitespace) {\n  return {\n    type: AstNodeType.PARENTHESIS,\n    expression: expression,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,\n    internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image\n  };\n};\nexport var buildCellErrorAst = function buildCellErrorAst(error, leadingWhitespace) {\n  return {\n    type: AstNodeType.ERROR,\n    error: error,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildErrorWithRawInputAst = function buildErrorWithRawInputAst(rawInput, error, leadingWhitespace) {\n  return {\n    type: AstNodeType.ERROR_WITH_RAW_INPUT,\n    error: error,\n    rawInput: rawInput,\n    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image\n  };\n};\nexport var buildParsingErrorAst = function buildParsingErrorAst() {\n  return {\n    type: AstNodeType.ERROR,\n    error: CellError.parsingError()\n  };\n};\n\nfunction assertRangeConsistency(start, end, sheetReferenceType) {\n  if (start.sheet !== undefined && end.sheet === undefined || start.sheet === undefined && end.sheet !== undefined) {\n    throw new Error('Start address inconsistent with end address');\n  }\n\n  if (start.sheet === undefined && sheetReferenceType !== RangeSheetReferenceType.RELATIVE || start.sheet !== undefined && sheetReferenceType === RangeSheetReferenceType.RELATIVE) {\n    throw new Error('Sheet address inconsistent with sheet reference type');\n  }\n}\n\nexport function imageWithWhitespace(image, leadingWhitespace) {\n  return (leadingWhitespace !== null && leadingWhitespace !== void 0 ? leadingWhitespace : '') + image;\n}"]},"metadata":{},"sourceType":"module"}