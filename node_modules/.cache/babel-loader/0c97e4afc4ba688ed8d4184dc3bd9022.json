{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { AbsoluteCellRange } from './AbsoluteCellRange';\nimport { invalidSimpleCellAddress, simpleCellAddress } from './Cell';\nimport { CellContent, isMatrix } from './CellContentParser';\nimport { ClipboardOperations } from './ClipboardOperations';\nimport { AddColumnsCommand, AddRowsCommand, Operations, RemoveColumnsCommand, RemoveRowsCommand } from './Operations';\nimport { doesContainRelativeReferences } from './NamedExpressions';\nimport { InvalidAddressError, InvalidArgumentsError, MatrixFormulasNotSupportedError, NamedExpressionDoesNotExistError, NamedExpressionNameIsAlreadyTakenError, NamedExpressionNameIsInvalidError, NoOperationToRedoError, NoOperationToUndoError, NoRelativeAddressesAllowedError, NoSheetWithIdError, NoSheetWithNameError, NothingToPasteError, SheetNameAlreadyTakenError, SheetSizeLimitExceededError, SourceLocationHasMatrixError, TargetLocationHasMatrixError } from './errors';\nimport { ColumnsSpan, RowsSpan } from './Span';\nimport { AddColumnsUndoEntry, AddNamedExpressionUndoEntry, AddRowsUndoEntry, AddSheetUndoEntry, ChangeNamedExpressionUndoEntry, ClearSheetUndoEntry, MoveCellsUndoEntry, MoveColumnsUndoEntry, MoveRowsUndoEntry, PasteUndoEntry, RemoveColumnsUndoEntry, RemoveNamedExpressionUndoEntry, RemoveRowsUndoEntry, RemoveSheetUndoEntry, RenameSheetUndoEntry, SetCellContentsUndoEntry, SetColumnOrderUndoEntry, SetRowOrderUndoEntry, SetSheetContentUndoEntry, UndoRedo } from './UndoRedo';\nimport { findBoundaries, validateAsSheet } from './Sheet';\nexport var CrudOperations = /*#__PURE__*/function () {\n  function CrudOperations(\n  /** Engine config */\n  config,\n  /** Statistics module for benchmarking */\n  stats,\n  /** Dependency graph storing sheets structure */\n  dependencyGraph,\n  /** Column search strategy used by VLOOKUP plugin */\n  columnSearch,\n  /** Parser with caching */\n  parser,\n  /** Raw cell input parser */\n  cellContentParser,\n  /** Service handling postponed CRUD transformations */\n  lazilyTransformingAstService,\n  /** Storage for named expressions */\n  namedExpressions) {\n    _classCallCheck(this, CrudOperations);\n\n    this.config = config;\n    this.stats = stats;\n    this.dependencyGraph = dependencyGraph;\n    this.columnSearch = columnSearch;\n    this.parser = parser;\n    this.cellContentParser = cellContentParser;\n    this.lazilyTransformingAstService = lazilyTransformingAstService;\n    this.namedExpressions = namedExpressions;\n    this.operations = new Operations(this.dependencyGraph, this.columnSearch, this.cellContentParser, this.parser, this.stats, this.lazilyTransformingAstService, this.namedExpressions, this.config);\n    this.clipboardOperations = new ClipboardOperations(this.dependencyGraph, this.operations, this.parser, this.lazilyTransformingAstService, this.config);\n    this.undoRedo = new UndoRedo(this.config, this.operations);\n  }\n\n  _createClass(CrudOperations, [{\n    key: \"addRows\",\n    value: function addRows(sheet) {\n      for (var _len = arguments.length, indexes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        indexes[_key - 1] = arguments[_key];\n      }\n\n      var addRowsCommand = new AddRowsCommand(sheet, indexes);\n      this.ensureItIsPossibleToAddRows.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.operations.addRows(addRowsCommand);\n      this.undoRedo.saveOperation(new AddRowsUndoEntry(addRowsCommand));\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(sheet) {\n      for (var _len2 = arguments.length, indexes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        indexes[_key2 - 1] = arguments[_key2];\n      }\n\n      var removeRowsCommand = new RemoveRowsCommand(sheet, indexes);\n      this.ensureItIsPossibleToRemoveRows.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var rowsRemovals = this.operations.removeRows(removeRowsCommand);\n      this.undoRedo.saveOperation(new RemoveRowsUndoEntry(removeRowsCommand, rowsRemovals));\n    }\n  }, {\n    key: \"addColumns\",\n    value: function addColumns(sheet) {\n      for (var _len3 = arguments.length, indexes = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        indexes[_key3 - 1] = arguments[_key3];\n      }\n\n      var addColumnsCommand = new AddColumnsCommand(sheet, indexes);\n      this.ensureItIsPossibleToAddColumns.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.operations.addColumns(addColumnsCommand);\n      this.undoRedo.saveOperation(new AddColumnsUndoEntry(addColumnsCommand));\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(sheet) {\n      for (var _len4 = arguments.length, indexes = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        indexes[_key4 - 1] = arguments[_key4];\n      }\n\n      var removeColumnsCommand = new RemoveColumnsCommand(sheet, indexes);\n      this.ensureItIsPossibleToRemoveColumns.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var columnsRemovals = this.operations.removeColumns(removeColumnsCommand);\n      this.undoRedo.saveOperation(new RemoveColumnsUndoEntry(removeColumnsCommand, columnsRemovals));\n    }\n  }, {\n    key: \"moveCells\",\n    value: function moveCells(sourceLeftCorner, width, height, destinationLeftCorner) {\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n\n      var _this$operations$move = this.operations.moveCells(sourceLeftCorner, width, height, destinationLeftCorner),\n          version = _this$operations$move.version,\n          overwrittenCellsData = _this$operations$move.overwrittenCellsData,\n          addedGlobalNamedExpressions = _this$operations$move.addedGlobalNamedExpressions;\n\n      this.undoRedo.saveOperation(new MoveCellsUndoEntry(sourceLeftCorner, width, height, destinationLeftCorner, overwrittenCellsData, addedGlobalNamedExpressions, version));\n    }\n  }, {\n    key: \"moveRows\",\n    value: function moveRows(sheet, startRow, numberOfRows, targetRow) {\n      this.ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var version = this.operations.moveRows(sheet, startRow, numberOfRows, targetRow);\n      this.undoRedo.saveOperation(new MoveRowsUndoEntry(sheet, startRow, numberOfRows, targetRow, version));\n    }\n  }, {\n    key: \"moveColumns\",\n    value: function moveColumns(sheet, startColumn, numberOfColumns, targetColumn) {\n      this.ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn);\n      this.undoRedo.clearRedoStack();\n      var version = this.operations.moveColumns(sheet, startColumn, numberOfColumns, targetColumn);\n      this.undoRedo.saveOperation(new MoveColumnsUndoEntry(sheet, startColumn, numberOfColumns, targetColumn, version));\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(sourceLeftCorner, width, height) {\n      this.clipboardOperations.cut(sourceLeftCorner, width, height);\n    }\n  }, {\n    key: \"ensureItIsPossibleToCopy\",\n    value: function ensureItIsPossibleToCopy(sourceLeftCorner, width, height) {\n      if (!isPositiveInteger(width)) {\n        throw new InvalidArgumentsError('width to be positive integer.');\n      }\n\n      if (!isPositiveInteger(height)) {\n        throw new InvalidArgumentsError('height to be positive integer.');\n      }\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(sourceLeftCorner, width, height) {\n      this.ensureItIsPossibleToCopy(sourceLeftCorner, width, height);\n      this.clipboardOperations.copy(sourceLeftCorner, width, height);\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(targetLeftCorner) {\n      var clipboard = this.clipboardOperations.clipboard;\n\n      if (clipboard === undefined) {\n        throw new NothingToPasteError();\n      } else if (this.clipboardOperations.isCutClipboard()) {\n        this.moveCells(clipboard.sourceLeftCorner, clipboard.width, clipboard.height, targetLeftCorner);\n      } else if (this.clipboardOperations.isCopyClipboard()) {\n        this.clipboardOperations.ensureItIsPossibleToCopyPaste(targetLeftCorner);\n        var targetRange = AbsoluteCellRange.spanFrom(targetLeftCorner, clipboard.width, clipboard.height);\n        var oldContent = this.operations.getRangeClipboardCells(targetRange);\n        this.undoRedo.clearRedoStack();\n        this.dependencyGraph.breakNumericMatricesInRange(targetRange);\n        var addedGlobalNamedExpressions = this.operations.restoreClipboardCells(clipboard.sourceLeftCorner.sheet, clipboard.getContent(targetLeftCorner));\n        this.undoRedo.saveOperation(new PasteUndoEntry(targetLeftCorner, oldContent, clipboard.content, addedGlobalNamedExpressions));\n      }\n    }\n  }, {\n    key: \"beginUndoRedoBatchMode\",\n    value: function beginUndoRedoBatchMode() {\n      this.undoRedo.beginBatchMode();\n    }\n  }, {\n    key: \"commitUndoRedoBatchMode\",\n    value: function commitUndoRedoBatchMode() {\n      this.undoRedo.commitBatchMode();\n    }\n  }, {\n    key: \"isClipboardEmpty\",\n    value: function isClipboardEmpty() {\n      return this.clipboardOperations.clipboard === undefined;\n    }\n  }, {\n    key: \"clearClipboard\",\n    value: function clearClipboard() {\n      this.clipboardOperations.clear();\n    }\n  }, {\n    key: \"addSheet\",\n    value: function addSheet(name) {\n      if (name) {\n        this.ensureItIsPossibleToAddSheet(name);\n      }\n\n      this.undoRedo.clearRedoStack();\n      var addedSheetName = this.operations.addSheet(name);\n      this.undoRedo.saveOperation(new AddSheetUndoEntry(addedSheetName));\n      return addedSheetName;\n    }\n  }, {\n    key: \"removeSheet\",\n    value: function removeSheet(sheetName) {\n      this.ensureSheetExists(sheetName);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var sheetId = this.sheetMapping.fetch(sheetName);\n      var originalName = this.sheetMapping.fetchDisplayName(sheetId);\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n\n      var _this$operations$remo = this.operations.removeSheet(sheetName),\n          version = _this$operations$remo.version,\n          scopedNamedExpressions = _this$operations$remo.scopedNamedExpressions;\n\n      this.undoRedo.saveOperation(new RemoveSheetUndoEntry(originalName, sheetId, oldSheetContent, scopedNamedExpressions, version));\n    }\n  }, {\n    key: \"renameSheet\",\n    value: function renameSheet(sheetId, newName) {\n      this.ensureItIsPossibleToRenameSheet(sheetId, newName);\n      var oldName = this.operations.renameSheet(sheetId, newName);\n\n      if (oldName !== undefined) {\n        this.undoRedo.clearRedoStack();\n        this.undoRedo.saveOperation(new RenameSheetUndoEntry(sheetId, oldName, newName));\n      }\n\n      return oldName;\n    }\n  }, {\n    key: \"clearSheet\",\n    value: function clearSheet(sheetName) {\n      this.ensureSheetExists(sheetName);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var sheetId = this.sheetMapping.fetch(sheetName);\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n      this.operations.clearSheet(sheetId);\n      this.undoRedo.saveOperation(new ClearSheetUndoEntry(sheetId, oldSheetContent));\n    }\n  }, {\n    key: \"setCellContents\",\n    value: function setCellContents(topLeftCornerAddress, cellContents) {\n      if (!(cellContents instanceof Array)) {\n        cellContents = [[cellContents]];\n      } else {\n        for (var i = 0; i < cellContents.length; i++) {\n          if (!(cellContents[i] instanceof Array)) {\n            throw new InvalidArgumentsError('an array of arrays or a raw cell value.');\n          }\n\n          for (var j = 0; j < cellContents[i].length; j++) {\n            if (isMatrix(cellContents[i][j])) {\n              throw new Error('Cant change matrices in batch operation');\n            }\n          }\n        }\n      }\n\n      this.ensureItIsPossibleToChangeCellContents(topLeftCornerAddress, cellContents);\n      this.undoRedo.clearRedoStack();\n      var modifiedCellContents = [];\n\n      for (var _i = 0; _i < cellContents.length; _i++) {\n        for (var _j = 0; _j < cellContents[_i].length; _j++) {\n          var address = {\n            sheet: topLeftCornerAddress.sheet,\n            row: topLeftCornerAddress.row + _i,\n            col: topLeftCornerAddress.col + _j\n          };\n          this.clipboardOperations.abortCut();\n          var oldContent = this.operations.getClipboardCell(address);\n          this.operations.setCellContent(address, cellContents[_i][_j]);\n          modifiedCellContents.push({\n            address: address,\n            newContent: cellContents[_i][_j],\n            oldContent: oldContent\n          });\n        }\n      }\n\n      this.undoRedo.saveOperation(new SetCellContentsUndoEntry(modifiedCellContents));\n    }\n  }, {\n    key: \"setSheetContent\",\n    value: function setSheetContent(sheetName, values) {\n      this.ensureSheetExists(sheetName);\n      var sheetId = this.sheetMapping.fetch(sheetName);\n      this.ensureItIsPossibleToChangeSheetContents(sheetId, values);\n      validateAsSheet(values);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n      this.operations.setSheetContent(sheetId, values);\n      this.undoRedo.saveOperation(new SetSheetContentUndoEntry(sheetId, oldSheetContent, values));\n    }\n  }, {\n    key: \"setRowOrder\",\n    value: function setRowOrder(sheetId, rowMapping) {\n      this.validateSwapRowIndexes(sheetId, rowMapping);\n      this.testRowOrderForMatrices(sheetId, rowMapping);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldContent = this.operations.setRowOrder(sheetId, rowMapping);\n      this.undoRedo.saveOperation(new SetRowOrderUndoEntry(sheetId, rowMapping, oldContent));\n    }\n  }, {\n    key: \"validateSwapRowIndexes\",\n    value: function validateSwapRowIndexes(sheetId, rowMapping) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      this.validateRowOrColumnMapping(sheetId, rowMapping, 'row');\n    }\n  }, {\n    key: \"testColumnOrderForMatrices\",\n    value: function testColumnOrderForMatrices(sheetId, columnMapping) {\n      var _iterator = _createForOfIteratorHelper(columnMapping),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              source = _step$value[0],\n              target = _step$value[1];\n\n          if (source !== target) {\n            var rowRange = AbsoluteCellRange.spanFrom({\n              sheet: sheetId,\n              col: source,\n              row: 0\n            }, 1, Infinity);\n\n            if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRange(rowRange)) {\n              throw new SourceLocationHasMatrixError();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"setColumnOrder\",\n    value: function setColumnOrder(sheetId, columnMapping) {\n      this.validateSwapColumnIndexes(sheetId, columnMapping);\n      this.testColumnOrderForMatrices(sheetId, columnMapping);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldContent = this.operations.setColumnOrder(sheetId, columnMapping);\n      this.undoRedo.saveOperation(new SetColumnOrderUndoEntry(sheetId, columnMapping, oldContent));\n    }\n  }, {\n    key: \"validateSwapColumnIndexes\",\n    value: function validateSwapColumnIndexes(sheetId, columnMapping) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      this.validateRowOrColumnMapping(sheetId, columnMapping, 'column');\n    }\n  }, {\n    key: \"testRowOrderForMatrices\",\n    value: function testRowOrderForMatrices(sheetId, rowMapping) {\n      var _iterator2 = _createForOfIteratorHelper(rowMapping),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              source = _step2$value[0],\n              target = _step2$value[1];\n\n          if (source !== target) {\n            var rowRange = AbsoluteCellRange.spanFrom({\n              sheet: sheetId,\n              col: 0,\n              row: source\n            }, Infinity, 1);\n\n            if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRange(rowRange)) {\n              throw new SourceLocationHasMatrixError();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"mappingFromOrder\",\n    value: function mappingFromOrder(sheetId, newOrder, rowOrColumn) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);\n\n      if (newOrder.length !== limit) {\n        throw new InvalidArgumentsError(\"number of \".concat(rowOrColumn, \"s provided to be sheet \").concat(rowOrColumn === 'row' ? 'height' : 'width', \".\"));\n      }\n\n      var ret = [];\n\n      for (var i = 0; i < limit; i++) {\n        if (newOrder[i] !== i) {\n          ret.push([i, newOrder[i]]);\n        }\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"validateRowOrColumnMapping\",\n    value: function validateRowOrColumnMapping(sheetId, rowMapping, rowOrColumn) {\n      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);\n      var sources = rowMapping.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            a = _ref2[0],\n            _ = _ref2[1];\n\n        return a;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n      var targets = rowMapping.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            _ = _ref4[0],\n            b = _ref4[1];\n\n        return b;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n\n      for (var i = 0; i < sources.length; i++) {\n        if (!isNonnegativeInteger(sources[i]) || sources[i] >= limit) {\n          throw new InvalidArgumentsError(\"\".concat(rowOrColumn, \" numbers to be nonnegative integers and less than sheet \").concat(rowOrColumn === 'row' ? 'height' : 'width', \".\"));\n        }\n\n        if (sources[i] === sources[i + 1]) {\n          throw new InvalidArgumentsError(\"source \".concat(rowOrColumn, \" numbers to be unique.\"));\n        }\n\n        if (sources[i] !== targets[i]) {\n          throw new InvalidArgumentsError(\"target \".concat(rowOrColumn, \" numbers to be permutation of source \").concat(rowOrColumn, \" numbers.\"));\n        }\n      }\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      if (this.undoRedo.isUndoStackEmpty()) {\n        throw new NoOperationToUndoError();\n      }\n\n      this.clipboardOperations.abortCut();\n      this.undoRedo.undo();\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      if (this.undoRedo.isRedoStackEmpty()) {\n        throw new NoOperationToRedoError();\n      }\n\n      this.clipboardOperations.abortCut();\n      this.undoRedo.redo();\n    }\n  }, {\n    key: \"addNamedExpression\",\n    value: function addNamedExpression(expressionName, expression, sheetScope, options) {\n      var sheetId = this.scopeId(sheetScope);\n      this.ensureNamedExpressionNameIsValid(expressionName, sheetId);\n      this.operations.addNamedExpression(expressionName, expression, sheetId, options);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new AddNamedExpressionUndoEntry(expressionName, expression, sheetId, options));\n    }\n  }, {\n    key: \"changeNamedExpressionExpression\",\n    value: function changeNamedExpressionExpression(expressionName, sheetScope, newExpression, options) {\n      var sheetId = this.scopeId(sheetScope);\n\n      var _this$operations$chan = this.operations.changeNamedExpressionExpression(expressionName, newExpression, sheetId, options),\n          _this$operations$chan2 = _slicedToArray(_this$operations$chan, 2),\n          oldNamedExpression = _this$operations$chan2[0],\n          content = _this$operations$chan2[1];\n\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new ChangeNamedExpressionUndoEntry(oldNamedExpression, newExpression, content, sheetId, options));\n    }\n  }, {\n    key: \"removeNamedExpression\",\n    value: function removeNamedExpression(expressionName, sheetScope) {\n      var sheetId = this.scopeId(sheetScope);\n\n      var _this$operations$remo2 = this.operations.removeNamedExpression(expressionName, sheetId),\n          _this$operations$remo3 = _slicedToArray(_this$operations$remo2, 2),\n          namedExpression = _this$operations$remo3[0],\n          content = _this$operations$remo3[1];\n\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new RemoveNamedExpressionUndoEntry(namedExpression, content, sheetId));\n      return namedExpression;\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddNamedExpression\",\n    value: function ensureItIsPossibleToAddNamedExpression(expressionName, expression, sheetScope) {\n      var scopeId = this.scopeId(sheetScope);\n      this.ensureNamedExpressionNameIsValid(expressionName, scopeId);\n      this.ensureNamedExpressionIsValid(expression);\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeNamedExpression\",\n    value: function ensureItIsPossibleToChangeNamedExpression(expressionName, expression, sheetScope) {\n      var scopeId = this.scopeId(sheetScope);\n\n      if (this.namedExpressions.namedExpressionForScope(expressionName, scopeId) === undefined) {\n        throw new NamedExpressionDoesNotExistError(expressionName);\n      }\n\n      this.ensureNamedExpressionIsValid(expression);\n    }\n  }, {\n    key: \"isItPossibleToRemoveNamedExpression\",\n    value: function isItPossibleToRemoveNamedExpression(expressionName, sheetScope) {\n      var scopeId = this.scopeId(sheetScope);\n\n      if (this.namedExpressions.namedExpressionForScope(expressionName, scopeId) === undefined) {\n        throw new NamedExpressionDoesNotExistError(expressionName);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddRows\",\n    value: function ensureItIsPossibleToAddRows(sheet) {\n      if (!this.sheetMapping.hasSheetWithId(sheet)) {\n        throw new NoSheetWithIdError(sheet);\n      }\n\n      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);\n\n      for (var _len5 = arguments.length, indexes = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        indexes[_key5 - 1] = arguments[_key5];\n      }\n\n      var newRowsCount = indexes.map(function (index) {\n        return index[1];\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      if (sheetHeight + newRowsCount > this.config.maxRows) {\n        throw new SheetSizeLimitExceededError();\n      }\n\n      for (var _i2 = 0, _indexes = indexes; _i2 < _indexes.length; _i2++) {\n        var _indexes$_i = _slicedToArray(_indexes[_i2], 2),\n            row = _indexes$_i[0],\n            numberOfRowsToAdd = _indexes$_i[1];\n\n        if (!isNonnegativeInteger(row) || !isPositiveInteger(numberOfRowsToAdd)) {\n          throw new InvalidArgumentsError('row number to be nonnegative and number of rows to add to be positive.');\n        }\n\n        if (isPositiveInteger(row) && this.dependencyGraph.matrixMapping.isFormulaMatrixInRow(sheet, row - 1) && this.dependencyGraph.matrixMapping.isFormulaMatrixInRow(sheet, row)) {\n          throw new TargetLocationHasMatrixError();\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRemoveRows\",\n    value: function ensureItIsPossibleToRemoveRows(sheet) {\n      for (var _len6 = arguments.length, indexes = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        indexes[_key6 - 1] = arguments[_key6];\n      }\n\n      for (var _i3 = 0, _indexes2 = indexes; _i3 < _indexes2.length; _i3++) {\n        var _indexes2$_i = _slicedToArray(_indexes2[_i3], 2),\n            rowStart = _indexes2$_i[0],\n            numberOfRows = _indexes2$_i[1];\n\n        var rowEnd = rowStart + numberOfRows - 1;\n\n        if (!isNonnegativeInteger(rowStart) || !isNonnegativeInteger(rowEnd)) {\n          throw new InvalidArgumentsError('starting and ending row to be nonnegative.');\n        }\n\n        if (rowEnd < rowStart) {\n          throw new InvalidArgumentsError('starting row to be smaller than the ending row.');\n        }\n\n        var rowsToRemove = RowsSpan.fromRowStartAndEnd(sheet, rowStart, rowEnd);\n\n        if (!this.sheetMapping.hasSheetWithId(sheet)) {\n          throw new NoSheetWithIdError(sheet);\n        }\n\n        if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRows(rowsToRemove)) {\n          throw new SourceLocationHasMatrixError();\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddColumns\",\n    value: function ensureItIsPossibleToAddColumns(sheet) {\n      if (!this.sheetMapping.hasSheetWithId(sheet)) {\n        throw new NoSheetWithIdError(sheet);\n      }\n\n      var sheetWidth = this.dependencyGraph.getSheetWidth(sheet);\n\n      for (var _len7 = arguments.length, indexes = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        indexes[_key7 - 1] = arguments[_key7];\n      }\n\n      var newColumnsCount = indexes.map(function (index) {\n        return index[1];\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      if (sheetWidth + newColumnsCount > this.config.maxColumns) {\n        throw new SheetSizeLimitExceededError();\n      }\n\n      for (var _i4 = 0, _indexes3 = indexes; _i4 < _indexes3.length; _i4++) {\n        var _indexes3$_i = _slicedToArray(_indexes3[_i4], 2),\n            column = _indexes3$_i[0],\n            numberOfColumnsToAdd = _indexes3$_i[1];\n\n        if (!isNonnegativeInteger(column) || !isPositiveInteger(numberOfColumnsToAdd)) {\n          throw new InvalidArgumentsError('column number to be nonnegative and number of columns to add to be positive.');\n        }\n\n        if (isPositiveInteger(column) && this.dependencyGraph.matrixMapping.isFormulaMatrixInColumn(sheet, column - 1) && this.dependencyGraph.matrixMapping.isFormulaMatrixInColumn(sheet, column)) {\n          throw new TargetLocationHasMatrixError();\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRemoveColumns\",\n    value: function ensureItIsPossibleToRemoveColumns(sheet) {\n      for (var _len8 = arguments.length, indexes = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        indexes[_key8 - 1] = arguments[_key8];\n      }\n\n      for (var _i5 = 0, _indexes4 = indexes; _i5 < _indexes4.length; _i5++) {\n        var _indexes4$_i = _slicedToArray(_indexes4[_i5], 2),\n            columnStart = _indexes4$_i[0],\n            numberOfColumns = _indexes4$_i[1];\n\n        var columnEnd = columnStart + numberOfColumns - 1;\n\n        if (!isNonnegativeInteger(columnStart) || !isNonnegativeInteger(columnEnd)) {\n          throw new InvalidArgumentsError('starting and ending column to be nonnegative.');\n        }\n\n        if (columnEnd < columnStart) {\n          throw new InvalidArgumentsError('starting column to be smaller than the ending column.');\n        }\n\n        var columnsToRemove = ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart, columnEnd);\n\n        if (!this.sheetMapping.hasSheetWithId(sheet)) {\n          throw new NoSheetWithIdError(sheet);\n        }\n\n        if (this.dependencyGraph.matrixMapping.isFormulaMatrixInColumns(columnsToRemove)) {\n          throw new SourceLocationHasMatrixError();\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToMoveRows\",\n    value: function ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow) {\n      this.ensureItIsPossibleToAddRows(sheet, [targetRow, numberOfRows]);\n      var sourceStart = simpleCellAddress(sheet, 0, startRow);\n      var targetStart = simpleCellAddress(sheet, 0, targetRow);\n\n      if (!this.sheetMapping.hasSheetWithId(sheet) || invalidSimpleCellAddress(sourceStart) || invalidSimpleCellAddress(targetStart) || !isPositiveInteger(numberOfRows) || targetRow <= startRow + numberOfRows && targetRow >= startRow) {\n        throw new InvalidArgumentsError('a valid range of rows to move.');\n      }\n\n      var width = this.dependencyGraph.getSheetWidth(sheet);\n      var sourceRange = AbsoluteCellRange.spanFrom(sourceStart, width, numberOfRows);\n\n      if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRange(sourceRange)) {\n        throw new SourceLocationHasMatrixError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToMoveColumns\",\n    value: function ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn) {\n      this.ensureItIsPossibleToAddColumns(sheet, [targetColumn, numberOfColumns]);\n      var sourceStart = simpleCellAddress(sheet, startColumn, 0);\n      var targetStart = simpleCellAddress(sheet, targetColumn, 0);\n\n      if (!this.sheetMapping.hasSheetWithId(sheet) || invalidSimpleCellAddress(sourceStart) || invalidSimpleCellAddress(targetStart) || !isPositiveInteger(numberOfColumns) || targetColumn <= startColumn + numberOfColumns && targetColumn >= startColumn) {\n        throw new InvalidArgumentsError('a valid range of columns to move.');\n      }\n\n      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);\n      var sourceRange = AbsoluteCellRange.spanFrom(sourceStart, numberOfColumns, sheetHeight);\n\n      if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRange(sourceRange)) {\n        throw new SourceLocationHasMatrixError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddSheet\",\n    value: function ensureItIsPossibleToAddSheet(name) {\n      if (this.sheetMapping.hasSheetWithName(name)) {\n        throw new SheetNameAlreadyTakenError(name);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRenameSheet\",\n    value: function ensureItIsPossibleToRenameSheet(sheetId, name) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      var existingSheetId = this.sheetMapping.get(name);\n\n      if (existingSheetId !== undefined && existingSheetId !== sheetId) {\n        throw new SheetNameAlreadyTakenError(name);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeContent\",\n    value: function ensureItIsPossibleToChangeContent(address) {\n      if (invalidSimpleCellAddress(address)) {\n        throw new InvalidAddressError(address);\n      }\n\n      if (!this.sheetMapping.hasSheetWithId(address.sheet)) {\n        throw new NoSheetWithIdError(address.sheet);\n      }\n\n      if (this.dependencyGraph.matrixMapping.isFormulaMatrixAtAddress(address)) {\n        throw new SourceLocationHasMatrixError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeCellContents\",\n    value: function ensureItIsPossibleToChangeCellContents(inputAddress, content) {\n      var boundaries = findBoundaries(content);\n      var targetRange = AbsoluteCellRange.spanFrom(inputAddress, boundaries.width, boundaries.height);\n      this.ensureRangeInSizeLimits(targetRange);\n\n      var _iterator3 = _createForOfIteratorHelper(targetRange.addresses(this.dependencyGraph)),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var address = _step3.value;\n          this.ensureItIsPossibleToChangeContent(address);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeSheetContents\",\n    value: function ensureItIsPossibleToChangeSheetContents(sheetId, content) {\n      var boundaries = findBoundaries(content);\n      var targetRange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheetId, 0, 0), boundaries.width, boundaries.height);\n      this.ensureRangeInSizeLimits(targetRange);\n    }\n  }, {\n    key: \"ensureRangeInSizeLimits\",\n    value: function ensureRangeInSizeLimits(range) {\n      if (range.exceedsSheetSizeLimits(this.config.maxColumns, this.config.maxRows)) {\n        throw new SheetSizeLimitExceededError();\n      }\n    }\n  }, {\n    key: \"isThereSomethingToUndo\",\n    value: function isThereSomethingToUndo() {\n      return !this.undoRedo.isUndoStackEmpty();\n    }\n  }, {\n    key: \"isThereSomethingToRedo\",\n    value: function isThereSomethingToRedo() {\n      return !this.undoRedo.isRedoStackEmpty();\n    }\n  }, {\n    key: \"getAndClearContentChanges\",\n    value: function getAndClearContentChanges() {\n      return this.operations.getAndClearContentChanges();\n    }\n  }, {\n    key: \"ensureSheetExists\",\n    value: function ensureSheetExists(sheetName) {\n      if (!this.sheetMapping.hasSheetWithName(sheetName)) {\n        throw new NoSheetWithNameError(sheetName);\n      }\n    }\n  }, {\n    key: \"scopeId\",\n    value: function scopeId(sheetName) {\n      if (sheetName !== undefined) {\n        this.ensureSheetExists(sheetName);\n        return this.sheetMapping.fetch(sheetName);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"sheetMapping\",\n    get: function get() {\n      return this.dependencyGraph.sheetMapping;\n    }\n  }, {\n    key: \"ensureNamedExpressionNameIsValid\",\n    value: function ensureNamedExpressionNameIsValid(expressionName, sheetId) {\n      if (!this.namedExpressions.isNameValid(expressionName)) {\n        throw new NamedExpressionNameIsInvalidError(expressionName);\n      }\n\n      if (!this.namedExpressions.isNameAvailable(expressionName, sheetId)) {\n        throw new NamedExpressionNameIsAlreadyTakenError(expressionName);\n      }\n    }\n  }, {\n    key: \"ensureNamedExpressionIsValid\",\n    value: function ensureNamedExpressionIsValid(expression) {\n      var parsedExpression = this.cellContentParser.parse(expression);\n\n      if (parsedExpression instanceof CellContent.MatrixFormula) {\n        throw new MatrixFormulasNotSupportedError();\n      } else if (parsedExpression instanceof CellContent.Formula) {\n        var parsingResult = this.parser.parse(parsedExpression.formula, simpleCellAddress(-1, 0, 0));\n\n        if (doesContainRelativeReferences(parsingResult.ast)) {\n          throw new NoRelativeAddressesAllowedError();\n        }\n      }\n    }\n  }]);\n\n  return CrudOperations;\n}();\n\nfunction isPositiveInteger(x) {\n  return Number.isInteger(x) && x > 0;\n}\n\nfunction isNonnegativeInteger(x) {\n  return Number.isInteger(x) && x >= 0;\n}","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/CrudOperations.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","Symbol","iterator","_arr","_n","_d","_s","_e","call","next","done","push","value","length","err","Array","isArray","_createForOfIteratorHelper","o","allowArrayLike","it","F","s","n","e","_e2","f","normalCompletion","didErr","step","_e3","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","AbsoluteCellRange","invalidSimpleCellAddress","simpleCellAddress","CellContent","isMatrix","ClipboardOperations","AddColumnsCommand","AddRowsCommand","Operations","RemoveColumnsCommand","RemoveRowsCommand","doesContainRelativeReferences","InvalidAddressError","InvalidArgumentsError","MatrixFormulasNotSupportedError","NamedExpressionDoesNotExistError","NamedExpressionNameIsAlreadyTakenError","NamedExpressionNameIsInvalidError","NoOperationToRedoError","NoOperationToUndoError","NoRelativeAddressesAllowedError","NoSheetWithIdError","NoSheetWithNameError","NothingToPasteError","SheetNameAlreadyTakenError","SheetSizeLimitExceededError","SourceLocationHasMatrixError","TargetLocationHasMatrixError","ColumnsSpan","RowsSpan","AddColumnsUndoEntry","AddNamedExpressionUndoEntry","AddRowsUndoEntry","AddSheetUndoEntry","ChangeNamedExpressionUndoEntry","ClearSheetUndoEntry","MoveCellsUndoEntry","MoveColumnsUndoEntry","MoveRowsUndoEntry","PasteUndoEntry","RemoveColumnsUndoEntry","RemoveNamedExpressionUndoEntry","RemoveRowsUndoEntry","RemoveSheetUndoEntry","RenameSheetUndoEntry","SetCellContentsUndoEntry","SetColumnOrderUndoEntry","SetRowOrderUndoEntry","SetSheetContentUndoEntry","UndoRedo","findBoundaries","validateAsSheet","CrudOperations","config","stats","dependencyGraph","columnSearch","parser","cellContentParser","lazilyTransformingAstService","namedExpressions","operations","clipboardOperations","undoRedo","addRows","sheet","_len","arguments","indexes","_key","addRowsCommand","ensureItIsPossibleToAddRows","apply","concat","clearRedoStack","abortCut","saveOperation","removeRows","_len2","_key2","removeRowsCommand","ensureItIsPossibleToRemoveRows","rowsRemovals","addColumns","_len3","_key3","addColumnsCommand","ensureItIsPossibleToAddColumns","removeColumns","_len4","_key4","removeColumnsCommand","ensureItIsPossibleToRemoveColumns","columnsRemovals","moveCells","sourceLeftCorner","width","height","destinationLeftCorner","_this$operations$move","version","overwrittenCellsData","addedGlobalNamedExpressions","moveRows","startRow","numberOfRows","targetRow","ensureItIsPossibleToMoveRows","moveColumns","startColumn","numberOfColumns","targetColumn","ensureItIsPossibleToMoveColumns","cut","ensureItIsPossibleToCopy","isPositiveInteger","copy","paste","targetLeftCorner","clipboard","undefined","isCutClipboard","isCopyClipboard","ensureItIsPossibleToCopyPaste","targetRange","spanFrom","oldContent","getRangeClipboardCells","breakNumericMatricesInRange","restoreClipboardCells","getContent","content","beginUndoRedoBatchMode","beginBatchMode","commitUndoRedoBatchMode","commitBatchMode","isClipboardEmpty","clearClipboard","clear","addSheet","ensureItIsPossibleToAddSheet","addedSheetName","removeSheet","sheetName","ensureSheetExists","sheetId","sheetMapping","fetch","originalName","fetchDisplayName","oldSheetContent","getSheetClipboardCells","_this$operations$remo","scopedNamedExpressions","renameSheet","newName","ensureItIsPossibleToRenameSheet","oldName","clearSheet","setCellContents","topLeftCornerAddress","cellContents","j","Error","ensureItIsPossibleToChangeCellContents","modifiedCellContents","_j","address","row","col","getClipboardCell","setCellContent","newContent","setSheetContent","values","ensureItIsPossibleToChangeSheetContents","setRowOrder","rowMapping","validateSwapRowIndexes","testRowOrderForMatrices","hasSheetWithId","validateRowOrColumnMapping","testColumnOrderForMatrices","columnMapping","_iterator","_step","_step$value","source","rowRange","Infinity","matrixMapping","isFormulaMatrixInRange","setColumnOrder","validateSwapColumnIndexes","_iterator2","_step2","_step2$value","mappingFromOrder","newOrder","rowOrColumn","limit","getSheetHeight","getSheetWidth","ret","sources","map","_ref","_ref2","a","_","sort","b","targets","_ref3","_ref4","isNonnegativeInteger","undo","isUndoStackEmpty","redo","isRedoStackEmpty","addNamedExpression","expressionName","expression","sheetScope","options","scopeId","ensureNamedExpressionNameIsValid","changeNamedExpressionExpression","newExpression","_this$operations$chan","_this$operations$chan2","oldNamedExpression","removeNamedExpression","_this$operations$remo2","_this$operations$remo3","namedExpression","ensureItIsPossibleToAddNamedExpression","ensureNamedExpressionIsValid","ensureItIsPossibleToChangeNamedExpression","namedExpressionForScope","isItPossibleToRemoveNamedExpression","sheetHeight","_len5","_key5","newRowsCount","index","reduce","maxRows","_i2","_indexes","_indexes$_i","numberOfRowsToAdd","isFormulaMatrixInRow","_len6","_key6","_i3","_indexes2","_indexes2$_i","rowStart","rowEnd","rowsToRemove","fromRowStartAndEnd","isFormulaMatrixInRows","sheetWidth","_len7","_key7","newColumnsCount","maxColumns","_i4","_indexes3","_indexes3$_i","column","numberOfColumnsToAdd","isFormulaMatrixInColumn","_len8","_key8","_i5","_indexes4","_indexes4$_i","columnStart","columnEnd","columnsToRemove","fromColumnStartAndEnd","isFormulaMatrixInColumns","sourceStart","targetStart","sourceRange","hasSheetWithName","existingSheetId","get","ensureItIsPossibleToChangeContent","isFormulaMatrixAtAddress","inputAddress","boundaries","ensureRangeInSizeLimits","_iterator3","addresses","_step3","range","exceedsSheetSizeLimits","isThereSomethingToUndo","isThereSomethingToRedo","getAndClearContentChanges","isNameValid","isNameAvailable","parsedExpression","parse","MatrixFormula","Formula","parsingResult","formula","ast","x","Number","isInteger"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { AbsoluteCellRange } from './AbsoluteCellRange';\nimport { invalidSimpleCellAddress, simpleCellAddress } from './Cell';\nimport { CellContent, isMatrix } from './CellContentParser';\nimport { ClipboardOperations } from './ClipboardOperations';\nimport { AddColumnsCommand, AddRowsCommand, Operations, RemoveColumnsCommand, RemoveRowsCommand } from './Operations';\nimport { doesContainRelativeReferences } from './NamedExpressions';\nimport { InvalidAddressError, InvalidArgumentsError, MatrixFormulasNotSupportedError, NamedExpressionDoesNotExistError, NamedExpressionNameIsAlreadyTakenError, NamedExpressionNameIsInvalidError, NoOperationToRedoError, NoOperationToUndoError, NoRelativeAddressesAllowedError, NoSheetWithIdError, NoSheetWithNameError, NothingToPasteError, SheetNameAlreadyTakenError, SheetSizeLimitExceededError, SourceLocationHasMatrixError, TargetLocationHasMatrixError } from './errors';\nimport { ColumnsSpan, RowsSpan } from './Span';\nimport { AddColumnsUndoEntry, AddNamedExpressionUndoEntry, AddRowsUndoEntry, AddSheetUndoEntry, ChangeNamedExpressionUndoEntry, ClearSheetUndoEntry, MoveCellsUndoEntry, MoveColumnsUndoEntry, MoveRowsUndoEntry, PasteUndoEntry, RemoveColumnsUndoEntry, RemoveNamedExpressionUndoEntry, RemoveRowsUndoEntry, RemoveSheetUndoEntry, RenameSheetUndoEntry, SetCellContentsUndoEntry, SetColumnOrderUndoEntry, SetRowOrderUndoEntry, SetSheetContentUndoEntry, UndoRedo } from './UndoRedo';\nimport { findBoundaries, validateAsSheet } from './Sheet';\nexport var CrudOperations = /*#__PURE__*/function () {\n  function CrudOperations(\n  /** Engine config */\n  config,\n  /** Statistics module for benchmarking */\n  stats,\n  /** Dependency graph storing sheets structure */\n  dependencyGraph,\n  /** Column search strategy used by VLOOKUP plugin */\n  columnSearch,\n  /** Parser with caching */\n  parser,\n  /** Raw cell input parser */\n  cellContentParser,\n  /** Service handling postponed CRUD transformations */\n  lazilyTransformingAstService,\n  /** Storage for named expressions */\n  namedExpressions) {\n    _classCallCheck(this, CrudOperations);\n\n    this.config = config;\n    this.stats = stats;\n    this.dependencyGraph = dependencyGraph;\n    this.columnSearch = columnSearch;\n    this.parser = parser;\n    this.cellContentParser = cellContentParser;\n    this.lazilyTransformingAstService = lazilyTransformingAstService;\n    this.namedExpressions = namedExpressions;\n    this.operations = new Operations(this.dependencyGraph, this.columnSearch, this.cellContentParser, this.parser, this.stats, this.lazilyTransformingAstService, this.namedExpressions, this.config);\n    this.clipboardOperations = new ClipboardOperations(this.dependencyGraph, this.operations, this.parser, this.lazilyTransformingAstService, this.config);\n    this.undoRedo = new UndoRedo(this.config, this.operations);\n  }\n\n  _createClass(CrudOperations, [{\n    key: \"addRows\",\n    value: function addRows(sheet) {\n      for (var _len = arguments.length, indexes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        indexes[_key - 1] = arguments[_key];\n      }\n\n      var addRowsCommand = new AddRowsCommand(sheet, indexes);\n      this.ensureItIsPossibleToAddRows.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.operations.addRows(addRowsCommand);\n      this.undoRedo.saveOperation(new AddRowsUndoEntry(addRowsCommand));\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(sheet) {\n      for (var _len2 = arguments.length, indexes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        indexes[_key2 - 1] = arguments[_key2];\n      }\n\n      var removeRowsCommand = new RemoveRowsCommand(sheet, indexes);\n      this.ensureItIsPossibleToRemoveRows.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var rowsRemovals = this.operations.removeRows(removeRowsCommand);\n      this.undoRedo.saveOperation(new RemoveRowsUndoEntry(removeRowsCommand, rowsRemovals));\n    }\n  }, {\n    key: \"addColumns\",\n    value: function addColumns(sheet) {\n      for (var _len3 = arguments.length, indexes = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        indexes[_key3 - 1] = arguments[_key3];\n      }\n\n      var addColumnsCommand = new AddColumnsCommand(sheet, indexes);\n      this.ensureItIsPossibleToAddColumns.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.operations.addColumns(addColumnsCommand);\n      this.undoRedo.saveOperation(new AddColumnsUndoEntry(addColumnsCommand));\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(sheet) {\n      for (var _len4 = arguments.length, indexes = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        indexes[_key4 - 1] = arguments[_key4];\n      }\n\n      var removeColumnsCommand = new RemoveColumnsCommand(sheet, indexes);\n      this.ensureItIsPossibleToRemoveColumns.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var columnsRemovals = this.operations.removeColumns(removeColumnsCommand);\n      this.undoRedo.saveOperation(new RemoveColumnsUndoEntry(removeColumnsCommand, columnsRemovals));\n    }\n  }, {\n    key: \"moveCells\",\n    value: function moveCells(sourceLeftCorner, width, height, destinationLeftCorner) {\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n\n      var _this$operations$move = this.operations.moveCells(sourceLeftCorner, width, height, destinationLeftCorner),\n          version = _this$operations$move.version,\n          overwrittenCellsData = _this$operations$move.overwrittenCellsData,\n          addedGlobalNamedExpressions = _this$operations$move.addedGlobalNamedExpressions;\n\n      this.undoRedo.saveOperation(new MoveCellsUndoEntry(sourceLeftCorner, width, height, destinationLeftCorner, overwrittenCellsData, addedGlobalNamedExpressions, version));\n    }\n  }, {\n    key: \"moveRows\",\n    value: function moveRows(sheet, startRow, numberOfRows, targetRow) {\n      this.ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var version = this.operations.moveRows(sheet, startRow, numberOfRows, targetRow);\n      this.undoRedo.saveOperation(new MoveRowsUndoEntry(sheet, startRow, numberOfRows, targetRow, version));\n    }\n  }, {\n    key: \"moveColumns\",\n    value: function moveColumns(sheet, startColumn, numberOfColumns, targetColumn) {\n      this.ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn);\n      this.undoRedo.clearRedoStack();\n      var version = this.operations.moveColumns(sheet, startColumn, numberOfColumns, targetColumn);\n      this.undoRedo.saveOperation(new MoveColumnsUndoEntry(sheet, startColumn, numberOfColumns, targetColumn, version));\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(sourceLeftCorner, width, height) {\n      this.clipboardOperations.cut(sourceLeftCorner, width, height);\n    }\n  }, {\n    key: \"ensureItIsPossibleToCopy\",\n    value: function ensureItIsPossibleToCopy(sourceLeftCorner, width, height) {\n      if (!isPositiveInteger(width)) {\n        throw new InvalidArgumentsError('width to be positive integer.');\n      }\n\n      if (!isPositiveInteger(height)) {\n        throw new InvalidArgumentsError('height to be positive integer.');\n      }\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(sourceLeftCorner, width, height) {\n      this.ensureItIsPossibleToCopy(sourceLeftCorner, width, height);\n      this.clipboardOperations.copy(sourceLeftCorner, width, height);\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(targetLeftCorner) {\n      var clipboard = this.clipboardOperations.clipboard;\n\n      if (clipboard === undefined) {\n        throw new NothingToPasteError();\n      } else if (this.clipboardOperations.isCutClipboard()) {\n        this.moveCells(clipboard.sourceLeftCorner, clipboard.width, clipboard.height, targetLeftCorner);\n      } else if (this.clipboardOperations.isCopyClipboard()) {\n        this.clipboardOperations.ensureItIsPossibleToCopyPaste(targetLeftCorner);\n        var targetRange = AbsoluteCellRange.spanFrom(targetLeftCorner, clipboard.width, clipboard.height);\n        var oldContent = this.operations.getRangeClipboardCells(targetRange);\n        this.undoRedo.clearRedoStack();\n        this.dependencyGraph.breakNumericMatricesInRange(targetRange);\n        var addedGlobalNamedExpressions = this.operations.restoreClipboardCells(clipboard.sourceLeftCorner.sheet, clipboard.getContent(targetLeftCorner));\n        this.undoRedo.saveOperation(new PasteUndoEntry(targetLeftCorner, oldContent, clipboard.content, addedGlobalNamedExpressions));\n      }\n    }\n  }, {\n    key: \"beginUndoRedoBatchMode\",\n    value: function beginUndoRedoBatchMode() {\n      this.undoRedo.beginBatchMode();\n    }\n  }, {\n    key: \"commitUndoRedoBatchMode\",\n    value: function commitUndoRedoBatchMode() {\n      this.undoRedo.commitBatchMode();\n    }\n  }, {\n    key: \"isClipboardEmpty\",\n    value: function isClipboardEmpty() {\n      return this.clipboardOperations.clipboard === undefined;\n    }\n  }, {\n    key: \"clearClipboard\",\n    value: function clearClipboard() {\n      this.clipboardOperations.clear();\n    }\n  }, {\n    key: \"addSheet\",\n    value: function addSheet(name) {\n      if (name) {\n        this.ensureItIsPossibleToAddSheet(name);\n      }\n\n      this.undoRedo.clearRedoStack();\n      var addedSheetName = this.operations.addSheet(name);\n      this.undoRedo.saveOperation(new AddSheetUndoEntry(addedSheetName));\n      return addedSheetName;\n    }\n  }, {\n    key: \"removeSheet\",\n    value: function removeSheet(sheetName) {\n      this.ensureSheetExists(sheetName);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var sheetId = this.sheetMapping.fetch(sheetName);\n      var originalName = this.sheetMapping.fetchDisplayName(sheetId);\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n\n      var _this$operations$remo = this.operations.removeSheet(sheetName),\n          version = _this$operations$remo.version,\n          scopedNamedExpressions = _this$operations$remo.scopedNamedExpressions;\n\n      this.undoRedo.saveOperation(new RemoveSheetUndoEntry(originalName, sheetId, oldSheetContent, scopedNamedExpressions, version));\n    }\n  }, {\n    key: \"renameSheet\",\n    value: function renameSheet(sheetId, newName) {\n      this.ensureItIsPossibleToRenameSheet(sheetId, newName);\n      var oldName = this.operations.renameSheet(sheetId, newName);\n\n      if (oldName !== undefined) {\n        this.undoRedo.clearRedoStack();\n        this.undoRedo.saveOperation(new RenameSheetUndoEntry(sheetId, oldName, newName));\n      }\n\n      return oldName;\n    }\n  }, {\n    key: \"clearSheet\",\n    value: function clearSheet(sheetName) {\n      this.ensureSheetExists(sheetName);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var sheetId = this.sheetMapping.fetch(sheetName);\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n      this.operations.clearSheet(sheetId);\n      this.undoRedo.saveOperation(new ClearSheetUndoEntry(sheetId, oldSheetContent));\n    }\n  }, {\n    key: \"setCellContents\",\n    value: function setCellContents(topLeftCornerAddress, cellContents) {\n      if (!(cellContents instanceof Array)) {\n        cellContents = [[cellContents]];\n      } else {\n        for (var i = 0; i < cellContents.length; i++) {\n          if (!(cellContents[i] instanceof Array)) {\n            throw new InvalidArgumentsError('an array of arrays or a raw cell value.');\n          }\n\n          for (var j = 0; j < cellContents[i].length; j++) {\n            if (isMatrix(cellContents[i][j])) {\n              throw new Error('Cant change matrices in batch operation');\n            }\n          }\n        }\n      }\n\n      this.ensureItIsPossibleToChangeCellContents(topLeftCornerAddress, cellContents);\n      this.undoRedo.clearRedoStack();\n      var modifiedCellContents = [];\n\n      for (var _i = 0; _i < cellContents.length; _i++) {\n        for (var _j = 0; _j < cellContents[_i].length; _j++) {\n          var address = {\n            sheet: topLeftCornerAddress.sheet,\n            row: topLeftCornerAddress.row + _i,\n            col: topLeftCornerAddress.col + _j\n          };\n          this.clipboardOperations.abortCut();\n          var oldContent = this.operations.getClipboardCell(address);\n          this.operations.setCellContent(address, cellContents[_i][_j]);\n          modifiedCellContents.push({\n            address: address,\n            newContent: cellContents[_i][_j],\n            oldContent: oldContent\n          });\n        }\n      }\n\n      this.undoRedo.saveOperation(new SetCellContentsUndoEntry(modifiedCellContents));\n    }\n  }, {\n    key: \"setSheetContent\",\n    value: function setSheetContent(sheetName, values) {\n      this.ensureSheetExists(sheetName);\n      var sheetId = this.sheetMapping.fetch(sheetName);\n      this.ensureItIsPossibleToChangeSheetContents(sheetId, values);\n      validateAsSheet(values);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n      this.operations.setSheetContent(sheetId, values);\n      this.undoRedo.saveOperation(new SetSheetContentUndoEntry(sheetId, oldSheetContent, values));\n    }\n  }, {\n    key: \"setRowOrder\",\n    value: function setRowOrder(sheetId, rowMapping) {\n      this.validateSwapRowIndexes(sheetId, rowMapping);\n      this.testRowOrderForMatrices(sheetId, rowMapping);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldContent = this.operations.setRowOrder(sheetId, rowMapping);\n      this.undoRedo.saveOperation(new SetRowOrderUndoEntry(sheetId, rowMapping, oldContent));\n    }\n  }, {\n    key: \"validateSwapRowIndexes\",\n    value: function validateSwapRowIndexes(sheetId, rowMapping) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      this.validateRowOrColumnMapping(sheetId, rowMapping, 'row');\n    }\n  }, {\n    key: \"testColumnOrderForMatrices\",\n    value: function testColumnOrderForMatrices(sheetId, columnMapping) {\n      var _iterator = _createForOfIteratorHelper(columnMapping),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              source = _step$value[0],\n              target = _step$value[1];\n\n          if (source !== target) {\n            var rowRange = AbsoluteCellRange.spanFrom({\n              sheet: sheetId,\n              col: source,\n              row: 0\n            }, 1, Infinity);\n\n            if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRange(rowRange)) {\n              throw new SourceLocationHasMatrixError();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"setColumnOrder\",\n    value: function setColumnOrder(sheetId, columnMapping) {\n      this.validateSwapColumnIndexes(sheetId, columnMapping);\n      this.testColumnOrderForMatrices(sheetId, columnMapping);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldContent = this.operations.setColumnOrder(sheetId, columnMapping);\n      this.undoRedo.saveOperation(new SetColumnOrderUndoEntry(sheetId, columnMapping, oldContent));\n    }\n  }, {\n    key: \"validateSwapColumnIndexes\",\n    value: function validateSwapColumnIndexes(sheetId, columnMapping) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      this.validateRowOrColumnMapping(sheetId, columnMapping, 'column');\n    }\n  }, {\n    key: \"testRowOrderForMatrices\",\n    value: function testRowOrderForMatrices(sheetId, rowMapping) {\n      var _iterator2 = _createForOfIteratorHelper(rowMapping),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              source = _step2$value[0],\n              target = _step2$value[1];\n\n          if (source !== target) {\n            var rowRange = AbsoluteCellRange.spanFrom({\n              sheet: sheetId,\n              col: 0,\n              row: source\n            }, Infinity, 1);\n\n            if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRange(rowRange)) {\n              throw new SourceLocationHasMatrixError();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"mappingFromOrder\",\n    value: function mappingFromOrder(sheetId, newOrder, rowOrColumn) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);\n\n      if (newOrder.length !== limit) {\n        throw new InvalidArgumentsError(\"number of \".concat(rowOrColumn, \"s provided to be sheet \").concat(rowOrColumn === 'row' ? 'height' : 'width', \".\"));\n      }\n\n      var ret = [];\n\n      for (var i = 0; i < limit; i++) {\n        if (newOrder[i] !== i) {\n          ret.push([i, newOrder[i]]);\n        }\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"validateRowOrColumnMapping\",\n    value: function validateRowOrColumnMapping(sheetId, rowMapping, rowOrColumn) {\n      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);\n      var sources = rowMapping.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            a = _ref2[0],\n            _ = _ref2[1];\n\n        return a;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n      var targets = rowMapping.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            _ = _ref4[0],\n            b = _ref4[1];\n\n        return b;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n\n      for (var i = 0; i < sources.length; i++) {\n        if (!isNonnegativeInteger(sources[i]) || sources[i] >= limit) {\n          throw new InvalidArgumentsError(\"\".concat(rowOrColumn, \" numbers to be nonnegative integers and less than sheet \").concat(rowOrColumn === 'row' ? 'height' : 'width', \".\"));\n        }\n\n        if (sources[i] === sources[i + 1]) {\n          throw new InvalidArgumentsError(\"source \".concat(rowOrColumn, \" numbers to be unique.\"));\n        }\n\n        if (sources[i] !== targets[i]) {\n          throw new InvalidArgumentsError(\"target \".concat(rowOrColumn, \" numbers to be permutation of source \").concat(rowOrColumn, \" numbers.\"));\n        }\n      }\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      if (this.undoRedo.isUndoStackEmpty()) {\n        throw new NoOperationToUndoError();\n      }\n\n      this.clipboardOperations.abortCut();\n      this.undoRedo.undo();\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      if (this.undoRedo.isRedoStackEmpty()) {\n        throw new NoOperationToRedoError();\n      }\n\n      this.clipboardOperations.abortCut();\n      this.undoRedo.redo();\n    }\n  }, {\n    key: \"addNamedExpression\",\n    value: function addNamedExpression(expressionName, expression, sheetScope, options) {\n      var sheetId = this.scopeId(sheetScope);\n      this.ensureNamedExpressionNameIsValid(expressionName, sheetId);\n      this.operations.addNamedExpression(expressionName, expression, sheetId, options);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new AddNamedExpressionUndoEntry(expressionName, expression, sheetId, options));\n    }\n  }, {\n    key: \"changeNamedExpressionExpression\",\n    value: function changeNamedExpressionExpression(expressionName, sheetScope, newExpression, options) {\n      var sheetId = this.scopeId(sheetScope);\n\n      var _this$operations$chan = this.operations.changeNamedExpressionExpression(expressionName, newExpression, sheetId, options),\n          _this$operations$chan2 = _slicedToArray(_this$operations$chan, 2),\n          oldNamedExpression = _this$operations$chan2[0],\n          content = _this$operations$chan2[1];\n\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new ChangeNamedExpressionUndoEntry(oldNamedExpression, newExpression, content, sheetId, options));\n    }\n  }, {\n    key: \"removeNamedExpression\",\n    value: function removeNamedExpression(expressionName, sheetScope) {\n      var sheetId = this.scopeId(sheetScope);\n\n      var _this$operations$remo2 = this.operations.removeNamedExpression(expressionName, sheetId),\n          _this$operations$remo3 = _slicedToArray(_this$operations$remo2, 2),\n          namedExpression = _this$operations$remo3[0],\n          content = _this$operations$remo3[1];\n\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new RemoveNamedExpressionUndoEntry(namedExpression, content, sheetId));\n      return namedExpression;\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddNamedExpression\",\n    value: function ensureItIsPossibleToAddNamedExpression(expressionName, expression, sheetScope) {\n      var scopeId = this.scopeId(sheetScope);\n      this.ensureNamedExpressionNameIsValid(expressionName, scopeId);\n      this.ensureNamedExpressionIsValid(expression);\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeNamedExpression\",\n    value: function ensureItIsPossibleToChangeNamedExpression(expressionName, expression, sheetScope) {\n      var scopeId = this.scopeId(sheetScope);\n\n      if (this.namedExpressions.namedExpressionForScope(expressionName, scopeId) === undefined) {\n        throw new NamedExpressionDoesNotExistError(expressionName);\n      }\n\n      this.ensureNamedExpressionIsValid(expression);\n    }\n  }, {\n    key: \"isItPossibleToRemoveNamedExpression\",\n    value: function isItPossibleToRemoveNamedExpression(expressionName, sheetScope) {\n      var scopeId = this.scopeId(sheetScope);\n\n      if (this.namedExpressions.namedExpressionForScope(expressionName, scopeId) === undefined) {\n        throw new NamedExpressionDoesNotExistError(expressionName);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddRows\",\n    value: function ensureItIsPossibleToAddRows(sheet) {\n      if (!this.sheetMapping.hasSheetWithId(sheet)) {\n        throw new NoSheetWithIdError(sheet);\n      }\n\n      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);\n\n      for (var _len5 = arguments.length, indexes = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        indexes[_key5 - 1] = arguments[_key5];\n      }\n\n      var newRowsCount = indexes.map(function (index) {\n        return index[1];\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      if (sheetHeight + newRowsCount > this.config.maxRows) {\n        throw new SheetSizeLimitExceededError();\n      }\n\n      for (var _i2 = 0, _indexes = indexes; _i2 < _indexes.length; _i2++) {\n        var _indexes$_i = _slicedToArray(_indexes[_i2], 2),\n            row = _indexes$_i[0],\n            numberOfRowsToAdd = _indexes$_i[1];\n\n        if (!isNonnegativeInteger(row) || !isPositiveInteger(numberOfRowsToAdd)) {\n          throw new InvalidArgumentsError('row number to be nonnegative and number of rows to add to be positive.');\n        }\n\n        if (isPositiveInteger(row) && this.dependencyGraph.matrixMapping.isFormulaMatrixInRow(sheet, row - 1) && this.dependencyGraph.matrixMapping.isFormulaMatrixInRow(sheet, row)) {\n          throw new TargetLocationHasMatrixError();\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRemoveRows\",\n    value: function ensureItIsPossibleToRemoveRows(sheet) {\n      for (var _len6 = arguments.length, indexes = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        indexes[_key6 - 1] = arguments[_key6];\n      }\n\n      for (var _i3 = 0, _indexes2 = indexes; _i3 < _indexes2.length; _i3++) {\n        var _indexes2$_i = _slicedToArray(_indexes2[_i3], 2),\n            rowStart = _indexes2$_i[0],\n            numberOfRows = _indexes2$_i[1];\n\n        var rowEnd = rowStart + numberOfRows - 1;\n\n        if (!isNonnegativeInteger(rowStart) || !isNonnegativeInteger(rowEnd)) {\n          throw new InvalidArgumentsError('starting and ending row to be nonnegative.');\n        }\n\n        if (rowEnd < rowStart) {\n          throw new InvalidArgumentsError('starting row to be smaller than the ending row.');\n        }\n\n        var rowsToRemove = RowsSpan.fromRowStartAndEnd(sheet, rowStart, rowEnd);\n\n        if (!this.sheetMapping.hasSheetWithId(sheet)) {\n          throw new NoSheetWithIdError(sheet);\n        }\n\n        if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRows(rowsToRemove)) {\n          throw new SourceLocationHasMatrixError();\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddColumns\",\n    value: function ensureItIsPossibleToAddColumns(sheet) {\n      if (!this.sheetMapping.hasSheetWithId(sheet)) {\n        throw new NoSheetWithIdError(sheet);\n      }\n\n      var sheetWidth = this.dependencyGraph.getSheetWidth(sheet);\n\n      for (var _len7 = arguments.length, indexes = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        indexes[_key7 - 1] = arguments[_key7];\n      }\n\n      var newColumnsCount = indexes.map(function (index) {\n        return index[1];\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      if (sheetWidth + newColumnsCount > this.config.maxColumns) {\n        throw new SheetSizeLimitExceededError();\n      }\n\n      for (var _i4 = 0, _indexes3 = indexes; _i4 < _indexes3.length; _i4++) {\n        var _indexes3$_i = _slicedToArray(_indexes3[_i4], 2),\n            column = _indexes3$_i[0],\n            numberOfColumnsToAdd = _indexes3$_i[1];\n\n        if (!isNonnegativeInteger(column) || !isPositiveInteger(numberOfColumnsToAdd)) {\n          throw new InvalidArgumentsError('column number to be nonnegative and number of columns to add to be positive.');\n        }\n\n        if (isPositiveInteger(column) && this.dependencyGraph.matrixMapping.isFormulaMatrixInColumn(sheet, column - 1) && this.dependencyGraph.matrixMapping.isFormulaMatrixInColumn(sheet, column)) {\n          throw new TargetLocationHasMatrixError();\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRemoveColumns\",\n    value: function ensureItIsPossibleToRemoveColumns(sheet) {\n      for (var _len8 = arguments.length, indexes = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        indexes[_key8 - 1] = arguments[_key8];\n      }\n\n      for (var _i5 = 0, _indexes4 = indexes; _i5 < _indexes4.length; _i5++) {\n        var _indexes4$_i = _slicedToArray(_indexes4[_i5], 2),\n            columnStart = _indexes4$_i[0],\n            numberOfColumns = _indexes4$_i[1];\n\n        var columnEnd = columnStart + numberOfColumns - 1;\n\n        if (!isNonnegativeInteger(columnStart) || !isNonnegativeInteger(columnEnd)) {\n          throw new InvalidArgumentsError('starting and ending column to be nonnegative.');\n        }\n\n        if (columnEnd < columnStart) {\n          throw new InvalidArgumentsError('starting column to be smaller than the ending column.');\n        }\n\n        var columnsToRemove = ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart, columnEnd);\n\n        if (!this.sheetMapping.hasSheetWithId(sheet)) {\n          throw new NoSheetWithIdError(sheet);\n        }\n\n        if (this.dependencyGraph.matrixMapping.isFormulaMatrixInColumns(columnsToRemove)) {\n          throw new SourceLocationHasMatrixError();\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToMoveRows\",\n    value: function ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow) {\n      this.ensureItIsPossibleToAddRows(sheet, [targetRow, numberOfRows]);\n      var sourceStart = simpleCellAddress(sheet, 0, startRow);\n      var targetStart = simpleCellAddress(sheet, 0, targetRow);\n\n      if (!this.sheetMapping.hasSheetWithId(sheet) || invalidSimpleCellAddress(sourceStart) || invalidSimpleCellAddress(targetStart) || !isPositiveInteger(numberOfRows) || targetRow <= startRow + numberOfRows && targetRow >= startRow) {\n        throw new InvalidArgumentsError('a valid range of rows to move.');\n      }\n\n      var width = this.dependencyGraph.getSheetWidth(sheet);\n      var sourceRange = AbsoluteCellRange.spanFrom(sourceStart, width, numberOfRows);\n\n      if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRange(sourceRange)) {\n        throw new SourceLocationHasMatrixError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToMoveColumns\",\n    value: function ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn) {\n      this.ensureItIsPossibleToAddColumns(sheet, [targetColumn, numberOfColumns]);\n      var sourceStart = simpleCellAddress(sheet, startColumn, 0);\n      var targetStart = simpleCellAddress(sheet, targetColumn, 0);\n\n      if (!this.sheetMapping.hasSheetWithId(sheet) || invalidSimpleCellAddress(sourceStart) || invalidSimpleCellAddress(targetStart) || !isPositiveInteger(numberOfColumns) || targetColumn <= startColumn + numberOfColumns && targetColumn >= startColumn) {\n        throw new InvalidArgumentsError('a valid range of columns to move.');\n      }\n\n      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);\n      var sourceRange = AbsoluteCellRange.spanFrom(sourceStart, numberOfColumns, sheetHeight);\n\n      if (this.dependencyGraph.matrixMapping.isFormulaMatrixInRange(sourceRange)) {\n        throw new SourceLocationHasMatrixError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddSheet\",\n    value: function ensureItIsPossibleToAddSheet(name) {\n      if (this.sheetMapping.hasSheetWithName(name)) {\n        throw new SheetNameAlreadyTakenError(name);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRenameSheet\",\n    value: function ensureItIsPossibleToRenameSheet(sheetId, name) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      var existingSheetId = this.sheetMapping.get(name);\n\n      if (existingSheetId !== undefined && existingSheetId !== sheetId) {\n        throw new SheetNameAlreadyTakenError(name);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeContent\",\n    value: function ensureItIsPossibleToChangeContent(address) {\n      if (invalidSimpleCellAddress(address)) {\n        throw new InvalidAddressError(address);\n      }\n\n      if (!this.sheetMapping.hasSheetWithId(address.sheet)) {\n        throw new NoSheetWithIdError(address.sheet);\n      }\n\n      if (this.dependencyGraph.matrixMapping.isFormulaMatrixAtAddress(address)) {\n        throw new SourceLocationHasMatrixError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeCellContents\",\n    value: function ensureItIsPossibleToChangeCellContents(inputAddress, content) {\n      var boundaries = findBoundaries(content);\n      var targetRange = AbsoluteCellRange.spanFrom(inputAddress, boundaries.width, boundaries.height);\n      this.ensureRangeInSizeLimits(targetRange);\n\n      var _iterator3 = _createForOfIteratorHelper(targetRange.addresses(this.dependencyGraph)),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var address = _step3.value;\n          this.ensureItIsPossibleToChangeContent(address);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeSheetContents\",\n    value: function ensureItIsPossibleToChangeSheetContents(sheetId, content) {\n      var boundaries = findBoundaries(content);\n      var targetRange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheetId, 0, 0), boundaries.width, boundaries.height);\n      this.ensureRangeInSizeLimits(targetRange);\n    }\n  }, {\n    key: \"ensureRangeInSizeLimits\",\n    value: function ensureRangeInSizeLimits(range) {\n      if (range.exceedsSheetSizeLimits(this.config.maxColumns, this.config.maxRows)) {\n        throw new SheetSizeLimitExceededError();\n      }\n    }\n  }, {\n    key: \"isThereSomethingToUndo\",\n    value: function isThereSomethingToUndo() {\n      return !this.undoRedo.isUndoStackEmpty();\n    }\n  }, {\n    key: \"isThereSomethingToRedo\",\n    value: function isThereSomethingToRedo() {\n      return !this.undoRedo.isRedoStackEmpty();\n    }\n  }, {\n    key: \"getAndClearContentChanges\",\n    value: function getAndClearContentChanges() {\n      return this.operations.getAndClearContentChanges();\n    }\n  }, {\n    key: \"ensureSheetExists\",\n    value: function ensureSheetExists(sheetName) {\n      if (!this.sheetMapping.hasSheetWithName(sheetName)) {\n        throw new NoSheetWithNameError(sheetName);\n      }\n    }\n  }, {\n    key: \"scopeId\",\n    value: function scopeId(sheetName) {\n      if (sheetName !== undefined) {\n        this.ensureSheetExists(sheetName);\n        return this.sheetMapping.fetch(sheetName);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"sheetMapping\",\n    get: function get() {\n      return this.dependencyGraph.sheetMapping;\n    }\n  }, {\n    key: \"ensureNamedExpressionNameIsValid\",\n    value: function ensureNamedExpressionNameIsValid(expressionName, sheetId) {\n      if (!this.namedExpressions.isNameValid(expressionName)) {\n        throw new NamedExpressionNameIsInvalidError(expressionName);\n      }\n\n      if (!this.namedExpressions.isNameAvailable(expressionName, sheetId)) {\n        throw new NamedExpressionNameIsAlreadyTakenError(expressionName);\n      }\n    }\n  }, {\n    key: \"ensureNamedExpressionIsValid\",\n    value: function ensureNamedExpressionIsValid(expression) {\n      var parsedExpression = this.cellContentParser.parse(expression);\n\n      if (parsedExpression instanceof CellContent.MatrixFormula) {\n        throw new MatrixFormulasNotSupportedError();\n      } else if (parsedExpression instanceof CellContent.Formula) {\n        var parsingResult = this.parser.parse(parsedExpression.formula, simpleCellAddress(-1, 0, 0));\n\n        if (doesContainRelativeReferences(parsingResult.ast)) {\n          throw new NoRelativeAddressesAllowedError();\n        }\n      }\n    }\n  }]);\n\n  return CrudOperations;\n}();\n\nfunction isPositiveInteger(x) {\n  return Number.isInteger(x) && x > 0;\n}\n\nfunction isNonnegativeInteger(x) {\n  return Number.isInteger(x) && x >= 0;\n}"]},"metadata":{},"sourceType":"module"}