{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { createToken, Lexer } from 'chevrotain';\n/* arithmetic */\n// abstract for + -\n\nexport var AdditionOp = createToken({\n  name: 'AdditionOp',\n  pattern: Lexer.NA\n});\nexport var PlusOp = createToken({\n  name: 'PlusOp',\n  pattern: /\\+/,\n  categories: AdditionOp\n});\nexport var MinusOp = createToken({\n  name: 'MinusOp',\n  pattern: /-/,\n  categories: AdditionOp\n}); // abstract for * /\n\nexport var MultiplicationOp = createToken({\n  name: 'MultiplicationOp',\n  pattern: Lexer.NA\n});\nexport var TimesOp = createToken({\n  name: 'TimesOp',\n  pattern: /\\*/,\n  categories: MultiplicationOp\n});\nexport var DivOp = createToken({\n  name: 'DivOp',\n  pattern: /\\//,\n  categories: MultiplicationOp\n});\nexport var PowerOp = createToken({\n  name: 'PowerOp',\n  pattern: /\\^/\n});\nexport var PercentOp = createToken({\n  name: 'PercentOp',\n  pattern: /%/\n});\nexport var BooleanOp = createToken({\n  name: 'BooleanOp',\n  pattern: Lexer.NA\n});\nexport var EqualsOp = createToken({\n  name: 'EqualsOp',\n  pattern: /=/,\n  categories: BooleanOp\n});\nexport var NotEqualOp = createToken({\n  name: 'NotEqualOp',\n  pattern: /<>/,\n  categories: BooleanOp\n});\nexport var GreaterThanOp = createToken({\n  name: 'GreaterThanOp',\n  pattern: />/,\n  categories: BooleanOp\n});\nexport var LessThanOp = createToken({\n  name: 'LessThanOp',\n  pattern: /</,\n  categories: BooleanOp\n});\nexport var GreaterThanOrEqualOp = createToken({\n  name: 'GreaterThanOrEqualOp',\n  pattern: />=/,\n  categories: BooleanOp\n});\nexport var LessThanOrEqualOp = createToken({\n  name: 'LessThanOrEqualOp',\n  pattern: /<=/,\n  categories: BooleanOp\n});\nexport var ConcatenateOp = createToken({\n  name: 'ConcatenateOp',\n  pattern: /&/\n});\n/* addresses */\n\nexport var simpleSheetName = \"[A-Za-z0-9_\\xC0-\\u02AF]+\";\nexport var quotedSheetName = \"'(((?!').|'')*)'\";\nexport var sheetNameRegexp = \"(\".concat(simpleSheetName, \"|\").concat(quotedSheetName, \")!\");\nexport var CellReference = createToken({\n  name: 'CellReference',\n  pattern: new RegExp(\"(\".concat(sheetNameRegexp, \")?\\\\$?[A-Za-z]+\\\\$?[0-9]+\"))\n});\nexport var ColumnRange = createToken({\n  name: 'ColumnRange',\n  pattern: new RegExp(\"(\".concat(sheetNameRegexp, \")?\\\\$?[A-Za-z]+:(\").concat(sheetNameRegexp, \")?\\\\$?[A-Za-z]+\"))\n});\nexport var RowRange = createToken({\n  name: 'RowRange',\n  pattern: new RegExp(\"(\".concat(sheetNameRegexp, \")?\\\\$?[0-9]+:(\").concat(sheetNameRegexp, \")?\\\\$?[0-9]+\"))\n});\nexport var RangeSeparator = createToken({\n  name: 'RangeSeparator',\n  pattern: /:/\n});\n/* parenthesis */\n\nexport var LParen = createToken({\n  name: 'LParen',\n  pattern: /\\(/\n});\nexport var RParen = createToken({\n  name: 'RParen',\n  pattern: /\\)/\n});\n/* prcoedures */\n\nexport var ProcedureName = createToken({\n  name: 'ProcedureName',\n  pattern: /([A-Za-z\\u00C0-\\u02AF][A-Za-z0-9\\u00C0-\\u02AF._]*)\\(/\n});\n/* named expressions */\n\nexport var NamedExpression = createToken({\n  name: 'NamedExpression',\n  pattern: /[A-Za-z\\u00C0-\\u02AF_][A-Za-z0-9\\u00C0-\\u02AF._]*/\n});\n/* string literal */\n\nexport var StringLiteral = createToken({\n  name: 'StringLiteral',\n  pattern: /\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"/\n});\n/* error literal */\n\nexport var ErrorLiteral = createToken({\n  name: 'ErrorLiteral',\n  pattern: /#[A-Za-z0-9\\/]+[?!]?/\n});\n/* skipping whitespaces */\n\nexport var WhiteSpace = createToken({\n  name: 'WhiteSpace',\n  pattern: /[ \\t\\n\\r]+/\n});\nexport var buildLexerConfig = function buildLexerConfig(config) {\n  var offsetProcedureNameLiteral = config.translationPackage.getFunctionTranslation('OFFSET');\n  var errorMapping = config.errorMapping;\n  var functionMapping = config.translationPackage.buildFunctionMapping();\n  /* configurable tokens */\n\n  var ArgSeparator = createToken({\n    name: 'ArgSeparator',\n    pattern: config.functionArgSeparator\n  });\n  var NumberLiteral = createToken({\n    name: 'NumberLiteral',\n    pattern: new RegExp(\"(([\".concat(config.decimalSeparator, \"]\\\\d+)|(\\\\d+([\").concat(config.decimalSeparator, \"]\\\\d*)?))(e[+-]?\\\\d+)?\"))\n  });\n  var OffsetProcedureName = createToken({\n    name: 'OffsetProcedureName',\n    pattern: new RegExp(offsetProcedureNameLiteral, 'i')\n  });\n  /* order is important, first pattern is used */\n\n  var allTokens = [WhiteSpace, PlusOp, MinusOp, TimesOp, DivOp, PowerOp, EqualsOp, NotEqualOp, PercentOp, GreaterThanOrEqualOp, LessThanOrEqualOp, GreaterThanOp, LessThanOp, LParen, RParen, OffsetProcedureName, ProcedureName, RangeSeparator, ArgSeparator, ColumnRange, RowRange, NumberLiteral, StringLiteral, ErrorLiteral, ConcatenateOp, BooleanOp, AdditionOp, MultiplicationOp, CellReference, NamedExpression];\n  return {\n    ArgSeparator: ArgSeparator,\n    NumberLiteral: NumberLiteral,\n    OffsetProcedureName: OffsetProcedureName,\n    allTokens: allTokens,\n    errorMapping: errorMapping,\n    functionMapping: functionMapping,\n    decimalSeparator: config.decimalSeparator,\n    maxColumns: config.maxColumns,\n    maxRows: config.maxRows\n  };\n};","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/parser/LexerConfig.js"],"names":["createToken","Lexer","AdditionOp","name","pattern","NA","PlusOp","categories","MinusOp","MultiplicationOp","TimesOp","DivOp","PowerOp","PercentOp","BooleanOp","EqualsOp","NotEqualOp","GreaterThanOp","LessThanOp","GreaterThanOrEqualOp","LessThanOrEqualOp","ConcatenateOp","simpleSheetName","quotedSheetName","sheetNameRegexp","concat","CellReference","RegExp","ColumnRange","RowRange","RangeSeparator","LParen","RParen","ProcedureName","NamedExpression","StringLiteral","ErrorLiteral","WhiteSpace","buildLexerConfig","config","offsetProcedureNameLiteral","translationPackage","getFunctionTranslation","errorMapping","functionMapping","buildFunctionMapping","ArgSeparator","functionArgSeparator","NumberLiteral","decimalSeparator","OffsetProcedureName","allTokens","maxColumns","maxRows"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { createToken, Lexer } from 'chevrotain';\n/* arithmetic */\n// abstract for + -\n\nexport var AdditionOp = createToken({\n  name: 'AdditionOp',\n  pattern: Lexer.NA\n});\nexport var PlusOp = createToken({\n  name: 'PlusOp',\n  pattern: /\\+/,\n  categories: AdditionOp\n});\nexport var MinusOp = createToken({\n  name: 'MinusOp',\n  pattern: /-/,\n  categories: AdditionOp\n}); // abstract for * /\n\nexport var MultiplicationOp = createToken({\n  name: 'MultiplicationOp',\n  pattern: Lexer.NA\n});\nexport var TimesOp = createToken({\n  name: 'TimesOp',\n  pattern: /\\*/,\n  categories: MultiplicationOp\n});\nexport var DivOp = createToken({\n  name: 'DivOp',\n  pattern: /\\//,\n  categories: MultiplicationOp\n});\nexport var PowerOp = createToken({\n  name: 'PowerOp',\n  pattern: /\\^/\n});\nexport var PercentOp = createToken({\n  name: 'PercentOp',\n  pattern: /%/\n});\nexport var BooleanOp = createToken({\n  name: 'BooleanOp',\n  pattern: Lexer.NA\n});\nexport var EqualsOp = createToken({\n  name: 'EqualsOp',\n  pattern: /=/,\n  categories: BooleanOp\n});\nexport var NotEqualOp = createToken({\n  name: 'NotEqualOp',\n  pattern: /<>/,\n  categories: BooleanOp\n});\nexport var GreaterThanOp = createToken({\n  name: 'GreaterThanOp',\n  pattern: />/,\n  categories: BooleanOp\n});\nexport var LessThanOp = createToken({\n  name: 'LessThanOp',\n  pattern: /</,\n  categories: BooleanOp\n});\nexport var GreaterThanOrEqualOp = createToken({\n  name: 'GreaterThanOrEqualOp',\n  pattern: />=/,\n  categories: BooleanOp\n});\nexport var LessThanOrEqualOp = createToken({\n  name: 'LessThanOrEqualOp',\n  pattern: /<=/,\n  categories: BooleanOp\n});\nexport var ConcatenateOp = createToken({\n  name: 'ConcatenateOp',\n  pattern: /&/\n});\n/* addresses */\n\nexport var simpleSheetName = \"[A-Za-z0-9_\\xC0-\\u02AF]+\";\nexport var quotedSheetName = \"'(((?!').|'')*)'\";\nexport var sheetNameRegexp = \"(\".concat(simpleSheetName, \"|\").concat(quotedSheetName, \")!\");\nexport var CellReference = createToken({\n  name: 'CellReference',\n  pattern: new RegExp(\"(\".concat(sheetNameRegexp, \")?\\\\$?[A-Za-z]+\\\\$?[0-9]+\"))\n});\nexport var ColumnRange = createToken({\n  name: 'ColumnRange',\n  pattern: new RegExp(\"(\".concat(sheetNameRegexp, \")?\\\\$?[A-Za-z]+:(\").concat(sheetNameRegexp, \")?\\\\$?[A-Za-z]+\"))\n});\nexport var RowRange = createToken({\n  name: 'RowRange',\n  pattern: new RegExp(\"(\".concat(sheetNameRegexp, \")?\\\\$?[0-9]+:(\").concat(sheetNameRegexp, \")?\\\\$?[0-9]+\"))\n});\nexport var RangeSeparator = createToken({\n  name: 'RangeSeparator',\n  pattern: /:/\n});\n/* parenthesis */\n\nexport var LParen = createToken({\n  name: 'LParen',\n  pattern: /\\(/\n});\nexport var RParen = createToken({\n  name: 'RParen',\n  pattern: /\\)/\n});\n/* prcoedures */\n\nexport var ProcedureName = createToken({\n  name: 'ProcedureName',\n  pattern: /([A-Za-z\\u00C0-\\u02AF][A-Za-z0-9\\u00C0-\\u02AF._]*)\\(/\n});\n/* named expressions */\n\nexport var NamedExpression = createToken({\n  name: 'NamedExpression',\n  pattern: /[A-Za-z\\u00C0-\\u02AF_][A-Za-z0-9\\u00C0-\\u02AF._]*/\n});\n/* string literal */\n\nexport var StringLiteral = createToken({\n  name: 'StringLiteral',\n  pattern: /\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"/\n});\n/* error literal */\n\nexport var ErrorLiteral = createToken({\n  name: 'ErrorLiteral',\n  pattern: /#[A-Za-z0-9\\/]+[?!]?/\n});\n/* skipping whitespaces */\n\nexport var WhiteSpace = createToken({\n  name: 'WhiteSpace',\n  pattern: /[ \\t\\n\\r]+/\n});\nexport var buildLexerConfig = function buildLexerConfig(config) {\n  var offsetProcedureNameLiteral = config.translationPackage.getFunctionTranslation('OFFSET');\n  var errorMapping = config.errorMapping;\n  var functionMapping = config.translationPackage.buildFunctionMapping();\n  /* configurable tokens */\n\n  var ArgSeparator = createToken({\n    name: 'ArgSeparator',\n    pattern: config.functionArgSeparator\n  });\n  var NumberLiteral = createToken({\n    name: 'NumberLiteral',\n    pattern: new RegExp(\"(([\".concat(config.decimalSeparator, \"]\\\\d+)|(\\\\d+([\").concat(config.decimalSeparator, \"]\\\\d*)?))(e[+-]?\\\\d+)?\"))\n  });\n  var OffsetProcedureName = createToken({\n    name: 'OffsetProcedureName',\n    pattern: new RegExp(offsetProcedureNameLiteral, 'i')\n  });\n  /* order is important, first pattern is used */\n\n  var allTokens = [WhiteSpace, PlusOp, MinusOp, TimesOp, DivOp, PowerOp, EqualsOp, NotEqualOp, PercentOp, GreaterThanOrEqualOp, LessThanOrEqualOp, GreaterThanOp, LessThanOp, LParen, RParen, OffsetProcedureName, ProcedureName, RangeSeparator, ArgSeparator, ColumnRange, RowRange, NumberLiteral, StringLiteral, ErrorLiteral, ConcatenateOp, BooleanOp, AdditionOp, MultiplicationOp, CellReference, NamedExpression];\n  return {\n    ArgSeparator: ArgSeparator,\n    NumberLiteral: NumberLiteral,\n    OffsetProcedureName: OffsetProcedureName,\n    allTokens: allTokens,\n    errorMapping: errorMapping,\n    functionMapping: functionMapping,\n    decimalSeparator: config.decimalSeparator,\n    maxColumns: config.maxColumns,\n    maxRows: config.maxRows\n  };\n};"]},"metadata":{},"sourceType":"module"}