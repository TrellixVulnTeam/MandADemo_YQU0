{"ast":null,"code":"// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nexport var BITS_FOR_METHOD_TYPE = 4;\nexport var BITS_FOR_OCCURRENCE_IDX = 8;\nexport var BITS_FOR_RULE_IDX = 12; // TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\n\nexport var BITS_FOR_ALT_IDX = 8; // short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\n\n/* tslint:disable */\n\nexport var OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport var OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport var MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport var AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport var MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport var AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n/* tslint:enable */\n// this actually returns a number, but it is always used as a string (object prop key)\n\nexport function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n  /* tslint:disable */\n  return occurrence | dslMethodIdx | ruleIdx;\n  /* tslint:enable */\n}\nvar BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\nexport function getKeyForAltIndex(ruleIdx, dslMethodIdx, occurrence, altIdx) {\n  /* tslint:disable */\n  // alternative indices are zero based, thus must always add one (turn on one bit) to guarantee uniqueness.\n  var altIdxBitMap = altIdx + 1 << BITS_START_FOR_ALT_IDX;\n  return getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) | altIdxBitMap;\n  /* tslint:enable */\n}","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/chevrotain/lib_esm/src/parse/grammar/keys.js"],"names":["BITS_FOR_METHOD_TYPE","BITS_FOR_OCCURRENCE_IDX","BITS_FOR_RULE_IDX","BITS_FOR_ALT_IDX","OR_IDX","OPTION_IDX","MANY_IDX","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","getKeyForAutomaticLookahead","ruleIdx","dslMethodIdx","occurrence","BITS_START_FOR_ALT_IDX","getKeyForAltIndex","altIdx","altIdxBitMap"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,oBAAoB,GAAG,CAA3B;AACP,OAAO,IAAIC,uBAAuB,GAAG,CAA9B;AACP,OAAO,IAAIC,iBAAiB,GAAG,EAAxB,C,CACP;;AACA,OAAO,IAAIC,gBAAgB,GAAG,CAAvB,C,CACP;AACA;AACA;;AACA;;AACA,OAAO,IAAIC,MAAM,GAAG,KAAKH,uBAAlB;AACP,OAAO,IAAII,UAAU,GAAG,KAAKJ,uBAAtB;AACP,OAAO,IAAIK,QAAQ,GAAG,KAAKL,uBAApB;AACP,OAAO,IAAIM,gBAAgB,GAAG,KAAKN,uBAA5B;AACP,OAAO,IAAIO,YAAY,GAAG,KAAKP,uBAAxB;AACP,OAAO,IAAIQ,oBAAoB,GAAG,KAAKR,uBAAhC;AACP;AACA;;AACA,OAAO,SAASS,2BAAT,CAAqCC,OAArC,EAA8CC,YAA9C,EAA4DC,UAA5D,EAAwE;AAC3E;AACA,SAAOA,UAAU,GAAGD,YAAb,GAA4BD,OAAnC;AACA;AACH;AACD,IAAIG,sBAAsB,GAAG,KAAKX,gBAAlC;AACA,OAAO,SAASY,iBAAT,CAA2BJ,OAA3B,EAAoCC,YAApC,EAAkDC,UAAlD,EAA8DG,MAA9D,EAAsE;AACzE;AACA;AACA,MAAIC,YAAY,GAAID,MAAM,GAAG,CAAV,IAAgBF,sBAAnC;AACA,SAAQJ,2BAA2B,CAACC,OAAD,EAAUC,YAAV,EAAwBC,UAAxB,CAA3B,GACJI,YADJ;AAEA;AACH","sourcesContent":["// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nexport var BITS_FOR_METHOD_TYPE = 4;\nexport var BITS_FOR_OCCURRENCE_IDX = 8;\nexport var BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport var BITS_FOR_ALT_IDX = 8;\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\n/* tslint:disable */\nexport var OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport var OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport var MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport var AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport var MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport var AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n/* tslint:enable */\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    /* tslint:disable */\n    return occurrence | dslMethodIdx | ruleIdx;\n    /* tslint:enable */\n}\nvar BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\nexport function getKeyForAltIndex(ruleIdx, dslMethodIdx, occurrence, altIdx) {\n    /* tslint:disable */\n    // alternative indices are zero based, thus must always add one (turn on one bit) to guarantee uniqueness.\n    var altIdxBitMap = (altIdx + 1) << BITS_START_FOR_ALT_IDX;\n    return (getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) |\n        altIdxBitMap);\n    /* tslint:enable */\n}\n//# sourceMappingURL=keys.js.map"]},"metadata":{},"sourceType":"module"}