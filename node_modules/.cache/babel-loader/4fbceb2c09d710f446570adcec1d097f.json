{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nvar NodeVisitStatus;\n\n(function (NodeVisitStatus) {\n  NodeVisitStatus[NodeVisitStatus[\"ON_STACK\"] = 0] = \"ON_STACK\";\n  NodeVisitStatus[NodeVisitStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  NodeVisitStatus[NodeVisitStatus[\"POPPED\"] = 2] = \"POPPED\";\n})(NodeVisitStatus || (NodeVisitStatus = {}));\n/**\n * Provides graph directed structure\n *\n * Invariants:\n * - this.edges(node) exists if and only if node is in the graph\n * - this.specialNodes* are always subset of this.nodes\n * - this.edges(node) is subset of this.nodes (i.e. it does not contain nodes not present in graph) -- this invariant DOES NOT HOLD right now\n */\n\n\nexport var Graph = /*#__PURE__*/function () {\n  function Graph(dependencyQuery) {\n    _classCallCheck(this, Graph);\n\n    this.dependencyQuery = dependencyQuery;\n    /** Set with nodes in graph. */\n\n    this.nodes = new Set();\n    this.specialNodes = new Set();\n    this.specialNodesStructuralChanges = new Set();\n    this.specialNodesRecentlyChanged = new Set();\n    this.infiniteRanges = new Set();\n    /** Nodes adjacency mapping. */\n\n    this.edges = new Map();\n  }\n  /**\n   * Adds node to a graph\n   *\n   * @param node - a node to be added\n   */\n\n\n  _createClass(Graph, [{\n    key: \"addNode\",\n    value: function addNode(node) {\n      this.nodes.add(node);\n\n      if (!this.edges.has(node)) {\n        this.edges.set(node, new Set());\n      }\n    }\n    /**\n     * Adds edge between nodes.\n     *\n     * The nodes had to be added to the graph before, or the error will be raised\n     *\n     * @param fromNode - node from which edge is outcoming\n     * @param toNode - node to which edge is incoming\n     */\n\n  }, {\n    key: \"addEdge\",\n    value: function addEdge(fromNode, toNode) {\n      if (!this.nodes.has(fromNode)) {\n        throw new Error(\"Unknown node \".concat(fromNode));\n      }\n\n      if (!this.nodes.has(toNode)) {\n        throw new Error(\"Unknown node \".concat(toNode));\n      } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n      this.edges.get(fromNode).add(toNode);\n    }\n  }, {\n    key: \"removeEdge\",\n    value: function removeEdge(fromNode, toNode) {\n      if (this.existsEdge(fromNode, toNode)) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.edges.get(fromNode).delete(toNode);\n      } else {\n        throw new Error('Edge does not exist');\n      }\n    }\n  }, {\n    key: \"softRemoveEdge\",\n    value: function softRemoveEdge(fromNode, toNode) {\n      var _a;\n\n      (_a = this.edges.get(fromNode)) === null || _a === void 0 ? void 0 : _a.delete(toNode);\n    }\n  }, {\n    key: \"removeIncomingEdges\",\n    value: function removeIncomingEdges(toNode) {\n      this.edges.forEach(function (nodeEdges) {\n        nodeEdges.delete(toNode);\n      });\n    }\n    /**\n     * Returns nodes adjacent to given node\n     *\n     * @param node - node to which adjacent nodes we want to retrieve\n     */\n\n  }, {\n    key: \"adjacentNodes\",\n    value: function adjacentNodes(node) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.edges.get(node);\n    }\n  }, {\n    key: \"adjacentNodesCount\",\n    value: function adjacentNodesCount(node) {\n      return this.adjacentNodes(node).size;\n    }\n    /**\n     * Checks whether a node is present in graph\n     *\n     * @param node - node to check\n     */\n\n  }, {\n    key: \"hasNode\",\n    value: function hasNode(node) {\n      return this.nodes.has(node);\n    }\n    /**\n     * Returns number of nodes in graph\n     */\n\n  }, {\n    key: \"nodesCount\",\n    value: function nodesCount() {\n      return this.nodes.size;\n    }\n    /**\n     * Returns number of edges in graph\n     */\n\n  }, {\n    key: \"edgesCount\",\n    value: function edgesCount() {\n      var result = 0;\n      this.edges.forEach(function (edgesForNode) {\n        return result += edgesForNode.size;\n      });\n      return result;\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(node) {\n      var _iterator = _createForOfIteratorHelper(this.adjacentNodes(node).values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var adjacentNode = _step.value;\n          this.markNodeAsSpecialRecentlyChanged(adjacentNode);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.edges.delete(node);\n      this.nodes.delete(node);\n      this.specialNodes.delete(node);\n      this.specialNodesRecentlyChanged.delete(node);\n      this.specialNodesStructuralChanges.delete(node);\n      this.infiniteRanges.delete(node);\n      return this.removeDependencies(node);\n    }\n  }, {\n    key: \"markNodeAsSpecial\",\n    value: function markNodeAsSpecial(node) {\n      this.specialNodes.add(node);\n    }\n  }, {\n    key: \"markNodeAsSpecialRecentlyChanged\",\n    value: function markNodeAsSpecialRecentlyChanged(node) {\n      if (this.nodes.has(node)) {\n        this.specialNodesRecentlyChanged.add(node);\n      }\n    }\n  }, {\n    key: \"markNodeAsChangingWithStructure\",\n    value: function markNodeAsChangingWithStructure(node) {\n      this.specialNodesStructuralChanges.add(node);\n    }\n  }, {\n    key: \"clearSpecialNodesRecentlyChanged\",\n    value: function clearSpecialNodesRecentlyChanged() {\n      this.specialNodesRecentlyChanged.clear();\n    }\n  }, {\n    key: \"markNodeAsInfiniteRange\",\n    value: function markNodeAsInfiniteRange(node) {\n      this.infiniteRanges.add(node);\n    }\n    /**\n     * Checks whether exists edge between nodes\n     *\n     * @param fromNode - node from which edge is outcoming\n     * @param toNode - node to which edge is incoming\n     */\n\n  }, {\n    key: \"existsEdge\",\n    value: function existsEdge(fromNode, toNode) {\n      var _a, _b;\n\n      return (_b = (_a = this.edges.get(fromNode)) === null || _a === void 0 ? void 0 : _a.has(toNode)) !== null && _b !== void 0 ? _b : false;\n    }\n    /*\n     * return a topological sort order, but separates vertices that exist in some cycle\n     */\n\n  }, {\n    key: \"topSortWithScc\",\n    value: function topSortWithScc() {\n      return this.getTopSortedWithSccSubgraphFrom(Array.from(this.nodes), function () {\n        return true;\n      }, function () {});\n    }\n    /**\n     *\n     * an iterative implementation of Tarjan's algorithm for finding strongly connected compontents\n     * returns vertices in order of topological sort, but vertices that are on cycles are kept separate\n     *\n     * @param modifiedNodes - seed for computation. During engine init run, all of the vertices of grap. In recomputation run, changed vertices.\n     * @param operatingFunction - recomputes value of a node, and returns whether a change occured\n     * @param onCycle - action to be performed when node is on cycle\n     */\n\n  }, {\n    key: \"getTopSortedWithSccSubgraphFrom\",\n    value: function getTopSortedWithSccSubgraphFrom(modifiedNodes, operatingFunction, onCycle) {\n      var _this = this;\n\n      var entranceTime = new Map();\n      var low = new Map();\n      var parent = new Map();\n      var inSCC = new Set(); // node status life cycle:\n      // undefined -> ON_STACK -> PROCESSED -> POPPED\n\n      var nodeStatus = new Map();\n      var order = [];\n      var time = 0;\n      var sccNonSingletons = new Set();\n      modifiedNodes.reverse();\n      modifiedNodes.forEach(function (v) {\n        if (nodeStatus.get(v) !== undefined) {\n          return;\n        }\n\n        var DFSstack = [v];\n        var SCCstack = [];\n        nodeStatus.set(v, NodeVisitStatus.ON_STACK);\n\n        var _loop = function _loop() {\n          var u = DFSstack[DFSstack.length - 1]; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n          switch (nodeStatus.get(u)) {\n            case NodeVisitStatus.ON_STACK:\n              {\n                entranceTime.set(u, time);\n                low.set(u, time);\n                SCCstack.push(u);\n                time++;\n\n                _this.adjacentNodes(u).forEach(function (t) {\n                  if (entranceTime.get(t) === undefined) {\n                    DFSstack.push(t);\n                    parent.set(t, u);\n                    nodeStatus.set(t, NodeVisitStatus.ON_STACK);\n                  }\n                });\n\n                nodeStatus.set(u, NodeVisitStatus.PROCESSED);\n                break;\n              }\n\n            case NodeVisitStatus.PROCESSED:\n              {\n                // leaving this DFS subtree\n                var uLow; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n                uLow = entranceTime.get(u);\n\n                _this.adjacentNodes(u).forEach(function (t) {\n                  if (!inSCC.has(t)) {\n                    if (parent.get(t) === u) {\n                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                      uLow = Math.min(uLow, low.get(t));\n                    } else {\n                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                      uLow = Math.min(uLow, entranceTime.get(t));\n                    }\n                  }\n                });\n\n                low.set(u, uLow);\n\n                if (uLow === entranceTime.get(u)) {\n                  var currentSCC = [];\n\n                  do {\n                    currentSCC.push(SCCstack[SCCstack.length - 1]);\n                    SCCstack.pop();\n                  } while (currentSCC[currentSCC.length - 1] !== u);\n\n                  currentSCC.forEach(function (t) {\n                    inSCC.add(t);\n                  });\n                  order.push.apply(order, currentSCC);\n\n                  if (currentSCC.length > 1) {\n                    currentSCC.forEach(function (t) {\n                      sccNonSingletons.add(t);\n                    });\n                  }\n                }\n\n                DFSstack.pop();\n                nodeStatus.set(u, NodeVisitStatus.POPPED);\n                break;\n              }\n\n            case NodeVisitStatus.POPPED:\n              {\n                // it's a 'shadow' copy, we already processed this vertex and can ignore it\n                DFSstack.pop();\n                break;\n              }\n          }\n        };\n\n        while (DFSstack.length > 0) {\n          _loop();\n        }\n      });\n      var shouldBeUpdatedMapping = new Set(modifiedNodes);\n      var sorted = [];\n      var cycled = [];\n      order.reverse();\n      order.forEach(function (t) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        if (sccNonSingletons.has(t) || _this.adjacentNodes(t).has(t)) {\n          cycled.push(t);\n          onCycle(t);\n\n          _this.adjacentNodes(t).forEach(function (s) {\n            return shouldBeUpdatedMapping.add(s);\n          });\n        } else {\n          sorted.push(t);\n\n          if (shouldBeUpdatedMapping.has(t) && operatingFunction(t)) {\n            _this.adjacentNodes(t).forEach(function (s) {\n              return shouldBeUpdatedMapping.add(s);\n            });\n          }\n        }\n      });\n      return {\n        sorted: sorted,\n        cycled: cycled\n      };\n    }\n  }, {\n    key: \"getDependencies\",\n    value: function getDependencies(vertex) {\n      var result = [];\n      this.edges.forEach(function (adjacentNodes, sourceNode) {\n        if (adjacentNodes.has(vertex)) {\n          result.push(sourceNode);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"removeDependencies\",\n    value: function removeDependencies(node) {\n      var dependencies = this.dependencyQuery(node);\n\n      var _iterator2 = _createForOfIteratorHelper(dependencies),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var dependency = _step2.value;\n          this.softRemoveEdge(dependency, node);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return dependencies;\n    }\n  }]);\n\n  return Graph;\n}();","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/DependencyGraph/Graph.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","NodeVisitStatus","Graph","dependencyQuery","nodes","Set","specialNodes","specialNodesStructuralChanges","specialNodesRecentlyChanged","infiniteRanges","edges","Map","addNode","node","add","has","set","addEdge","fromNode","toNode","Error","concat","get","removeEdge","existsEdge","delete","softRemoveEdge","_a","removeIncomingEdges","forEach","nodeEdges","adjacentNodes","adjacentNodesCount","size","hasNode","nodesCount","edgesCount","result","edgesForNode","removeNode","_iterator","values","_step","adjacentNode","markNodeAsSpecialRecentlyChanged","removeDependencies","markNodeAsSpecial","markNodeAsChangingWithStructure","clearSpecialNodesRecentlyChanged","clear","markNodeAsInfiniteRange","_b","topSortWithScc","getTopSortedWithSccSubgraphFrom","modifiedNodes","operatingFunction","onCycle","_this","entranceTime","low","parent","inSCC","nodeStatus","order","time","sccNonSingletons","reverse","v","undefined","DFSstack","SCCstack","ON_STACK","_loop","u","push","t","PROCESSED","uLow","Math","min","currentSCC","pop","apply","POPPED","shouldBeUpdatedMapping","sorted","cycled","getDependencies","vertex","sourceNode","dependencies","_iterator2","_step2","dependency"],"mappings":"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","sourcesContent":["function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nvar NodeVisitStatus;\n\n(function (NodeVisitStatus) {\n  NodeVisitStatus[NodeVisitStatus[\"ON_STACK\"] = 0] = \"ON_STACK\";\n  NodeVisitStatus[NodeVisitStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  NodeVisitStatus[NodeVisitStatus[\"POPPED\"] = 2] = \"POPPED\";\n})(NodeVisitStatus || (NodeVisitStatus = {}));\n/**\n * Provides graph directed structure\n *\n * Invariants:\n * - this.edges(node) exists if and only if node is in the graph\n * - this.specialNodes* are always subset of this.nodes\n * - this.edges(node) is subset of this.nodes (i.e. it does not contain nodes not present in graph) -- this invariant DOES NOT HOLD right now\n */\n\n\nexport var Graph = /*#__PURE__*/function () {\n  function Graph(dependencyQuery) {\n    _classCallCheck(this, Graph);\n\n    this.dependencyQuery = dependencyQuery;\n    /** Set with nodes in graph. */\n\n    this.nodes = new Set();\n    this.specialNodes = new Set();\n    this.specialNodesStructuralChanges = new Set();\n    this.specialNodesRecentlyChanged = new Set();\n    this.infiniteRanges = new Set();\n    /** Nodes adjacency mapping. */\n\n    this.edges = new Map();\n  }\n  /**\n   * Adds node to a graph\n   *\n   * @param node - a node to be added\n   */\n\n\n  _createClass(Graph, [{\n    key: \"addNode\",\n    value: function addNode(node) {\n      this.nodes.add(node);\n\n      if (!this.edges.has(node)) {\n        this.edges.set(node, new Set());\n      }\n    }\n    /**\n     * Adds edge between nodes.\n     *\n     * The nodes had to be added to the graph before, or the error will be raised\n     *\n     * @param fromNode - node from which edge is outcoming\n     * @param toNode - node to which edge is incoming\n     */\n\n  }, {\n    key: \"addEdge\",\n    value: function addEdge(fromNode, toNode) {\n      if (!this.nodes.has(fromNode)) {\n        throw new Error(\"Unknown node \".concat(fromNode));\n      }\n\n      if (!this.nodes.has(toNode)) {\n        throw new Error(\"Unknown node \".concat(toNode));\n      } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n      this.edges.get(fromNode).add(toNode);\n    }\n  }, {\n    key: \"removeEdge\",\n    value: function removeEdge(fromNode, toNode) {\n      if (this.existsEdge(fromNode, toNode)) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.edges.get(fromNode).delete(toNode);\n      } else {\n        throw new Error('Edge does not exist');\n      }\n    }\n  }, {\n    key: \"softRemoveEdge\",\n    value: function softRemoveEdge(fromNode, toNode) {\n      var _a;\n\n      (_a = this.edges.get(fromNode)) === null || _a === void 0 ? void 0 : _a.delete(toNode);\n    }\n  }, {\n    key: \"removeIncomingEdges\",\n    value: function removeIncomingEdges(toNode) {\n      this.edges.forEach(function (nodeEdges) {\n        nodeEdges.delete(toNode);\n      });\n    }\n    /**\n     * Returns nodes adjacent to given node\n     *\n     * @param node - node to which adjacent nodes we want to retrieve\n     */\n\n  }, {\n    key: \"adjacentNodes\",\n    value: function adjacentNodes(node) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this.edges.get(node);\n    }\n  }, {\n    key: \"adjacentNodesCount\",\n    value: function adjacentNodesCount(node) {\n      return this.adjacentNodes(node).size;\n    }\n    /**\n     * Checks whether a node is present in graph\n     *\n     * @param node - node to check\n     */\n\n  }, {\n    key: \"hasNode\",\n    value: function hasNode(node) {\n      return this.nodes.has(node);\n    }\n    /**\n     * Returns number of nodes in graph\n     */\n\n  }, {\n    key: \"nodesCount\",\n    value: function nodesCount() {\n      return this.nodes.size;\n    }\n    /**\n     * Returns number of edges in graph\n     */\n\n  }, {\n    key: \"edgesCount\",\n    value: function edgesCount() {\n      var result = 0;\n      this.edges.forEach(function (edgesForNode) {\n        return result += edgesForNode.size;\n      });\n      return result;\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(node) {\n      var _iterator = _createForOfIteratorHelper(this.adjacentNodes(node).values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var adjacentNode = _step.value;\n          this.markNodeAsSpecialRecentlyChanged(adjacentNode);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.edges.delete(node);\n      this.nodes.delete(node);\n      this.specialNodes.delete(node);\n      this.specialNodesRecentlyChanged.delete(node);\n      this.specialNodesStructuralChanges.delete(node);\n      this.infiniteRanges.delete(node);\n      return this.removeDependencies(node);\n    }\n  }, {\n    key: \"markNodeAsSpecial\",\n    value: function markNodeAsSpecial(node) {\n      this.specialNodes.add(node);\n    }\n  }, {\n    key: \"markNodeAsSpecialRecentlyChanged\",\n    value: function markNodeAsSpecialRecentlyChanged(node) {\n      if (this.nodes.has(node)) {\n        this.specialNodesRecentlyChanged.add(node);\n      }\n    }\n  }, {\n    key: \"markNodeAsChangingWithStructure\",\n    value: function markNodeAsChangingWithStructure(node) {\n      this.specialNodesStructuralChanges.add(node);\n    }\n  }, {\n    key: \"clearSpecialNodesRecentlyChanged\",\n    value: function clearSpecialNodesRecentlyChanged() {\n      this.specialNodesRecentlyChanged.clear();\n    }\n  }, {\n    key: \"markNodeAsInfiniteRange\",\n    value: function markNodeAsInfiniteRange(node) {\n      this.infiniteRanges.add(node);\n    }\n    /**\n     * Checks whether exists edge between nodes\n     *\n     * @param fromNode - node from which edge is outcoming\n     * @param toNode - node to which edge is incoming\n     */\n\n  }, {\n    key: \"existsEdge\",\n    value: function existsEdge(fromNode, toNode) {\n      var _a, _b;\n\n      return (_b = (_a = this.edges.get(fromNode)) === null || _a === void 0 ? void 0 : _a.has(toNode)) !== null && _b !== void 0 ? _b : false;\n    }\n    /*\n     * return a topological sort order, but separates vertices that exist in some cycle\n     */\n\n  }, {\n    key: \"topSortWithScc\",\n    value: function topSortWithScc() {\n      return this.getTopSortedWithSccSubgraphFrom(Array.from(this.nodes), function () {\n        return true;\n      }, function () {});\n    }\n    /**\n     *\n     * an iterative implementation of Tarjan's algorithm for finding strongly connected compontents\n     * returns vertices in order of topological sort, but vertices that are on cycles are kept separate\n     *\n     * @param modifiedNodes - seed for computation. During engine init run, all of the vertices of grap. In recomputation run, changed vertices.\n     * @param operatingFunction - recomputes value of a node, and returns whether a change occured\n     * @param onCycle - action to be performed when node is on cycle\n     */\n\n  }, {\n    key: \"getTopSortedWithSccSubgraphFrom\",\n    value: function getTopSortedWithSccSubgraphFrom(modifiedNodes, operatingFunction, onCycle) {\n      var _this = this;\n\n      var entranceTime = new Map();\n      var low = new Map();\n      var parent = new Map();\n      var inSCC = new Set(); // node status life cycle:\n      // undefined -> ON_STACK -> PROCESSED -> POPPED\n\n      var nodeStatus = new Map();\n      var order = [];\n      var time = 0;\n      var sccNonSingletons = new Set();\n      modifiedNodes.reverse();\n      modifiedNodes.forEach(function (v) {\n        if (nodeStatus.get(v) !== undefined) {\n          return;\n        }\n\n        var DFSstack = [v];\n        var SCCstack = [];\n        nodeStatus.set(v, NodeVisitStatus.ON_STACK);\n\n        var _loop = function _loop() {\n          var u = DFSstack[DFSstack.length - 1]; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n          switch (nodeStatus.get(u)) {\n            case NodeVisitStatus.ON_STACK:\n              {\n                entranceTime.set(u, time);\n                low.set(u, time);\n                SCCstack.push(u);\n                time++;\n\n                _this.adjacentNodes(u).forEach(function (t) {\n                  if (entranceTime.get(t) === undefined) {\n                    DFSstack.push(t);\n                    parent.set(t, u);\n                    nodeStatus.set(t, NodeVisitStatus.ON_STACK);\n                  }\n                });\n\n                nodeStatus.set(u, NodeVisitStatus.PROCESSED);\n                break;\n              }\n\n            case NodeVisitStatus.PROCESSED:\n              {\n                // leaving this DFS subtree\n                var uLow; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n                uLow = entranceTime.get(u);\n\n                _this.adjacentNodes(u).forEach(function (t) {\n                  if (!inSCC.has(t)) {\n                    if (parent.get(t) === u) {\n                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                      uLow = Math.min(uLow, low.get(t));\n                    } else {\n                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                      uLow = Math.min(uLow, entranceTime.get(t));\n                    }\n                  }\n                });\n\n                low.set(u, uLow);\n\n                if (uLow === entranceTime.get(u)) {\n                  var currentSCC = [];\n\n                  do {\n                    currentSCC.push(SCCstack[SCCstack.length - 1]);\n                    SCCstack.pop();\n                  } while (currentSCC[currentSCC.length - 1] !== u);\n\n                  currentSCC.forEach(function (t) {\n                    inSCC.add(t);\n                  });\n                  order.push.apply(order, currentSCC);\n\n                  if (currentSCC.length > 1) {\n                    currentSCC.forEach(function (t) {\n                      sccNonSingletons.add(t);\n                    });\n                  }\n                }\n\n                DFSstack.pop();\n                nodeStatus.set(u, NodeVisitStatus.POPPED);\n                break;\n              }\n\n            case NodeVisitStatus.POPPED:\n              {\n                // it's a 'shadow' copy, we already processed this vertex and can ignore it\n                DFSstack.pop();\n                break;\n              }\n          }\n        };\n\n        while (DFSstack.length > 0) {\n          _loop();\n        }\n      });\n      var shouldBeUpdatedMapping = new Set(modifiedNodes);\n      var sorted = [];\n      var cycled = [];\n      order.reverse();\n      order.forEach(function (t) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        if (sccNonSingletons.has(t) || _this.adjacentNodes(t).has(t)) {\n          cycled.push(t);\n          onCycle(t);\n\n          _this.adjacentNodes(t).forEach(function (s) {\n            return shouldBeUpdatedMapping.add(s);\n          });\n        } else {\n          sorted.push(t);\n\n          if (shouldBeUpdatedMapping.has(t) && operatingFunction(t)) {\n            _this.adjacentNodes(t).forEach(function (s) {\n              return shouldBeUpdatedMapping.add(s);\n            });\n          }\n        }\n      });\n      return {\n        sorted: sorted,\n        cycled: cycled\n      };\n    }\n  }, {\n    key: \"getDependencies\",\n    value: function getDependencies(vertex) {\n      var result = [];\n      this.edges.forEach(function (adjacentNodes, sourceNode) {\n        if (adjacentNodes.has(vertex)) {\n          result.push(sourceNode);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"removeDependencies\",\n    value: function removeDependencies(node) {\n      var dependencies = this.dependencyQuery(node);\n\n      var _iterator2 = _createForOfIteratorHelper(dependencies),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var dependency = _step2.value;\n          this.softRemoveEdge(dependency, node);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return dependencies;\n    }\n  }]);\n\n  return Graph;\n}();"]},"metadata":{},"sourceType":"module"}