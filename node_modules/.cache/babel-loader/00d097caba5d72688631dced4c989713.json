{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { ErrorType } from '../Cell';\nimport { NoSheetWithIdError } from '../index';\nimport { sheetIndexToString } from './addressRepresentationConverters';\nimport { AstNodeType, imageWithWhitespace, RangeSheetReferenceType } from './Ast';\nimport { binaryOpTokenMap } from './binaryOpTokenMap';\nexport var Unparser = /*#__PURE__*/function () {\n  function Unparser(config, lexerConfig, sheetMappingFn, namedExpressions) {\n    _classCallCheck(this, Unparser);\n\n    this.config = config;\n    this.lexerConfig = lexerConfig;\n    this.sheetMappingFn = sheetMappingFn;\n    this.namedExpressions = namedExpressions;\n  }\n\n  _createClass(Unparser, [{\n    key: \"unparse\",\n    value: function unparse(ast, address) {\n      return '=' + this.unparseAst(ast, address);\n    }\n  }, {\n    key: \"unparseAst\",\n    value: function unparseAst(ast, address) {\n      var _this = this;\n\n      var _a, _b;\n\n      switch (ast.type) {\n        case AstNodeType.EMPTY:\n          {\n            return imageWithWhitespace('', ast.leadingWhitespace);\n          }\n\n        case AstNodeType.NUMBER:\n          {\n            return imageWithWhitespace(formatNumber(ast.value, this.config.decimalSeparator), ast.leadingWhitespace);\n          }\n\n        case AstNodeType.STRING:\n          {\n            return imageWithWhitespace('\"' + ast.value + '\"', ast.leadingWhitespace);\n          }\n\n        case AstNodeType.FUNCTION_CALL:\n          {\n            var args = ast.args.map(function (arg) {\n              return arg !== undefined ? _this.unparseAst(arg, address) : '';\n            }).join(this.config.functionArgSeparator);\n            var procedureName = this.config.translationPackage.isFunctionTranslated(ast.procedureName) ? this.config.translationPackage.getFunctionTranslation(ast.procedureName) : ast.procedureName;\n            var rightPart = procedureName + '(' + args + imageWithWhitespace(')', ast.internalWhitespace);\n            return imageWithWhitespace(rightPart, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.NAMED_EXPRESSION:\n          {\n            var originalNamedExpressionName = (_a = this.namedExpressions.nearestNamedExpression(ast.expressionName, address.sheet)) === null || _a === void 0 ? void 0 : _a.displayName;\n            return imageWithWhitespace(originalNamedExpressionName || ast.expressionName, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.CELL_REFERENCE:\n          {\n            var image;\n\n            if (ast.reference.sheet !== undefined) {\n              image = this.unparseSheetName(ast.reference.sheet) + '!';\n            } else {\n              image = '';\n            }\n\n            image += (_b = ast.reference.unparse(address)) !== null && _b !== void 0 ? _b : this.config.translationPackage.getErrorTranslation(ErrorType.REF);\n            return imageWithWhitespace(image, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.COLUMN_RANGE:\n        case AstNodeType.ROW_RANGE:\n        case AstNodeType.CELL_RANGE:\n          {\n            return imageWithWhitespace(this.formatRange(ast, address), ast.leadingWhitespace);\n          }\n\n        case AstNodeType.PLUS_UNARY_OP:\n          {\n            var unparsedExpr = this.unparseAst(ast.value, address);\n            return imageWithWhitespace('+', ast.leadingWhitespace) + unparsedExpr;\n          }\n\n        case AstNodeType.MINUS_UNARY_OP:\n          {\n            var _unparsedExpr = this.unparseAst(ast.value, address);\n\n            return imageWithWhitespace('-', ast.leadingWhitespace) + _unparsedExpr;\n          }\n\n        case AstNodeType.PERCENT_OP:\n          {\n            return this.unparseAst(ast.value, address) + imageWithWhitespace('%', ast.leadingWhitespace);\n          }\n\n        case AstNodeType.ERROR:\n          {\n            var _image = this.config.translationPackage.getErrorTranslation(ast.error ? ast.error.type : ErrorType.ERROR);\n\n            return imageWithWhitespace(_image, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.ERROR_WITH_RAW_INPUT:\n          {\n            return imageWithWhitespace(ast.rawInput, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.PARENTHESIS:\n          {\n            var expression = this.unparseAst(ast.expression, address);\n\n            var _rightPart = '(' + expression + imageWithWhitespace(')', ast.internalWhitespace);\n\n            return imageWithWhitespace(_rightPart, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.ARRAY:\n          {\n            var ret = '{' + ast.args.map(function (row) {\n              return row.map(function (val) {\n                return _this.unparseAst(val, address);\n              }).join(_this.config.arrayColumnSeparator);\n            }).join(this.config.arrayRowSeparator) + imageWithWhitespace('}', ast.internalWhitespace);\n            return imageWithWhitespace(ret, ast.leadingWhitespace);\n          }\n\n        default:\n          {\n            var left = this.unparseAst(ast.left, address);\n            var right = this.unparseAst(ast.right, address);\n            return left + imageWithWhitespace(binaryOpTokenMap[ast.type], ast.leadingWhitespace) + right;\n          }\n      }\n    }\n  }, {\n    key: \"unparseSheetName\",\n    value: function unparseSheetName(sheetId) {\n      var sheetName = sheetIndexToString(sheetId, this.sheetMappingFn);\n\n      if (sheetName === undefined) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      return sheetName;\n    }\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(ast, baseAddress) {\n      var startSheeet = '';\n      var endSheet = '';\n\n      if (ast.start.sheet !== undefined && ast.sheetReferenceType !== RangeSheetReferenceType.RELATIVE) {\n        startSheeet = this.unparseSheetName(ast.start.sheet) + '!';\n      }\n\n      if (ast.end.sheet !== undefined && ast.sheetReferenceType === RangeSheetReferenceType.BOTH_ABSOLUTE) {\n        endSheet = this.unparseSheetName(ast.end.sheet) + '!';\n      }\n\n      var unparsedStart = ast.start.unparse(baseAddress);\n      var unparsedEnd = ast.end.unparse(baseAddress);\n\n      if (unparsedStart === undefined || unparsedEnd === undefined) {\n        return this.config.translationPackage.getErrorTranslation(ErrorType.REF);\n      }\n\n      return \"\".concat(startSheeet).concat(unparsedStart, \":\").concat(endSheet).concat(unparsedEnd);\n    }\n  }]);\n\n  return Unparser;\n}();\nexport function formatNumber(number, decimalSeparator) {\n  var numericString = number.toString();\n  return numericString.replace('.', decimalSeparator);\n}","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/parser/Unparser.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","ErrorType","NoSheetWithIdError","sheetIndexToString","AstNodeType","imageWithWhitespace","RangeSheetReferenceType","binaryOpTokenMap","Unparser","config","lexerConfig","sheetMappingFn","namedExpressions","value","unparse","ast","address","unparseAst","_this","_a","_b","type","EMPTY","leadingWhitespace","NUMBER","formatNumber","decimalSeparator","STRING","FUNCTION_CALL","args","map","arg","undefined","join","functionArgSeparator","procedureName","translationPackage","isFunctionTranslated","getFunctionTranslation","rightPart","internalWhitespace","NAMED_EXPRESSION","originalNamedExpressionName","nearestNamedExpression","expressionName","sheet","displayName","CELL_REFERENCE","image","reference","unparseSheetName","getErrorTranslation","REF","COLUMN_RANGE","ROW_RANGE","CELL_RANGE","formatRange","PLUS_UNARY_OP","unparsedExpr","MINUS_UNARY_OP","_unparsedExpr","PERCENT_OP","ERROR","_image","error","ERROR_WITH_RAW_INPUT","rawInput","PARENTHESIS","expression","_rightPart","ARRAY","ret","row","val","arrayColumnSeparator","arrayRowSeparator","left","right","sheetId","sheetName","baseAddress","startSheeet","endSheet","start","sheetReferenceType","RELATIVE","end","BOTH_ABSOLUTE","unparsedStart","unparsedEnd","concat","number","numericString","toString","replace"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { ErrorType } from '../Cell';\nimport { NoSheetWithIdError } from '../index';\nimport { sheetIndexToString } from './addressRepresentationConverters';\nimport { AstNodeType, imageWithWhitespace, RangeSheetReferenceType } from './Ast';\nimport { binaryOpTokenMap } from './binaryOpTokenMap';\nexport var Unparser = /*#__PURE__*/function () {\n  function Unparser(config, lexerConfig, sheetMappingFn, namedExpressions) {\n    _classCallCheck(this, Unparser);\n\n    this.config = config;\n    this.lexerConfig = lexerConfig;\n    this.sheetMappingFn = sheetMappingFn;\n    this.namedExpressions = namedExpressions;\n  }\n\n  _createClass(Unparser, [{\n    key: \"unparse\",\n    value: function unparse(ast, address) {\n      return '=' + this.unparseAst(ast, address);\n    }\n  }, {\n    key: \"unparseAst\",\n    value: function unparseAst(ast, address) {\n      var _this = this;\n\n      var _a, _b;\n\n      switch (ast.type) {\n        case AstNodeType.EMPTY:\n          {\n            return imageWithWhitespace('', ast.leadingWhitespace);\n          }\n\n        case AstNodeType.NUMBER:\n          {\n            return imageWithWhitespace(formatNumber(ast.value, this.config.decimalSeparator), ast.leadingWhitespace);\n          }\n\n        case AstNodeType.STRING:\n          {\n            return imageWithWhitespace('\"' + ast.value + '\"', ast.leadingWhitespace);\n          }\n\n        case AstNodeType.FUNCTION_CALL:\n          {\n            var args = ast.args.map(function (arg) {\n              return arg !== undefined ? _this.unparseAst(arg, address) : '';\n            }).join(this.config.functionArgSeparator);\n            var procedureName = this.config.translationPackage.isFunctionTranslated(ast.procedureName) ? this.config.translationPackage.getFunctionTranslation(ast.procedureName) : ast.procedureName;\n            var rightPart = procedureName + '(' + args + imageWithWhitespace(')', ast.internalWhitespace);\n            return imageWithWhitespace(rightPart, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.NAMED_EXPRESSION:\n          {\n            var originalNamedExpressionName = (_a = this.namedExpressions.nearestNamedExpression(ast.expressionName, address.sheet)) === null || _a === void 0 ? void 0 : _a.displayName;\n            return imageWithWhitespace(originalNamedExpressionName || ast.expressionName, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.CELL_REFERENCE:\n          {\n            var image;\n\n            if (ast.reference.sheet !== undefined) {\n              image = this.unparseSheetName(ast.reference.sheet) + '!';\n            } else {\n              image = '';\n            }\n\n            image += (_b = ast.reference.unparse(address)) !== null && _b !== void 0 ? _b : this.config.translationPackage.getErrorTranslation(ErrorType.REF);\n            return imageWithWhitespace(image, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.COLUMN_RANGE:\n        case AstNodeType.ROW_RANGE:\n        case AstNodeType.CELL_RANGE:\n          {\n            return imageWithWhitespace(this.formatRange(ast, address), ast.leadingWhitespace);\n          }\n\n        case AstNodeType.PLUS_UNARY_OP:\n          {\n            var unparsedExpr = this.unparseAst(ast.value, address);\n            return imageWithWhitespace('+', ast.leadingWhitespace) + unparsedExpr;\n          }\n\n        case AstNodeType.MINUS_UNARY_OP:\n          {\n            var _unparsedExpr = this.unparseAst(ast.value, address);\n\n            return imageWithWhitespace('-', ast.leadingWhitespace) + _unparsedExpr;\n          }\n\n        case AstNodeType.PERCENT_OP:\n          {\n            return this.unparseAst(ast.value, address) + imageWithWhitespace('%', ast.leadingWhitespace);\n          }\n\n        case AstNodeType.ERROR:\n          {\n            var _image = this.config.translationPackage.getErrorTranslation(ast.error ? ast.error.type : ErrorType.ERROR);\n\n            return imageWithWhitespace(_image, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.ERROR_WITH_RAW_INPUT:\n          {\n            return imageWithWhitespace(ast.rawInput, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.PARENTHESIS:\n          {\n            var expression = this.unparseAst(ast.expression, address);\n\n            var _rightPart = '(' + expression + imageWithWhitespace(')', ast.internalWhitespace);\n\n            return imageWithWhitespace(_rightPart, ast.leadingWhitespace);\n          }\n\n        case AstNodeType.ARRAY:\n          {\n            var ret = '{' + ast.args.map(function (row) {\n              return row.map(function (val) {\n                return _this.unparseAst(val, address);\n              }).join(_this.config.arrayColumnSeparator);\n            }).join(this.config.arrayRowSeparator) + imageWithWhitespace('}', ast.internalWhitespace);\n            return imageWithWhitespace(ret, ast.leadingWhitespace);\n          }\n\n        default:\n          {\n            var left = this.unparseAst(ast.left, address);\n            var right = this.unparseAst(ast.right, address);\n            return left + imageWithWhitespace(binaryOpTokenMap[ast.type], ast.leadingWhitespace) + right;\n          }\n      }\n    }\n  }, {\n    key: \"unparseSheetName\",\n    value: function unparseSheetName(sheetId) {\n      var sheetName = sheetIndexToString(sheetId, this.sheetMappingFn);\n\n      if (sheetName === undefined) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      return sheetName;\n    }\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(ast, baseAddress) {\n      var startSheeet = '';\n      var endSheet = '';\n\n      if (ast.start.sheet !== undefined && ast.sheetReferenceType !== RangeSheetReferenceType.RELATIVE) {\n        startSheeet = this.unparseSheetName(ast.start.sheet) + '!';\n      }\n\n      if (ast.end.sheet !== undefined && ast.sheetReferenceType === RangeSheetReferenceType.BOTH_ABSOLUTE) {\n        endSheet = this.unparseSheetName(ast.end.sheet) + '!';\n      }\n\n      var unparsedStart = ast.start.unparse(baseAddress);\n      var unparsedEnd = ast.end.unparse(baseAddress);\n\n      if (unparsedStart === undefined || unparsedEnd === undefined) {\n        return this.config.translationPackage.getErrorTranslation(ErrorType.REF);\n      }\n\n      return \"\".concat(startSheeet).concat(unparsedStart, \":\").concat(endSheet).concat(unparsedEnd);\n    }\n  }]);\n\n  return Unparser;\n}();\nexport function formatNumber(number, decimalSeparator) {\n  var numericString = number.toString();\n  return numericString.replace('.', decimalSeparator);\n}"]},"metadata":{},"sourceType":"module"}