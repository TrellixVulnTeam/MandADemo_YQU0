{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport assert from 'assert';\nimport { AbsoluteCellRange } from '../AbsoluteCellRange';\nimport { absolutizeDependencies } from '../absolutizeDependencies';\nimport { CellError, ErrorType, simpleCellAddress } from '../Cell';\nimport { ErrorMessage } from '../error-message';\nimport { SimpleRangeValue } from '../interpreter/SimpleRangeValue';\nimport { collectDependencies, NamedExpressionDependency } from '../parser';\nimport { ColumnsSpan, RowsSpan } from '../Span';\nimport { StatType } from '../statistics';\nimport { EmptyCellVertex, FormulaCellVertex, MatrixVertex, RangeVertex, ValueCellVertex } from './';\nimport { AddressMapping } from './AddressMapping/AddressMapping';\nimport { collectAddressesDependentToMatrix } from './collectAddressesDependentToMatrix';\nimport { Graph } from './Graph';\nimport { MatrixMapping } from './MatrixMapping';\nimport { RangeMapping } from './RangeMapping';\nimport { SheetMapping } from './SheetMapping';\nimport { EmptyValue, getRawValue } from '../interpreter/InterpreterValue';\nexport var DependencyGraph = /*#__PURE__*/function () {\n  function DependencyGraph(addressMapping, rangeMapping, sheetMapping, matrixMapping, stats, lazilyTransformingAstService, functionRegistry, namedExpressions) {\n    var _this = this;\n\n    _classCallCheck(this, DependencyGraph);\n\n    this.addressMapping = addressMapping;\n    this.rangeMapping = rangeMapping;\n    this.sheetMapping = sheetMapping;\n    this.matrixMapping = matrixMapping;\n    this.stats = stats;\n    this.lazilyTransformingAstService = lazilyTransformingAstService;\n    this.functionRegistry = functionRegistry;\n    this.namedExpressions = namedExpressions;\n\n    this.dependencyQueryAddresses = function (vertex) {\n      if (vertex instanceof RangeVertex) {\n        return _this.rangeDependencyQuery(vertex).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              address = _ref2[0],\n              _ = _ref2[1];\n\n          return address;\n        });\n      } else {\n        var dependenciesResult = _this.formulaDependencyQuery(vertex);\n\n        if (dependenciesResult !== undefined) {\n          var _dependenciesResult = _slicedToArray(dependenciesResult, 2),\n              address = _dependenciesResult[0],\n              dependencies = _dependenciesResult[1];\n\n          return dependencies.map(function (dependency) {\n            if (dependency instanceof NamedExpressionDependency) {\n              var namedExpression = _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet);\n\n              return namedExpression.address;\n            } else {\n              return dependency;\n            }\n          });\n        } else {\n          return undefined;\n        }\n      }\n    };\n\n    this.dependencyQueryVertices = function (vertex) {\n      if (vertex instanceof RangeVertex) {\n        return _this.rangeDependencyQuery(vertex).map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              _ = _ref4[0],\n              v = _ref4[1];\n\n          return v;\n        });\n      } else {\n        var dependenciesResult = _this.formulaDependencyQuery(vertex);\n\n        if (dependenciesResult !== undefined) {\n          var _dependenciesResult2 = _slicedToArray(dependenciesResult, 2),\n              address = _dependenciesResult2[0],\n              dependencies = _dependenciesResult2[1];\n\n          return dependencies.map(function (dependency) {\n            if (dependency instanceof AbsoluteCellRange) {\n              return _this.rangeMapping.fetchRange(dependency.start, dependency.end);\n            } else if (dependency instanceof NamedExpressionDependency) {\n              var namedExpression = _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet);\n\n              return _this.addressMapping.fetchCell(namedExpression.address);\n            } else {\n              return _this.addressMapping.fetchCell(dependency);\n            }\n          });\n        } else {\n          return undefined;\n        }\n      }\n    };\n\n    this.rangeDependencyQuery = function (vertex) {\n      var allDeps = [];\n\n      var _this$rangeMapping$fi = _this.rangeMapping.findSmallerRange(vertex.range),\n          smallerRangeVertex = _this$rangeMapping$fi.smallerRangeVertex,\n          restRange = _this$rangeMapping$fi.restRange; //checking whether this range was splitted by bruteForce or not\n\n\n      var range;\n\n      if (smallerRangeVertex !== null && _this.graph.adjacentNodes(smallerRangeVertex).has(vertex)) {\n        range = restRange;\n        allDeps.push([new AbsoluteCellRange(smallerRangeVertex.start, smallerRangeVertex.end), smallerRangeVertex]);\n      } else {\n        //did we ever need to use full range\n        range = vertex.range;\n      }\n\n      var _iterator = _createForOfIteratorHelper(range.addresses(_this)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var address = _step.value;\n\n          var cell = _this.addressMapping.getCell(address);\n\n          if (cell instanceof EmptyCellVertex) {\n            cell.address = address;\n          }\n\n          if (cell !== null) {\n            allDeps.push([address, cell]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return allDeps;\n    };\n\n    this.formulaDependencyQuery = function (vertex) {\n      var formula;\n      var address;\n\n      if (vertex instanceof FormulaCellVertex) {\n        address = vertex.getAddress(_this.lazilyTransformingAstService);\n        formula = vertex.getFormula(_this.lazilyTransformingAstService);\n      } else if (vertex instanceof MatrixVertex && vertex.isFormula()) {\n        address = vertex.getAddress();\n        formula = vertex.getFormula();\n      } else {\n        return undefined;\n      }\n\n      var deps = collectDependencies(formula, _this.functionRegistry);\n      return [address, absolutizeDependencies(deps, address)];\n    };\n\n    this.graph = new Graph(this.dependencyQueryVertices);\n  }\n  /*\n   * Invariants:\n   * - empty cell has associated EmptyCellVertex if and only if it is a dependency (possibly indirect, through range) to some formula\n   */\n\n\n  _createClass(DependencyGraph, [{\n    key: \"setFormulaToCell\",\n    value: function setFormulaToCell(address, ast, dependencies, hasVolatileFunction, hasStructuralChangeFunction) {\n      var vertex = this.addressMapping.getCell(address);\n      this.ensureThatVertexIsNonMatrixCellVertex(vertex);\n      var newVertex = new FormulaCellVertex(ast, address, this.lazilyTransformingAstService.version());\n      this.exchangeOrAddGraphNode(vertex, newVertex);\n      this.addressMapping.setCell(address, newVertex);\n      this.processCellDependencies(dependencies, newVertex);\n      this.graph.markNodeAsSpecialRecentlyChanged(newVertex);\n\n      if (hasVolatileFunction) {\n        this.markAsVolatile(newVertex);\n      }\n\n      if (hasStructuralChangeFunction) {\n        this.markAsDependentOnStructureChange(newVertex);\n      }\n\n      this.correctInfiniteRangesDependency(address);\n    }\n  }, {\n    key: \"setParsingErrorToCell\",\n    value: function setParsingErrorToCell(address, errorVertex) {\n      var vertex = this.addressMapping.getCell(address);\n      this.ensureThatVertexIsNonMatrixCellVertex(vertex);\n      this.exchangeOrAddGraphNode(vertex, errorVertex);\n      this.addressMapping.setCell(address, errorVertex);\n      this.graph.markNodeAsSpecialRecentlyChanged(errorVertex);\n      this.correctInfiniteRangesDependency(address);\n    }\n  }, {\n    key: \"setValueToCell\",\n    value: function setValueToCell(address, value) {\n      var vertex = this.addressMapping.getCell(address);\n      this.ensureThatVertexIsNonMatrixCellVertex(vertex);\n\n      if (vertex instanceof ValueCellVertex) {\n        var oldValue = vertex.getValues();\n\n        if (oldValue.rawValue !== value.rawValue) {\n          vertex.setValues(value);\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } else {\n        var newVertex = new ValueCellVertex(value.parsedValue, value.rawValue);\n        this.exchangeOrAddGraphNode(vertex, newVertex);\n        this.addressMapping.setCell(address, newVertex);\n        this.graph.markNodeAsSpecialRecentlyChanged(newVertex);\n      }\n\n      this.correctInfiniteRangesDependency(address);\n    }\n  }, {\n    key: \"setCellEmpty\",\n    value: function setCellEmpty(address) {\n      var vertex = this.addressMapping.getCell(address);\n\n      if (vertex === null) {\n        return;\n      }\n\n      this.ensureThatVertexIsNonMatrixCellVertex(vertex);\n\n      if (this.graph.adjacentNodes(vertex).size > 0) {\n        var emptyVertex = new EmptyCellVertex(address);\n        this.exchangeGraphNode(vertex, emptyVertex);\n\n        if (this.graph.adjacentNodesCount(emptyVertex) === 0) {\n          this.removeVertex(emptyVertex);\n          this.addressMapping.removeCell(address);\n        } else {\n          this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);\n          this.addressMapping.setCell(address, emptyVertex);\n        }\n      } else {\n        this.removeVertex(vertex);\n        this.addressMapping.removeCell(address);\n      }\n    }\n  }, {\n    key: \"ensureThatVertexIsNonMatrixCellVertex\",\n    value: function ensureThatVertexIsNonMatrixCellVertex(vertex) {\n      assert.ok(!(vertex instanceof MatrixVertex), 'Illegal operation');\n    }\n  }, {\n    key: \"clearRecentlyChangedVertices\",\n    value: function clearRecentlyChangedVertices() {\n      this.graph.clearSpecialNodesRecentlyChanged();\n    }\n  }, {\n    key: \"verticesToRecompute\",\n    value: function verticesToRecompute() {\n      return new Set([].concat(_toConsumableArray(this.graph.specialNodesRecentlyChanged), _toConsumableArray(this.volatileVertices())));\n    }\n  }, {\n    key: \"processCellDependencies\",\n    value: function processCellDependencies(cellDependencies, endVertex) {\n      var _this2 = this;\n\n      cellDependencies.forEach(function (dep) {\n        if (dep instanceof AbsoluteCellRange) {\n          var range = dep;\n\n          var rangeVertex = _this2.getRange(range.start, range.end);\n\n          if (rangeVertex === undefined) {\n            rangeVertex = new RangeVertex(range);\n\n            _this2.rangeMapping.setRange(rangeVertex);\n          }\n\n          _this2.graph.addNode(rangeVertex);\n\n          if (!range.isFinite()) {\n            _this2.graph.markNodeAsInfiniteRange(rangeVertex);\n          }\n\n          var _this2$rangeMapping$f = _this2.rangeMapping.findSmallerRange(range),\n              smallerRangeVertex = _this2$rangeMapping$f.smallerRangeVertex,\n              restRange = _this2$rangeMapping$f.restRange;\n\n          if (smallerRangeVertex) {\n            _this2.graph.addEdge(smallerRangeVertex, rangeVertex);\n\n            if (rangeVertex.bruteForce) {\n              rangeVertex.bruteForce = false;\n\n              var _iterator2 = _createForOfIteratorHelper(range.addresses(_this2)),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var cellFromRange = _step2.value; //if we ever switch heuristic to processing by sorted sizes, this would be unnecessary\n\n                  _this2.graph.removeEdge(_this2.fetchCell(cellFromRange), rangeVertex);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } else {\n            rangeVertex.bruteForce = true;\n          }\n\n          var matrix = _this2.matrixMapping.getMatrix(restRange);\n\n          if (matrix !== undefined) {\n            _this2.graph.addEdge(matrix, rangeVertex);\n          } else {\n            var _iterator3 = _createForOfIteratorHelper(restRange.addresses(_this2)),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _cellFromRange = _step3.value;\n\n                _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(_cellFromRange), rangeVertex);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n\n          _this2.graph.addEdge(rangeVertex, endVertex);\n\n          if (range.isFinite()) {\n            _this2.correctInfiniteRangesDependenciesByRangeVertex(rangeVertex);\n          }\n        } else if (dep instanceof NamedExpressionDependency) {\n          var sheetOfVertex = endVertex.getAddress(_this2.lazilyTransformingAstService).sheet;\n\n          var namedExpressionVertex = _this2.fetchNamedExpressionVertex(dep.name, sheetOfVertex);\n\n          _this2.graph.addEdge(namedExpressionVertex, endVertex);\n        } else {\n          _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(dep), endVertex);\n        }\n      });\n    }\n  }, {\n    key: \"fetchNamedExpressionVertex\",\n    value: function fetchNamedExpressionVertex(expressionName, sheetId) {\n      var namedExpression = this.namedExpressions.namedExpressionOrPlaceholder(expressionName, sheetId);\n      return this.fetchCellOrCreateEmpty(namedExpression.address);\n    }\n  }, {\n    key: \"exchangeNode\",\n    value: function exchangeNode(addressFrom, addressTo) {\n      var vertexFrom = this.fetchCellOrCreateEmpty(addressFrom);\n      var vertexTo = this.fetchCellOrCreateEmpty(addressTo);\n      this.addressMapping.removeCell(addressFrom);\n      this.exchangeGraphNode(vertexFrom, vertexTo);\n    }\n  }, {\n    key: \"correctInfiniteRangesDependenciesByRangeVertex\",\n    value: function correctInfiniteRangesDependenciesByRangeVertex(vertex) {\n      var _iterator4 = _createForOfIteratorHelper(this.graph.infiniteRanges),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var range = _step4.value;\n          var infiniteRangeVertex = range;\n          var intersection = vertex.range.intersectionWith(infiniteRangeVertex.range);\n\n          if (intersection === null) {\n            continue;\n          }\n\n          var _iterator5 = _createForOfIteratorHelper(intersection.addresses(this)),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var address = _step5.value;\n              this.graph.addEdge(this.fetchCellOrCreateEmpty(address), range);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"correctInfiniteRangesDependency\",\n    value: function correctInfiniteRangesDependency(address) {\n      var vertex = null;\n\n      var _iterator6 = _createForOfIteratorHelper(this.graph.infiniteRanges),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var range = _step6.value;\n          var infiniteRangeVertex = range;\n\n          if (infiniteRangeVertex.range.addressInRange(address)) {\n            vertex = vertex || this.fetchCellOrCreateEmpty(address);\n            this.graph.addEdge(vertex, infiniteRangeVertex);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"fetchCellOrCreateEmpty\",\n    value: function fetchCellOrCreateEmpty(address) {\n      var vertex = this.addressMapping.getCell(address);\n\n      if (!vertex) {\n        vertex = new EmptyCellVertex(address);\n        this.graph.addNode(vertex);\n        this.addressMapping.setCell(address, vertex);\n      }\n\n      return vertex;\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(removedRows) {\n      var _this3 = this;\n\n      if (this.matrixMapping.isFormulaMatrixInRows(removedRows)) {\n        throw Error('It is not possible to remove row with matrix');\n      }\n\n      this.stats.measure(StatType.ADJUSTING_GRAPH, function () {\n        var _iterator7 = _createForOfIteratorHelper(_this3.addressMapping.verticesFromRowsSpan(removedRows)),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var vertex = _step7.value;\n\n            var _iterator8 = _createForOfIteratorHelper(_this3.graph.adjacentNodes(vertex)),\n                _step8;\n\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var adjacentNode = _step8.value;\n\n                _this3.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n\n            if (vertex instanceof MatrixVertex) {\n              continue;\n            }\n\n            _this3.removeVertex(vertex);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        _this3.truncateMatricesAfterRemovingRows(removedRows);\n      });\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this3.addressMapping.removeRows(removedRows);\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        _this3.truncateRanges(removedRows, function (address) {\n          return address.row;\n        });\n      });\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"removeSheet\",\n    value: function removeSheet(removedSheetId) {\n      var _this4 = this;\n\n      var matrices = new Set();\n\n      var _iterator9 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(removedSheetId)),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _step9$value = _slicedToArray(_step9.value, 2),\n              adr = _step9$value[0],\n              vertex = _step9$value[1];\n\n          if (vertex instanceof MatrixVertex) {\n            if (matrices.has(vertex)) {\n              continue;\n            } else {\n              matrices.add(vertex);\n            }\n          }\n\n          var _iterator12 = _createForOfIteratorHelper(this.graph.adjacentNodes(vertex)),\n              _step12;\n\n          try {\n            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n              var adjacentNode = _step12.value;\n              this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n            }\n          } catch (err) {\n            _iterator12.e(err);\n          } finally {\n            _iterator12.f();\n          }\n\n          this.removeVertex(vertex);\n          this.addressMapping.removeCell(adr);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        var _iterator10 = _createForOfIteratorHelper(matrices.values()),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var matrix = _step10.value;\n\n            _this4.matrixMapping.removeMatrix(matrix.getRange());\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var rangesToRemove = _this4.rangeMapping.removeRangesInSheet(removedSheetId);\n\n        var _iterator11 = _createForOfIteratorHelper(rangesToRemove),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var range = _step11.value;\n\n            _this4.removeVertex(range);\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n\n        _this4.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n          _this4.addressMapping.removeSheet(removedSheetId);\n        });\n      });\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"clearSheet\",\n    value: function clearSheet(sheetId) {\n      var matrices = new Set();\n\n      var _iterator13 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(sheetId)),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _step13$value = _slicedToArray(_step13.value, 2),\n              address = _step13$value[0],\n              vertex = _step13$value[1];\n\n          if (vertex instanceof MatrixVertex) {\n            matrices.add(vertex);\n          } else {\n            this.setCellEmpty(address);\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n\n      var _iterator14 = _createForOfIteratorHelper(matrices.values()),\n          _step14;\n\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var matrix = _step14.value;\n          this.setMatrixEmpty(matrix);\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(removedColumns) {\n      var _this5 = this;\n\n      if (this.matrixMapping.isFormulaMatrixInColumns(removedColumns)) {\n        throw Error('It is not possible to remove column within matrix');\n      }\n\n      this.stats.measure(StatType.ADJUSTING_GRAPH, function () {\n        var _iterator15 = _createForOfIteratorHelper(_this5.addressMapping.verticesFromColumnsSpan(removedColumns)),\n            _step15;\n\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var vertex = _step15.value;\n\n            var _iterator16 = _createForOfIteratorHelper(_this5.graph.adjacentNodes(vertex)),\n                _step16;\n\n            try {\n              for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n                var adjacentNode = _step16.value;\n\n                _this5.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n              }\n            } catch (err) {\n              _iterator16.e(err);\n            } finally {\n              _iterator16.f();\n            }\n\n            if (vertex instanceof MatrixVertex) {\n              continue;\n            }\n\n            _this5.removeVertex(vertex);\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        _this5.truncateMatricesAfterRemovingColumns(removedColumns);\n      });\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this5.addressMapping.removeColumns(removedColumns);\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        _this5.truncateRanges(removedColumns, function (address) {\n          return address.col;\n        });\n      });\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"addRows\",\n    value: function addRows(addedRows) {\n      var _this6 = this;\n\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this6.addressMapping.addRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        _this6.expandMatricesAfterAddingRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        _this6.rangeMapping.moveAllRangesInSheetAfterRowByRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n\n        _this6.fixRangesWhenAddingRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n\n      var _iterator17 = _createForOfIteratorHelper(this.addressMapping.verticesFromRowsSpan(addedRows)),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var vertex = _step17.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"addColumns\",\n    value: function addColumns(addedColumns) {\n      var _this7 = this;\n\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this7.addressMapping.addColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        _this7.expandMatricesAfterAddingColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        _this7.rangeMapping.moveAllRangesInSheetAfterColumnByColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n\n        _this7.fixRangesWhenAddingColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n\n      var _iterator18 = _createForOfIteratorHelper(this.addressMapping.verticesFromColumnsSpan(addedColumns)),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var vertex = _step18.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"ensureNoMatrixInRange\",\n    value: function ensureNoMatrixInRange(range) {\n      if (this.matrixMapping.isFormulaMatrixInRange(range)) {\n        throw Error('It is not possible to move / replace cells with matrix');\n      }\n    }\n  }, {\n    key: \"moveCells\",\n    value: function moveCells(sourceRange, toRight, toBottom, toSheet) {\n      var _iterator19 = _createForOfIteratorHelper(sourceRange.addressesWithDirection(toRight, toBottom, this)),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var sourceAddress = _step19.value;\n          var targetAddress = simpleCellAddress(toSheet, sourceAddress.col + toRight, sourceAddress.row + toBottom);\n          var sourceVertex = this.addressMapping.getCell(sourceAddress);\n          var targetVertex = this.addressMapping.getCell(targetAddress);\n          this.addressMapping.removeCell(sourceAddress);\n\n          if (sourceVertex !== null) {\n            this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);\n            this.addressMapping.setCell(targetAddress, sourceVertex);\n            var emptyVertex = null;\n\n            var _iterator21 = _createForOfIteratorHelper(this.graph.adjacentNodes(sourceVertex)),\n                _step21;\n\n            try {\n              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                var adjacentNode = _step21.value;\n\n                if (adjacentNode instanceof RangeVertex && !sourceRange.containsRange(adjacentNode.range)) {\n                  emptyVertex = emptyVertex || this.fetchCellOrCreateEmpty(sourceAddress);\n                  this.graph.addEdge(emptyVertex, adjacentNode);\n                  this.graph.removeEdge(sourceVertex, adjacentNode);\n                }\n              }\n            } catch (err) {\n              _iterator21.e(err);\n            } finally {\n              _iterator21.f();\n            }\n\n            if (emptyVertex) {\n              this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);\n              this.addressMapping.setCell(sourceAddress, emptyVertex);\n            }\n          }\n\n          if (targetVertex !== null) {\n            if (sourceVertex === null) {\n              this.addressMapping.removeCell(targetAddress);\n            }\n\n            var _iterator22 = _createForOfIteratorHelper(this.graph.adjacentNodes(targetVertex)),\n                _step22;\n\n            try {\n              for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n                var _adjacentNode = _step22.value;\n                sourceVertex = sourceVertex !== null && sourceVertex !== void 0 ? sourceVertex : this.fetchCellOrCreateEmpty(targetAddress);\n                this.graph.addEdge(sourceVertex, _adjacentNode);\n                this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);\n              }\n            } catch (err) {\n              _iterator22.e(err);\n            } finally {\n              _iterator22.f();\n            }\n\n            this.removeVertex(targetVertex);\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      var _iterator20 = _createForOfIteratorHelper(this.rangeMapping.rangeVerticesContainedInRange(sourceRange)),\n          _step20;\n\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var rangeVertex = _step20.value;\n\n          var _iterator23 = _createForOfIteratorHelper(this.graph.adjacentNodes(rangeVertex)),\n              _step23;\n\n          try {\n            for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n              var _adjacentNode2 = _step23.value;\n\n              if (_adjacentNode2 instanceof RangeVertex && !sourceRange.containsRange(_adjacentNode2.range)) {\n                this.graph.removeEdge(rangeVertex, _adjacentNode2);\n\n                var _iterator24 = _createForOfIteratorHelper(rangeVertex.range.addresses(this)),\n                    _step24;\n\n                try {\n                  for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n                    var address = _step24.value;\n                    var newEmptyVertex = this.fetchCellOrCreateEmpty(address);\n                    this.graph.addEdge(newEmptyVertex, _adjacentNode2);\n                    this.addressMapping.setCell(address, newEmptyVertex);\n                    this.graph.markNodeAsSpecialRecentlyChanged(newEmptyVertex);\n                  }\n                } catch (err) {\n                  _iterator24.e(err);\n                } finally {\n                  _iterator24.f();\n                }\n              }\n            }\n          } catch (err) {\n            _iterator23.e(err);\n          } finally {\n            _iterator23.f();\n          }\n        }\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n\n      this.rangeMapping.moveRangesInsideSourceRange(sourceRange, toRight, toBottom, toSheet);\n    }\n  }, {\n    key: \"disableNumericMatrices\",\n    value: function disableNumericMatrices() {\n      var _iterator25 = _createForOfIteratorHelper(this.matrixMapping.numericMatrices()),\n          _step25;\n\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var _step25$value = _slicedToArray(_step25.value, 2),\n              _ = _step25$value[0],\n              matrixVertex = _step25$value[1];\n\n          this.breakNumericMatrix(matrixVertex);\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n    }\n  }, {\n    key: \"breakNumericMatricesInRange\",\n    value: function breakNumericMatricesInRange(range) {\n      var _iterator26 = _createForOfIteratorHelper(this.matrixMapping.numericMatricesInRange(range)),\n          _step26;\n\n      try {\n        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n          var _step26$value = _slicedToArray(_step26.value, 2),\n              _ = _step26$value[0],\n              matrix = _step26$value[1];\n\n          this.breakNumericMatrix(matrix);\n        }\n      } catch (err) {\n        _iterator26.e(err);\n      } finally {\n        _iterator26.f();\n      }\n    }\n  }, {\n    key: \"breakNumericMatrix\",\n    value: function breakNumericMatrix(matrixVertex) {\n      var matrixRange = AbsoluteCellRange.spanFrom(matrixVertex.getAddress(), matrixVertex.width, matrixVertex.height);\n      var adjacentNodes = this.graph.adjacentNodes(matrixVertex);\n\n      var _iterator27 = _createForOfIteratorHelper(matrixRange.addresses(this)),\n          _step27;\n\n      try {\n        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n          var address = _step27.value; // We wouldn't need that typecast if we would take values from Matrix\n\n          var valueVertex = new ValueCellVertex(this.getCellValue(address), this.getRawValue(address));\n          this.addVertex(address, valueVertex);\n        }\n      } catch (err) {\n        _iterator27.e(err);\n      } finally {\n        _iterator27.f();\n      }\n\n      var _iterator28 = _createForOfIteratorHelper(adjacentNodes.values()),\n          _step28;\n\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var adjacentNode = _step28.value;\n          var nodeDependencies = collectAddressesDependentToMatrix(this.functionRegistry, adjacentNode, matrixVertex, this.lazilyTransformingAstService, this);\n\n          var _iterator29 = _createForOfIteratorHelper(nodeDependencies),\n              _step29;\n\n          try {\n            for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n              var _address = _step29.value;\n              var vertex = this.fetchCell(_address);\n              this.graph.addEdge(vertex, adjacentNode);\n            }\n          } catch (err) {\n            _iterator29.e(err);\n          } finally {\n            _iterator29.f();\n          }\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n\n      this.removeVertex(matrixVertex);\n      this.matrixMapping.removeMatrix(matrixVertex.getRange());\n    }\n  }, {\n    key: \"setMatrixEmpty\",\n    value: function setMatrixEmpty(matrixVertex) {\n      var matrixRange = AbsoluteCellRange.spanFrom(matrixVertex.getAddress(), matrixVertex.width, matrixVertex.height);\n      var adjacentNodes = this.graph.adjacentNodes(matrixVertex);\n\n      var _iterator30 = _createForOfIteratorHelper(matrixRange.addresses(this)),\n          _step30;\n\n      try {\n        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n          var address = _step30.value;\n          this.addressMapping.removeCell(address);\n        }\n      } catch (err) {\n        _iterator30.e(err);\n      } finally {\n        _iterator30.f();\n      }\n\n      var _iterator31 = _createForOfIteratorHelper(adjacentNodes.values()),\n          _step31;\n\n      try {\n        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n          var adjacentNode = _step31.value;\n          var nodeDependencies = collectAddressesDependentToMatrix(this.functionRegistry, adjacentNode, matrixVertex, this.lazilyTransformingAstService, this);\n\n          var _iterator32 = _createForOfIteratorHelper(nodeDependencies),\n              _step32;\n\n          try {\n            for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n              var _address2 = _step32.value;\n              var vertex = this.fetchCellOrCreateEmpty(_address2);\n              this.graph.addEdge(vertex, adjacentNode);\n            }\n          } catch (err) {\n            _iterator32.e(err);\n          } finally {\n            _iterator32.f();\n          }\n\n          if (nodeDependencies.length > 0) {\n            this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n          }\n        }\n      } catch (err) {\n        _iterator31.e(err);\n      } finally {\n        _iterator31.f();\n      }\n\n      this.removeVertex(matrixVertex);\n      this.matrixMapping.removeMatrix(matrixVertex.getRange());\n    }\n  }, {\n    key: \"addVertex\",\n    value: function addVertex(address, vertex) {\n      this.graph.addNode(vertex);\n      this.setVertexAddress(address, vertex);\n    }\n  }, {\n    key: \"addMatrixVertex\",\n    value: function addMatrixVertex(address, vertex) {\n      this.graph.addNode(vertex);\n      this.setAddressMappingForMatrixVertex(vertex, address);\n    }\n  }, {\n    key: \"addNewMatrixVertex\",\n    value: function addNewMatrixVertex(matrixVertex) {\n      var range = AbsoluteCellRange.spanFrom(matrixVertex.getAddress(), matrixVertex.width, matrixVertex.height);\n\n      var _iterator33 = _createForOfIteratorHelper(this.verticesFromRange(range)),\n          _step33;\n\n      try {\n        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n          var vertex = _step33.value;\n\n          if (vertex instanceof MatrixVertex) {\n            throw Error('You cannot modify only part of an array');\n          }\n        }\n      } catch (err) {\n        _iterator33.e(err);\n      } finally {\n        _iterator33.f();\n      }\n\n      this.setMatrix(range, matrixVertex);\n\n      var _iterator34 = _createForOfIteratorHelper(this.entriesFromRange(range)),\n          _step34;\n\n      try {\n        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n          var _step34$value = _slicedToArray(_step34.value, 2),\n              address = _step34$value[0],\n              _vertex = _step34$value[1];\n\n          if (_vertex) {\n            this.exchangeGraphNode(_vertex, matrixVertex);\n          }\n\n          this.setVertexAddress(address, matrixVertex);\n        }\n      } catch (err) {\n        _iterator34.e(err);\n      } finally {\n        _iterator34.f();\n      }\n    }\n  }, {\n    key: \"matrixFormulaNodes\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function matrixFormulaNodes() {\n      var _iterator35, _step35, vertex;\n\n      return _regeneratorRuntime.wrap(function matrixFormulaNodes$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator35 = _createForOfIteratorHelper(this.graph.nodes);\n              _context.prev = 1;\n\n              _iterator35.s();\n\n            case 3:\n              if ((_step35 = _iterator35.n()).done) {\n                _context.next = 10;\n                break;\n              }\n\n              vertex = _step35.value;\n\n              if (!(vertex instanceof MatrixVertex && vertex.isFormula())) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 8;\n              return vertex;\n\n            case 8:\n              _context.next = 3;\n              break;\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator35.e(_context.t0);\n\n            case 15:\n              _context.prev = 15;\n\n              _iterator35.f();\n\n              return _context.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, matrixFormulaNodes, this, [[1, 12, 15, 18]]);\n    })\n  }, {\n    key: \"entriesFromRowsSpan\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entriesFromRowsSpan(rowsSpan) {\n      return _regeneratorRuntime.wrap(function entriesFromRowsSpan$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.delegateYield(this.addressMapping.entriesFromRowsSpan(rowsSpan), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, entriesFromRowsSpan, this);\n    })\n  }, {\n    key: \"entriesFromColumnsSpan\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entriesFromColumnsSpan(columnsSpan) {\n      return _regeneratorRuntime.wrap(function entriesFromColumnsSpan$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.delegateYield(this.addressMapping.entriesFromColumnsSpan(columnsSpan), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, entriesFromColumnsSpan, this);\n    })\n  }, {\n    key: \"existsVertex\",\n    value: function existsVertex(address) {\n      return this.addressMapping.has(address);\n    }\n  }, {\n    key: \"fetchCell\",\n    value: function fetchCell(address) {\n      return this.addressMapping.fetchCell(address);\n    }\n  }, {\n    key: \"getCell\",\n    value: function getCell(address) {\n      return this.addressMapping.getCell(address);\n    }\n  }, {\n    key: \"getCellValue\",\n    value: function getCellValue(address) {\n      return this.addressMapping.getCellValue(address);\n    }\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue(address) {\n      return this.addressMapping.getRawValue(address);\n    }\n  }, {\n    key: \"getScalarValue\",\n    value: function getScalarValue(address) {\n      var value = this.addressMapping.getCellValue(address);\n\n      if (value instanceof SimpleRangeValue) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ScalarExpected);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"setVertexAddress\",\n    value: function setVertexAddress(address, vertex) {\n      this.addressMapping.setCell(address, vertex);\n    }\n  }, {\n    key: \"existsEdge\",\n    value: function existsEdge(fromNode, toNode) {\n      return this.graph.existsEdge(fromNode, toNode);\n    }\n  }, {\n    key: \"getSheetId\",\n    value: function getSheetId(sheetName) {\n      return this.sheetMapping.fetch(sheetName);\n    }\n  }, {\n    key: \"getSheetName\",\n    value: function getSheetName(sheetId) {\n      return this.sheetMapping.fetchDisplayName(sheetId);\n    }\n  }, {\n    key: \"getSheetHeight\",\n    value: function getSheetHeight(sheet) {\n      return this.addressMapping.getHeight(sheet);\n    }\n  }, {\n    key: \"getSheetWidth\",\n    value: function getSheetWidth(sheet) {\n      return this.addressMapping.getWidth(sheet);\n    }\n  }, {\n    key: \"getMatrix\",\n    value: function getMatrix(range) {\n      return this.matrixMapping.getMatrix(range);\n    }\n  }, {\n    key: \"setMatrix\",\n    value: function setMatrix(range, vertex) {\n      this.matrixMapping.setMatrix(range, vertex);\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(start, end) {\n      return this.rangeMapping.getRange(start, end);\n    }\n  }, {\n    key: \"topSortWithScc\",\n    value: function topSortWithScc() {\n      return this.graph.topSortWithScc();\n    }\n  }, {\n    key: \"markAsVolatile\",\n    value: function markAsVolatile(vertex) {\n      this.graph.markNodeAsSpecial(vertex);\n    }\n  }, {\n    key: \"markAsDependentOnStructureChange\",\n    value: function markAsDependentOnStructureChange(vertex) {\n      this.graph.markNodeAsChangingWithStructure(vertex);\n    }\n  }, {\n    key: \"forceApplyPostponedTransformations\",\n    value: function forceApplyPostponedTransformations() {\n      var _iterator36 = _createForOfIteratorHelper(this.graph.nodes.values()),\n          _step36;\n\n      try {\n        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n          var vertex = _step36.value;\n\n          if (vertex instanceof FormulaCellVertex) {\n            vertex.ensureRecentData(this.lazilyTransformingAstService);\n          }\n        }\n      } catch (err) {\n        _iterator36.e(err);\n      } finally {\n        _iterator36.f();\n      }\n    }\n  }, {\n    key: \"volatileVertices\",\n    value: function volatileVertices() {\n      return this.graph.specialNodes;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.graph.destroy();\n      this.addressMapping.destroy();\n      this.rangeMapping.destroy();\n      this.sheetMapping.destroy();\n      this.matrixMapping.destroy();\n    }\n  }, {\n    key: \"verticesFromRange\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function verticesFromRange(range) {\n      var _iterator37, _step37, address, vertex;\n\n      return _regeneratorRuntime.wrap(function verticesFromRange$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iterator37 = _createForOfIteratorHelper(range.addresses(this));\n              _context4.prev = 1;\n\n              _iterator37.s();\n\n            case 3:\n              if ((_step37 = _iterator37.n()).done) {\n                _context4.next = 11;\n                break;\n              }\n\n              address = _step37.value;\n              vertex = this.getCell(address);\n\n              if (!vertex) {\n                _context4.next = 9;\n                break;\n              }\n\n              _context4.next = 9;\n              return vertex;\n\n            case 9:\n              _context4.next = 3;\n              break;\n\n            case 11:\n              _context4.next = 16;\n              break;\n\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](1);\n\n              _iterator37.e(_context4.t0);\n\n            case 16:\n              _context4.prev = 16;\n\n              _iterator37.f();\n\n              return _context4.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, verticesFromRange, this, [[1, 13, 16, 19]]);\n    })\n  }, {\n    key: \"rawValuesFromRange\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function rawValuesFromRange(range) {\n      var _iterator38, _step38, address, value;\n\n      return _regeneratorRuntime.wrap(function rawValuesFromRange$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _iterator38 = _createForOfIteratorHelper(range.addresses(this));\n              _context5.prev = 1;\n\n              _iterator38.s();\n\n            case 3:\n              if ((_step38 = _iterator38.n()).done) {\n                _context5.next = 11;\n                break;\n              }\n\n              address = _step38.value;\n              value = this.getScalarValue(address);\n\n              if (!(value !== EmptyValue)) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.next = 9;\n              return [getRawValue(value), address];\n\n            case 9:\n              _context5.next = 3;\n              break;\n\n            case 11:\n              _context5.next = 16;\n              break;\n\n            case 13:\n              _context5.prev = 13;\n              _context5.t0 = _context5[\"catch\"](1);\n\n              _iterator38.e(_context5.t0);\n\n            case 16:\n              _context5.prev = 16;\n\n              _iterator38.f();\n\n              return _context5.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, rawValuesFromRange, this, [[1, 13, 16, 19]]);\n    })\n  }, {\n    key: \"entriesFromRange\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entriesFromRange(range) {\n      var _iterator39, _step39, address;\n\n      return _regeneratorRuntime.wrap(function entriesFromRange$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _iterator39 = _createForOfIteratorHelper(range.addresses(this));\n              _context6.prev = 1;\n\n              _iterator39.s();\n\n            case 3:\n              if ((_step39 = _iterator39.n()).done) {\n                _context6.next = 9;\n                break;\n              }\n\n              address = _step39.value;\n              _context6.next = 7;\n              return [address, this.getCell(address)];\n\n            case 7:\n              _context6.next = 3;\n              break;\n\n            case 9:\n              _context6.next = 14;\n              break;\n\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](1);\n\n              _iterator39.e(_context6.t0);\n\n            case 14:\n              _context6.prev = 14;\n\n              _iterator39.f();\n\n              return _context6.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, entriesFromRange, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"exchangeGraphNode\",\n    value: function exchangeGraphNode(oldNode, newNode) {\n      var _this8 = this;\n\n      this.graph.addNode(newNode);\n      var adjNodesStored = this.graph.adjacentNodes(oldNode);\n      this.removeVertex(oldNode);\n      adjNodesStored.forEach(function (adjacentNode) {\n        if (_this8.graph.hasNode(adjacentNode)) {\n          _this8.graph.addEdge(newNode, adjacentNode);\n        }\n      });\n    }\n  }, {\n    key: \"exchangeOrAddGraphNode\",\n    value: function exchangeOrAddGraphNode(oldNode, newNode) {\n      if (oldNode) {\n        this.exchangeGraphNode(oldNode, newNode);\n      } else {\n        this.graph.addNode(newNode);\n      }\n    }\n  }, {\n    key: \"computeListOfValuesInRange\",\n    value: function computeListOfValuesInRange(range) {\n      var values = [];\n\n      var _iterator40 = _createForOfIteratorHelper(range.addresses(this)),\n          _step40;\n\n      try {\n        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n          var cellFromRange = _step40.value;\n          var value = this.getScalarValue(cellFromRange);\n          values.push(value);\n        }\n      } catch (err) {\n        _iterator40.e(err);\n      } finally {\n        _iterator40.f();\n      }\n\n      return values;\n    }\n  }, {\n    key: \"addStructuralNodesToChangeSet\",\n    value: function addStructuralNodesToChangeSet() {\n      var _iterator41 = _createForOfIteratorHelper(this.graph.specialNodesStructuralChanges),\n          _step41;\n\n      try {\n        for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n          var vertex = _step41.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator41.e(err);\n      } finally {\n        _iterator41.f();\n      }\n    }\n  }, {\n    key: \"fixRangesWhenAddingRows\",\n    value: function fixRangesWhenAddingRows(sheet, row, numberOfRows) {\n      var originalValues = Array.from(this.rangeMapping.rangesInSheet(sheet));\n\n      for (var _i2 = 0, _originalValues = originalValues; _i2 < _originalValues.length; _i2++) {\n        var rangeVertex = _originalValues[_i2];\n\n        if (rangeVertex.range.includesRow(row + numberOfRows)) {\n          if (rangeVertex.bruteForce) {\n            var addedSubrangeInThatRange = rangeVertex.range.rangeWithSameWidth(row, numberOfRows);\n\n            var _iterator42 = _createForOfIteratorHelper(addedSubrangeInThatRange.addresses(this)),\n                _step42;\n\n            try {\n              for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {\n                var address = _step42.value;\n                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);\n              }\n            } catch (err) {\n              _iterator42.e(err);\n            } finally {\n              _iterator42.f();\n            }\n          } else {\n            var currentRangeVertex = rangeVertex;\n            var find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);\n\n            if (find.smallerRangeVertex !== null) {\n              continue;\n            }\n\n            while (find.smallerRangeVertex === null) {\n              var newRangeVertex = new RangeVertex(AbsoluteCellRange.spanFrom(currentRangeVertex.range.start, currentRangeVertex.range.width(), currentRangeVertex.range.height() - 1));\n              this.rangeMapping.setRange(newRangeVertex);\n              this.graph.addNode(newRangeVertex);\n              var restRange = new AbsoluteCellRange(simpleCellAddress(currentRangeVertex.range.start.sheet, currentRangeVertex.range.start.col, currentRangeVertex.range.end.row), currentRangeVertex.range.end);\n              this.addAllFromRange(restRange, currentRangeVertex);\n              this.graph.addEdge(newRangeVertex, currentRangeVertex);\n              currentRangeVertex = newRangeVertex;\n              find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);\n            }\n\n            this.graph.addEdge(find.smallerRangeVertex, currentRangeVertex);\n            this.addAllFromRange(find.restRange, currentRangeVertex);\n            this.graph.removeEdge(find.smallerRangeVertex, rangeVertex);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"addAllFromRange\",\n    value: function addAllFromRange(range, vertex) {\n      var _iterator43 = _createForOfIteratorHelper(range.addresses(this)),\n          _step43;\n\n      try {\n        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n          var address = _step43.value;\n          this.graph.addEdge(this.fetchCellOrCreateEmpty(address), vertex);\n        }\n      } catch (err) {\n        _iterator43.e(err);\n      } finally {\n        _iterator43.f();\n      }\n    }\n  }, {\n    key: \"fixRangesWhenAddingColumns\",\n    value: function fixRangesWhenAddingColumns(sheet, column, numberOfColumns) {\n      var _iterator44 = _createForOfIteratorHelper(this.rangeMapping.rangesInSheet(sheet)),\n          _step44;\n\n      try {\n        for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {\n          var rangeVertex = _step44.value;\n\n          if (rangeVertex.range.includesColumn(column + numberOfColumns)) {\n            var subrange = void 0;\n\n            if (rangeVertex.bruteForce) {\n              subrange = rangeVertex.range.rangeWithSameHeight(column, numberOfColumns);\n            } else {\n              subrange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheet, column, rangeVertex.range.end.row), numberOfColumns, 1);\n            }\n\n            var _iterator45 = _createForOfIteratorHelper(subrange.addresses(this)),\n                _step45;\n\n            try {\n              for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n                var address = _step45.value;\n                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);\n              }\n            } catch (err) {\n              _iterator45.e(err);\n            } finally {\n              _iterator45.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator44.e(err);\n      } finally {\n        _iterator44.f();\n      }\n    }\n  }, {\n    key: \"setAddressMappingForMatrixVertex\",\n    value: function setAddressMappingForMatrixVertex(vertex, formulaAddress) {\n      this.setVertexAddress(formulaAddress, vertex);\n\n      if (!(vertex instanceof MatrixVertex)) {\n        return;\n      }\n\n      var range = AbsoluteCellRange.spanFrom(formulaAddress, vertex.width, vertex.height);\n      this.setMatrix(range, vertex);\n\n      var _iterator46 = _createForOfIteratorHelper(range.addresses(this)),\n          _step46;\n\n      try {\n        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n          var address = _step46.value;\n          this.setVertexAddress(address, vertex);\n        }\n      } catch (err) {\n        _iterator46.e(err);\n      } finally {\n        _iterator46.f();\n      }\n    }\n  }, {\n    key: \"truncateMatricesAfterRemovingRows\",\n    value: function truncateMatricesAfterRemovingRows(removedRows) {\n      var _this9 = this;\n\n      var verticesToRemove = this.matrixMapping.truncateMatricesByRows(removedRows);\n      verticesToRemove.forEach(function (vertex) {\n        _this9.removeVertex(vertex);\n      });\n    }\n  }, {\n    key: \"truncateRanges\",\n    value: function truncateRanges(span, coordinate) {\n      var _this$rangeMapping$tr = this.rangeMapping.truncateRanges(span, coordinate),\n          verticesToRemove = _this$rangeMapping$tr.verticesToRemove,\n          verticesToMerge = _this$rangeMapping$tr.verticesToMerge;\n\n      var _iterator47 = _createForOfIteratorHelper(verticesToMerge),\n          _step47;\n\n      try {\n        for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n          var _step47$value = _slicedToArray(_step47.value, 2),\n              existingVertex = _step47$value[0],\n              mergedVertex = _step47$value[1];\n\n          this.mergeRangeVertices(existingVertex, mergedVertex);\n        }\n      } catch (err) {\n        _iterator47.e(err);\n      } finally {\n        _iterator47.f();\n      }\n\n      var _iterator48 = _createForOfIteratorHelper(verticesToRemove),\n          _step48;\n\n      try {\n        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n          var rangeVertex = _step48.value;\n          this.removeVertexAndCleanupDependencies(rangeVertex);\n        }\n      } catch (err) {\n        _iterator48.e(err);\n      } finally {\n        _iterator48.f();\n      }\n    }\n  }, {\n    key: \"truncateMatricesAfterRemovingColumns\",\n    value: function truncateMatricesAfterRemovingColumns(removedColumns) {\n      var _this10 = this;\n\n      var verticesToRemove = this.matrixMapping.truncateMatricesByColumns(removedColumns);\n      verticesToRemove.forEach(function (vertex) {\n        _this10.removeVertex(vertex);\n      });\n    }\n  }, {\n    key: \"expandMatricesAfterAddingRows\",\n    value: function expandMatricesAfterAddingRows(sheet, rowStart, numberOfRows) {\n      var _iterator49 = _createForOfIteratorHelper(this.matrixMapping.numericMatricesInRows(RowsSpan.fromRowStartAndEnd(sheet, rowStart, rowStart))),\n          _step49;\n\n      try {\n        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n          var _step49$value = _slicedToArray(_step49.value, 2),\n              matrix = _step49$value[1];\n\n          matrix.addRows(sheet, rowStart, numberOfRows);\n          var addedRange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheet, matrix.getAddress().col, rowStart), matrix.width, numberOfRows);\n\n          var _iterator50 = _createForOfIteratorHelper(addedRange.addresses(this)),\n              _step50;\n\n          try {\n            for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {\n              var address = _step50.value;\n              this.addressMapping.setCell(address, matrix);\n            }\n          } catch (err) {\n            _iterator50.e(err);\n          } finally {\n            _iterator50.f();\n          }\n        }\n      } catch (err) {\n        _iterator49.e(err);\n      } finally {\n        _iterator49.f();\n      }\n    }\n  }, {\n    key: \"expandMatricesAfterAddingColumns\",\n    value: function expandMatricesAfterAddingColumns(sheet, columnStart, numberOfColumns) {\n      var _iterator51 = _createForOfIteratorHelper(this.matrixMapping.numericMatricesInColumns(ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart, columnStart))),\n          _step51;\n\n      try {\n        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {\n          var _step51$value = _slicedToArray(_step51.value, 2),\n              matrix = _step51$value[1];\n\n          matrix.addColumns(sheet, columnStart, numberOfColumns);\n          var addedRange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheet, columnStart, matrix.getAddress().row), numberOfColumns, matrix.height);\n\n          var _iterator52 = _createForOfIteratorHelper(addedRange.addresses(this)),\n              _step52;\n\n          try {\n            for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {\n              var address = _step52.value;\n              this.addressMapping.setCell(address, matrix);\n            }\n          } catch (err) {\n            _iterator52.e(err);\n          } finally {\n            _iterator52.f();\n          }\n        }\n      } catch (err) {\n        _iterator51.e(err);\n      } finally {\n        _iterator51.f();\n      }\n    }\n  }, {\n    key: \"removeVertex\",\n    value: function removeVertex(vertex) {\n      this.removeVertexAndCleanupDependencies(vertex);\n\n      if (vertex instanceof RangeVertex) {\n        this.rangeMapping.removeRange(vertex);\n      }\n    }\n  }, {\n    key: \"mergeRangeVertices\",\n    value: function mergeRangeVertices(existingVertex, newVertex) {\n      var _this11 = this;\n\n      var adjNodesStored = this.graph.adjacentNodes(newVertex);\n      this.removeVertexAndCleanupDependencies(newVertex);\n      this.graph.softRemoveEdge(existingVertex, newVertex);\n      adjNodesStored.forEach(function (adjacentNode) {\n        if (_this11.graph.hasNode(adjacentNode)) {\n          _this11.graph.addEdge(existingVertex, adjacentNode);\n        }\n      });\n    }\n  }, {\n    key: \"removeVertexAndCleanupDependencies\",\n    value: function removeVertexAndCleanupDependencies(inputVertex) {\n      var dependencies = new Set(this.graph.removeNode(inputVertex));\n\n      while (dependencies.size > 0) {\n        var vertex = dependencies.values().next().value;\n        dependencies.delete(vertex);\n\n        if (this.graph.hasNode(vertex) && this.graph.adjacentNodesCount(vertex) === 0) {\n          if (vertex instanceof RangeVertex || vertex instanceof EmptyCellVertex) {\n            this.graph.removeNode(vertex).forEach(function (candidate) {\n              return dependencies.add(candidate);\n            });\n          }\n\n          if (vertex instanceof RangeVertex) {\n            this.rangeMapping.removeRange(vertex);\n          } else if (vertex instanceof EmptyCellVertex) {\n            this.addressMapping.removeCell(vertex.address);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getAdjacentNodesAddresses\",\n    value: function getAdjacentNodesAddresses(inputVertex) {\n      var _this12 = this;\n\n      var deps = this.graph.adjacentNodes(inputVertex);\n      var ret = [];\n      deps.forEach(function (vertex) {\n        var castVertex = vertex;\n\n        if (castVertex instanceof RangeVertex) {\n          ret.push(new AbsoluteCellRange(castVertex.start, castVertex.end));\n        } else if (castVertex instanceof FormulaCellVertex) {\n          ret.push(castVertex.getAddress(_this12.lazilyTransformingAstService));\n        } else {\n          ret.push(castVertex.getAddress());\n        }\n      });\n      return ret;\n    }\n  }], [{\n    key: \"buildEmpty\",\n    value: function buildEmpty(lazilyTransformingAstService, config, functionRegistry, namedExpressions, stats) {\n      var addressMapping = new AddressMapping(config.chooseAddressMappingPolicy);\n      var rangeMapping = new RangeMapping();\n      return new DependencyGraph(addressMapping, rangeMapping, new SheetMapping(config.translationPackage), new MatrixMapping(), stats, lazilyTransformingAstService, functionRegistry, namedExpressions);\n    }\n  }]);\n\n  return DependencyGraph;\n}();","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/DependencyGraph/DependencyGraph.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Array","from","isArray","_arrayLikeToArray","_createForOfIteratorHelper","o","allowArrayLike","it","length","i","F","s","n","done","value","e","_e2","f","normalCompletion","didErr","err","call","step","next","_e3","return","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","minLen","Object","prototype","toString","slice","constructor","name","test","len","arr2","_i","_arr","_n","_d","_s","_e","push","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","assert","AbsoluteCellRange","absolutizeDependencies","CellError","ErrorType","simpleCellAddress","ErrorMessage","SimpleRangeValue","collectDependencies","NamedExpressionDependency","ColumnsSpan","RowsSpan","StatType","EmptyCellVertex","FormulaCellVertex","MatrixVertex","RangeVertex","ValueCellVertex","AddressMapping","collectAddressesDependentToMatrix","Graph","MatrixMapping","RangeMapping","SheetMapping","EmptyValue","getRawValue","DependencyGraph","addressMapping","rangeMapping","sheetMapping","matrixMapping","stats","lazilyTransformingAstService","functionRegistry","namedExpressions","_this","dependencyQueryAddresses","vertex","rangeDependencyQuery","map","_ref","_ref2","address","_","dependenciesResult","formulaDependencyQuery","undefined","_dependenciesResult","dependencies","dependency","namedExpression","namedExpressionOrPlaceholder","sheet","dependencyQueryVertices","_ref3","_ref4","v","_dependenciesResult2","fetchRange","start","end","fetchCell","allDeps","_this$rangeMapping$fi","findSmallerRange","range","smallerRangeVertex","restRange","graph","adjacentNodes","has","_iterator","addresses","_step","cell","getCell","formula","getAddress","getFormula","isFormula","deps","setFormulaToCell","ast","hasVolatileFunction","hasStructuralChangeFunction","ensureThatVertexIsNonMatrixCellVertex","newVertex","version","exchangeOrAddGraphNode","setCell","processCellDependencies","markNodeAsSpecialRecentlyChanged","markAsVolatile","markAsDependentOnStructureChange","correctInfiniteRangesDependency","setParsingErrorToCell","errorVertex","setValueToCell","oldValue","getValues","rawValue","setValues","parsedValue","setCellEmpty","size","emptyVertex","exchangeGraphNode","adjacentNodesCount","removeVertex","removeCell","ok","clearRecentlyChangedVertices","clearSpecialNodesRecentlyChanged","verticesToRecompute","Set","concat","specialNodesRecentlyChanged","volatileVertices","cellDependencies","endVertex","_this2","forEach","dep","rangeVertex","getRange","setRange","addNode","isFinite","markNodeAsInfiniteRange","_this2$rangeMapping$f","addEdge","bruteForce","_iterator2","_step2","cellFromRange","removeEdge","matrix","getMatrix","_iterator3","_step3","_cellFromRange","fetchCellOrCreateEmpty","correctInfiniteRangesDependenciesByRangeVertex","sheetOfVertex","namedExpressionVertex","fetchNamedExpressionVertex","expressionName","sheetId","exchangeNode","addressFrom","addressTo","vertexFrom","vertexTo","_iterator4","infiniteRanges","_step4","infiniteRangeVertex","intersection","intersectionWith","_iterator5","_step5","_iterator6","_step6","addressInRange","removeRows","removedRows","_this3","isFormulaMatrixInRows","Error","measure","ADJUSTING_GRAPH","_iterator7","verticesFromRowsSpan","_step7","_iterator8","_step8","adjacentNode","ADJUSTING_MATRIX_MAPPING","truncateMatricesAfterRemovingRows","ADJUSTING_ADDRESS_MAPPING","ADJUSTING_RANGES","truncateRanges","row","addStructuralNodesToChangeSet","removeSheet","removedSheetId","_this4","matrices","_iterator9","sheetEntries","_step9","_step9$value","adr","add","_iterator12","_step12","_iterator10","values","_step10","removeMatrix","rangesToRemove","removeRangesInSheet","_iterator11","_step11","clearSheet","_iterator13","_step13","_step13$value","_iterator14","_step14","setMatrixEmpty","removeColumns","removedColumns","_this5","isFormulaMatrixInColumns","_iterator15","verticesFromColumnsSpan","_step15","_iterator16","_step16","truncateMatricesAfterRemovingColumns","col","addRows","addedRows","_this6","rowStart","numberOfRows","expandMatricesAfterAddingRows","moveAllRangesInSheetAfterRowByRows","fixRangesWhenAddingRows","_iterator17","_step17","addColumns","addedColumns","_this7","columnStart","numberOfColumns","expandMatricesAfterAddingColumns","moveAllRangesInSheetAfterColumnByColumns","fixRangesWhenAddingColumns","_iterator18","_step18","ensureNoMatrixInRange","isFormulaMatrixInRange","moveCells","sourceRange","toRight","toBottom","toSheet","_iterator19","addressesWithDirection","_step19","sourceAddress","targetAddress","sourceVertex","targetVertex","_iterator21","_step21","containsRange","_iterator22","_step22","_adjacentNode","_iterator20","rangeVerticesContainedInRange","_step20","_iterator23","_step23","_adjacentNode2","_iterator24","_step24","newEmptyVertex","moveRangesInsideSourceRange","disableNumericMatrices","_iterator25","numericMatrices","_step25","_step25$value","matrixVertex","breakNumericMatrix","breakNumericMatricesInRange","_iterator26","numericMatricesInRange","_step26","_step26$value","matrixRange","spanFrom","width","height","_iterator27","_step27","valueVertex","getCellValue","addVertex","_iterator28","_step28","nodeDependencies","_iterator29","_step29","_address","_iterator30","_step30","_iterator31","_step31","_iterator32","_step32","_address2","setVertexAddress","addMatrixVertex","setAddressMappingForMatrixVertex","addNewMatrixVertex","_iterator33","verticesFromRange","_step33","setMatrix","_iterator34","entriesFromRange","_step34","_step34$value","_vertex","mark","matrixFormulaNodes","_iterator35","_step35","wrap","matrixFormulaNodes$","_context","prev","nodes","t0","finish","stop","entriesFromRowsSpan","rowsSpan","entriesFromRowsSpan$","_context2","delegateYield","entriesFromColumnsSpan","columnsSpan","entriesFromColumnsSpan$","_context3","existsVertex","getScalarValue","VALUE","ScalarExpected","existsEdge","fromNode","toNode","getSheetId","sheetName","fetch","getSheetName","fetchDisplayName","getSheetHeight","getHeight","getSheetWidth","getWidth","topSortWithScc","markNodeAsSpecial","markNodeAsChangingWithStructure","forceApplyPostponedTransformations","_iterator36","_step36","ensureRecentData","specialNodes","destroy","_iterator37","_step37","verticesFromRange$","_context4","rawValuesFromRange","_iterator38","_step38","rawValuesFromRange$","_context5","_iterator39","_step39","entriesFromRange$","_context6","oldNode","newNode","_this8","adjNodesStored","hasNode","computeListOfValuesInRange","_iterator40","_step40","_iterator41","specialNodesStructuralChanges","_step41","originalValues","rangesInSheet","_i2","_originalValues","includesRow","addedSubrangeInThatRange","rangeWithSameWidth","_iterator42","_step42","currentRangeVertex","find","newRangeVertex","addAllFromRange","_iterator43","_step43","column","_iterator44","_step44","includesColumn","subrange","rangeWithSameHeight","_iterator45","_step45","formulaAddress","_iterator46","_step46","_this9","verticesToRemove","truncateMatricesByRows","span","coordinate","_this$rangeMapping$tr","verticesToMerge","_iterator47","_step47","_step47$value","existingVertex","mergedVertex","mergeRangeVertices","_iterator48","_step48","removeVertexAndCleanupDependencies","_this10","truncateMatricesByColumns","_iterator49","numericMatricesInRows","fromRowStartAndEnd","_step49","_step49$value","addedRange","_iterator50","_step50","_iterator51","numericMatricesInColumns","fromColumnStartAndEnd","_step51","_step51$value","_iterator52","_step52","removeRange","_this11","softRemoveEdge","inputVertex","removeNode","delete","candidate","getAdjacentNodesAddresses","_this12","ret","castVertex","buildEmpty","config","chooseAddressMappingPolicy","translationPackage"],"mappings":"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","sourcesContent":["import \"regenerator-runtime/runtime.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport assert from 'assert';\nimport { AbsoluteCellRange } from '../AbsoluteCellRange';\nimport { absolutizeDependencies } from '../absolutizeDependencies';\nimport { CellError, ErrorType, simpleCellAddress } from '../Cell';\nimport { ErrorMessage } from '../error-message';\nimport { SimpleRangeValue } from '../interpreter/SimpleRangeValue';\nimport { collectDependencies, NamedExpressionDependency } from '../parser';\nimport { ColumnsSpan, RowsSpan } from '../Span';\nimport { StatType } from '../statistics';\nimport { EmptyCellVertex, FormulaCellVertex, MatrixVertex, RangeVertex, ValueCellVertex } from './';\nimport { AddressMapping } from './AddressMapping/AddressMapping';\nimport { collectAddressesDependentToMatrix } from './collectAddressesDependentToMatrix';\nimport { Graph } from './Graph';\nimport { MatrixMapping } from './MatrixMapping';\nimport { RangeMapping } from './RangeMapping';\nimport { SheetMapping } from './SheetMapping';\nimport { EmptyValue, getRawValue } from '../interpreter/InterpreterValue';\nexport var DependencyGraph = /*#__PURE__*/function () {\n  function DependencyGraph(addressMapping, rangeMapping, sheetMapping, matrixMapping, stats, lazilyTransformingAstService, functionRegistry, namedExpressions) {\n    var _this = this;\n\n    _classCallCheck(this, DependencyGraph);\n\n    this.addressMapping = addressMapping;\n    this.rangeMapping = rangeMapping;\n    this.sheetMapping = sheetMapping;\n    this.matrixMapping = matrixMapping;\n    this.stats = stats;\n    this.lazilyTransformingAstService = lazilyTransformingAstService;\n    this.functionRegistry = functionRegistry;\n    this.namedExpressions = namedExpressions;\n\n    this.dependencyQueryAddresses = function (vertex) {\n      if (vertex instanceof RangeVertex) {\n        return _this.rangeDependencyQuery(vertex).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              address = _ref2[0],\n              _ = _ref2[1];\n\n          return address;\n        });\n      } else {\n        var dependenciesResult = _this.formulaDependencyQuery(vertex);\n\n        if (dependenciesResult !== undefined) {\n          var _dependenciesResult = _slicedToArray(dependenciesResult, 2),\n              address = _dependenciesResult[0],\n              dependencies = _dependenciesResult[1];\n\n          return dependencies.map(function (dependency) {\n            if (dependency instanceof NamedExpressionDependency) {\n              var namedExpression = _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet);\n\n              return namedExpression.address;\n            } else {\n              return dependency;\n            }\n          });\n        } else {\n          return undefined;\n        }\n      }\n    };\n\n    this.dependencyQueryVertices = function (vertex) {\n      if (vertex instanceof RangeVertex) {\n        return _this.rangeDependencyQuery(vertex).map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              _ = _ref4[0],\n              v = _ref4[1];\n\n          return v;\n        });\n      } else {\n        var dependenciesResult = _this.formulaDependencyQuery(vertex);\n\n        if (dependenciesResult !== undefined) {\n          var _dependenciesResult2 = _slicedToArray(dependenciesResult, 2),\n              address = _dependenciesResult2[0],\n              dependencies = _dependenciesResult2[1];\n\n          return dependencies.map(function (dependency) {\n            if (dependency instanceof AbsoluteCellRange) {\n              return _this.rangeMapping.fetchRange(dependency.start, dependency.end);\n            } else if (dependency instanceof NamedExpressionDependency) {\n              var namedExpression = _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet);\n\n              return _this.addressMapping.fetchCell(namedExpression.address);\n            } else {\n              return _this.addressMapping.fetchCell(dependency);\n            }\n          });\n        } else {\n          return undefined;\n        }\n      }\n    };\n\n    this.rangeDependencyQuery = function (vertex) {\n      var allDeps = [];\n\n      var _this$rangeMapping$fi = _this.rangeMapping.findSmallerRange(vertex.range),\n          smallerRangeVertex = _this$rangeMapping$fi.smallerRangeVertex,\n          restRange = _this$rangeMapping$fi.restRange; //checking whether this range was splitted by bruteForce or not\n\n\n      var range;\n\n      if (smallerRangeVertex !== null && _this.graph.adjacentNodes(smallerRangeVertex).has(vertex)) {\n        range = restRange;\n        allDeps.push([new AbsoluteCellRange(smallerRangeVertex.start, smallerRangeVertex.end), smallerRangeVertex]);\n      } else {\n        //did we ever need to use full range\n        range = vertex.range;\n      }\n\n      var _iterator = _createForOfIteratorHelper(range.addresses(_this)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var address = _step.value;\n\n          var cell = _this.addressMapping.getCell(address);\n\n          if (cell instanceof EmptyCellVertex) {\n            cell.address = address;\n          }\n\n          if (cell !== null) {\n            allDeps.push([address, cell]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return allDeps;\n    };\n\n    this.formulaDependencyQuery = function (vertex) {\n      var formula;\n      var address;\n\n      if (vertex instanceof FormulaCellVertex) {\n        address = vertex.getAddress(_this.lazilyTransformingAstService);\n        formula = vertex.getFormula(_this.lazilyTransformingAstService);\n      } else if (vertex instanceof MatrixVertex && vertex.isFormula()) {\n        address = vertex.getAddress();\n        formula = vertex.getFormula();\n      } else {\n        return undefined;\n      }\n\n      var deps = collectDependencies(formula, _this.functionRegistry);\n      return [address, absolutizeDependencies(deps, address)];\n    };\n\n    this.graph = new Graph(this.dependencyQueryVertices);\n  }\n  /*\n   * Invariants:\n   * - empty cell has associated EmptyCellVertex if and only if it is a dependency (possibly indirect, through range) to some formula\n   */\n\n\n  _createClass(DependencyGraph, [{\n    key: \"setFormulaToCell\",\n    value: function setFormulaToCell(address, ast, dependencies, hasVolatileFunction, hasStructuralChangeFunction) {\n      var vertex = this.addressMapping.getCell(address);\n      this.ensureThatVertexIsNonMatrixCellVertex(vertex);\n      var newVertex = new FormulaCellVertex(ast, address, this.lazilyTransformingAstService.version());\n      this.exchangeOrAddGraphNode(vertex, newVertex);\n      this.addressMapping.setCell(address, newVertex);\n      this.processCellDependencies(dependencies, newVertex);\n      this.graph.markNodeAsSpecialRecentlyChanged(newVertex);\n\n      if (hasVolatileFunction) {\n        this.markAsVolatile(newVertex);\n      }\n\n      if (hasStructuralChangeFunction) {\n        this.markAsDependentOnStructureChange(newVertex);\n      }\n\n      this.correctInfiniteRangesDependency(address);\n    }\n  }, {\n    key: \"setParsingErrorToCell\",\n    value: function setParsingErrorToCell(address, errorVertex) {\n      var vertex = this.addressMapping.getCell(address);\n      this.ensureThatVertexIsNonMatrixCellVertex(vertex);\n      this.exchangeOrAddGraphNode(vertex, errorVertex);\n      this.addressMapping.setCell(address, errorVertex);\n      this.graph.markNodeAsSpecialRecentlyChanged(errorVertex);\n      this.correctInfiniteRangesDependency(address);\n    }\n  }, {\n    key: \"setValueToCell\",\n    value: function setValueToCell(address, value) {\n      var vertex = this.addressMapping.getCell(address);\n      this.ensureThatVertexIsNonMatrixCellVertex(vertex);\n\n      if (vertex instanceof ValueCellVertex) {\n        var oldValue = vertex.getValues();\n\n        if (oldValue.rawValue !== value.rawValue) {\n          vertex.setValues(value);\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } else {\n        var newVertex = new ValueCellVertex(value.parsedValue, value.rawValue);\n        this.exchangeOrAddGraphNode(vertex, newVertex);\n        this.addressMapping.setCell(address, newVertex);\n        this.graph.markNodeAsSpecialRecentlyChanged(newVertex);\n      }\n\n      this.correctInfiniteRangesDependency(address);\n    }\n  }, {\n    key: \"setCellEmpty\",\n    value: function setCellEmpty(address) {\n      var vertex = this.addressMapping.getCell(address);\n\n      if (vertex === null) {\n        return;\n      }\n\n      this.ensureThatVertexIsNonMatrixCellVertex(vertex);\n\n      if (this.graph.adjacentNodes(vertex).size > 0) {\n        var emptyVertex = new EmptyCellVertex(address);\n        this.exchangeGraphNode(vertex, emptyVertex);\n\n        if (this.graph.adjacentNodesCount(emptyVertex) === 0) {\n          this.removeVertex(emptyVertex);\n          this.addressMapping.removeCell(address);\n        } else {\n          this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);\n          this.addressMapping.setCell(address, emptyVertex);\n        }\n      } else {\n        this.removeVertex(vertex);\n        this.addressMapping.removeCell(address);\n      }\n    }\n  }, {\n    key: \"ensureThatVertexIsNonMatrixCellVertex\",\n    value: function ensureThatVertexIsNonMatrixCellVertex(vertex) {\n      assert.ok(!(vertex instanceof MatrixVertex), 'Illegal operation');\n    }\n  }, {\n    key: \"clearRecentlyChangedVertices\",\n    value: function clearRecentlyChangedVertices() {\n      this.graph.clearSpecialNodesRecentlyChanged();\n    }\n  }, {\n    key: \"verticesToRecompute\",\n    value: function verticesToRecompute() {\n      return new Set([].concat(_toConsumableArray(this.graph.specialNodesRecentlyChanged), _toConsumableArray(this.volatileVertices())));\n    }\n  }, {\n    key: \"processCellDependencies\",\n    value: function processCellDependencies(cellDependencies, endVertex) {\n      var _this2 = this;\n\n      cellDependencies.forEach(function (dep) {\n        if (dep instanceof AbsoluteCellRange) {\n          var range = dep;\n\n          var rangeVertex = _this2.getRange(range.start, range.end);\n\n          if (rangeVertex === undefined) {\n            rangeVertex = new RangeVertex(range);\n\n            _this2.rangeMapping.setRange(rangeVertex);\n          }\n\n          _this2.graph.addNode(rangeVertex);\n\n          if (!range.isFinite()) {\n            _this2.graph.markNodeAsInfiniteRange(rangeVertex);\n          }\n\n          var _this2$rangeMapping$f = _this2.rangeMapping.findSmallerRange(range),\n              smallerRangeVertex = _this2$rangeMapping$f.smallerRangeVertex,\n              restRange = _this2$rangeMapping$f.restRange;\n\n          if (smallerRangeVertex) {\n            _this2.graph.addEdge(smallerRangeVertex, rangeVertex);\n\n            if (rangeVertex.bruteForce) {\n              rangeVertex.bruteForce = false;\n\n              var _iterator2 = _createForOfIteratorHelper(range.addresses(_this2)),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var cellFromRange = _step2.value;\n\n                  //if we ever switch heuristic to processing by sorted sizes, this would be unnecessary\n                  _this2.graph.removeEdge(_this2.fetchCell(cellFromRange), rangeVertex);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } else {\n            rangeVertex.bruteForce = true;\n          }\n\n          var matrix = _this2.matrixMapping.getMatrix(restRange);\n\n          if (matrix !== undefined) {\n            _this2.graph.addEdge(matrix, rangeVertex);\n          } else {\n            var _iterator3 = _createForOfIteratorHelper(restRange.addresses(_this2)),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _cellFromRange = _step3.value;\n\n                _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(_cellFromRange), rangeVertex);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n\n          _this2.graph.addEdge(rangeVertex, endVertex);\n\n          if (range.isFinite()) {\n            _this2.correctInfiniteRangesDependenciesByRangeVertex(rangeVertex);\n          }\n        } else if (dep instanceof NamedExpressionDependency) {\n          var sheetOfVertex = endVertex.getAddress(_this2.lazilyTransformingAstService).sheet;\n\n          var namedExpressionVertex = _this2.fetchNamedExpressionVertex(dep.name, sheetOfVertex);\n\n          _this2.graph.addEdge(namedExpressionVertex, endVertex);\n        } else {\n          _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(dep), endVertex);\n        }\n      });\n    }\n  }, {\n    key: \"fetchNamedExpressionVertex\",\n    value: function fetchNamedExpressionVertex(expressionName, sheetId) {\n      var namedExpression = this.namedExpressions.namedExpressionOrPlaceholder(expressionName, sheetId);\n      return this.fetchCellOrCreateEmpty(namedExpression.address);\n    }\n  }, {\n    key: \"exchangeNode\",\n    value: function exchangeNode(addressFrom, addressTo) {\n      var vertexFrom = this.fetchCellOrCreateEmpty(addressFrom);\n      var vertexTo = this.fetchCellOrCreateEmpty(addressTo);\n      this.addressMapping.removeCell(addressFrom);\n      this.exchangeGraphNode(vertexFrom, vertexTo);\n    }\n  }, {\n    key: \"correctInfiniteRangesDependenciesByRangeVertex\",\n    value: function correctInfiniteRangesDependenciesByRangeVertex(vertex) {\n      var _iterator4 = _createForOfIteratorHelper(this.graph.infiniteRanges),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var range = _step4.value;\n          var infiniteRangeVertex = range;\n          var intersection = vertex.range.intersectionWith(infiniteRangeVertex.range);\n\n          if (intersection === null) {\n            continue;\n          }\n\n          var _iterator5 = _createForOfIteratorHelper(intersection.addresses(this)),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var address = _step5.value;\n              this.graph.addEdge(this.fetchCellOrCreateEmpty(address), range);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"correctInfiniteRangesDependency\",\n    value: function correctInfiniteRangesDependency(address) {\n      var vertex = null;\n\n      var _iterator6 = _createForOfIteratorHelper(this.graph.infiniteRanges),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var range = _step6.value;\n          var infiniteRangeVertex = range;\n\n          if (infiniteRangeVertex.range.addressInRange(address)) {\n            vertex = vertex || this.fetchCellOrCreateEmpty(address);\n            this.graph.addEdge(vertex, infiniteRangeVertex);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"fetchCellOrCreateEmpty\",\n    value: function fetchCellOrCreateEmpty(address) {\n      var vertex = this.addressMapping.getCell(address);\n\n      if (!vertex) {\n        vertex = new EmptyCellVertex(address);\n        this.graph.addNode(vertex);\n        this.addressMapping.setCell(address, vertex);\n      }\n\n      return vertex;\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(removedRows) {\n      var _this3 = this;\n\n      if (this.matrixMapping.isFormulaMatrixInRows(removedRows)) {\n        throw Error('It is not possible to remove row with matrix');\n      }\n\n      this.stats.measure(StatType.ADJUSTING_GRAPH, function () {\n        var _iterator7 = _createForOfIteratorHelper(_this3.addressMapping.verticesFromRowsSpan(removedRows)),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var vertex = _step7.value;\n\n            var _iterator8 = _createForOfIteratorHelper(_this3.graph.adjacentNodes(vertex)),\n                _step8;\n\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var adjacentNode = _step8.value;\n\n                _this3.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n\n            if (vertex instanceof MatrixVertex) {\n              continue;\n            }\n\n            _this3.removeVertex(vertex);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        _this3.truncateMatricesAfterRemovingRows(removedRows);\n      });\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this3.addressMapping.removeRows(removedRows);\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        _this3.truncateRanges(removedRows, function (address) {\n          return address.row;\n        });\n      });\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"removeSheet\",\n    value: function removeSheet(removedSheetId) {\n      var _this4 = this;\n\n      var matrices = new Set();\n\n      var _iterator9 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(removedSheetId)),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _step9$value = _slicedToArray(_step9.value, 2),\n              adr = _step9$value[0],\n              vertex = _step9$value[1];\n\n          if (vertex instanceof MatrixVertex) {\n            if (matrices.has(vertex)) {\n              continue;\n            } else {\n              matrices.add(vertex);\n            }\n          }\n\n          var _iterator12 = _createForOfIteratorHelper(this.graph.adjacentNodes(vertex)),\n              _step12;\n\n          try {\n            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n              var adjacentNode = _step12.value;\n              this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n            }\n          } catch (err) {\n            _iterator12.e(err);\n          } finally {\n            _iterator12.f();\n          }\n\n          this.removeVertex(vertex);\n          this.addressMapping.removeCell(adr);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        var _iterator10 = _createForOfIteratorHelper(matrices.values()),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var matrix = _step10.value;\n\n            _this4.matrixMapping.removeMatrix(matrix.getRange());\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var rangesToRemove = _this4.rangeMapping.removeRangesInSheet(removedSheetId);\n\n        var _iterator11 = _createForOfIteratorHelper(rangesToRemove),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var range = _step11.value;\n\n            _this4.removeVertex(range);\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n\n        _this4.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n          _this4.addressMapping.removeSheet(removedSheetId);\n        });\n      });\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"clearSheet\",\n    value: function clearSheet(sheetId) {\n      var matrices = new Set();\n\n      var _iterator13 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(sheetId)),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _step13$value = _slicedToArray(_step13.value, 2),\n              address = _step13$value[0],\n              vertex = _step13$value[1];\n\n          if (vertex instanceof MatrixVertex) {\n            matrices.add(vertex);\n          } else {\n            this.setCellEmpty(address);\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n\n      var _iterator14 = _createForOfIteratorHelper(matrices.values()),\n          _step14;\n\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var matrix = _step14.value;\n          this.setMatrixEmpty(matrix);\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(removedColumns) {\n      var _this5 = this;\n\n      if (this.matrixMapping.isFormulaMatrixInColumns(removedColumns)) {\n        throw Error('It is not possible to remove column within matrix');\n      }\n\n      this.stats.measure(StatType.ADJUSTING_GRAPH, function () {\n        var _iterator15 = _createForOfIteratorHelper(_this5.addressMapping.verticesFromColumnsSpan(removedColumns)),\n            _step15;\n\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var vertex = _step15.value;\n\n            var _iterator16 = _createForOfIteratorHelper(_this5.graph.adjacentNodes(vertex)),\n                _step16;\n\n            try {\n              for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n                var adjacentNode = _step16.value;\n\n                _this5.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n              }\n            } catch (err) {\n              _iterator16.e(err);\n            } finally {\n              _iterator16.f();\n            }\n\n            if (vertex instanceof MatrixVertex) {\n              continue;\n            }\n\n            _this5.removeVertex(vertex);\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        _this5.truncateMatricesAfterRemovingColumns(removedColumns);\n      });\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this5.addressMapping.removeColumns(removedColumns);\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        _this5.truncateRanges(removedColumns, function (address) {\n          return address.col;\n        });\n      });\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"addRows\",\n    value: function addRows(addedRows) {\n      var _this6 = this;\n\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this6.addressMapping.addRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        _this6.expandMatricesAfterAddingRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        _this6.rangeMapping.moveAllRangesInSheetAfterRowByRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n\n        _this6.fixRangesWhenAddingRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n\n      var _iterator17 = _createForOfIteratorHelper(this.addressMapping.verticesFromRowsSpan(addedRows)),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var vertex = _step17.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"addColumns\",\n    value: function addColumns(addedColumns) {\n      var _this7 = this;\n\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this7.addressMapping.addColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n      this.stats.measure(StatType.ADJUSTING_MATRIX_MAPPING, function () {\n        _this7.expandMatricesAfterAddingColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        _this7.rangeMapping.moveAllRangesInSheetAfterColumnByColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n\n        _this7.fixRangesWhenAddingColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n\n      var _iterator18 = _createForOfIteratorHelper(this.addressMapping.verticesFromColumnsSpan(addedColumns)),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var vertex = _step18.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"ensureNoMatrixInRange\",\n    value: function ensureNoMatrixInRange(range) {\n      if (this.matrixMapping.isFormulaMatrixInRange(range)) {\n        throw Error('It is not possible to move / replace cells with matrix');\n      }\n    }\n  }, {\n    key: \"moveCells\",\n    value: function moveCells(sourceRange, toRight, toBottom, toSheet) {\n      var _iterator19 = _createForOfIteratorHelper(sourceRange.addressesWithDirection(toRight, toBottom, this)),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var sourceAddress = _step19.value;\n          var targetAddress = simpleCellAddress(toSheet, sourceAddress.col + toRight, sourceAddress.row + toBottom);\n          var sourceVertex = this.addressMapping.getCell(sourceAddress);\n          var targetVertex = this.addressMapping.getCell(targetAddress);\n          this.addressMapping.removeCell(sourceAddress);\n\n          if (sourceVertex !== null) {\n            this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);\n            this.addressMapping.setCell(targetAddress, sourceVertex);\n            var emptyVertex = null;\n\n            var _iterator21 = _createForOfIteratorHelper(this.graph.adjacentNodes(sourceVertex)),\n                _step21;\n\n            try {\n              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                var adjacentNode = _step21.value;\n\n                if (adjacentNode instanceof RangeVertex && !sourceRange.containsRange(adjacentNode.range)) {\n                  emptyVertex = emptyVertex || this.fetchCellOrCreateEmpty(sourceAddress);\n                  this.graph.addEdge(emptyVertex, adjacentNode);\n                  this.graph.removeEdge(sourceVertex, adjacentNode);\n                }\n              }\n            } catch (err) {\n              _iterator21.e(err);\n            } finally {\n              _iterator21.f();\n            }\n\n            if (emptyVertex) {\n              this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);\n              this.addressMapping.setCell(sourceAddress, emptyVertex);\n            }\n          }\n\n          if (targetVertex !== null) {\n            if (sourceVertex === null) {\n              this.addressMapping.removeCell(targetAddress);\n            }\n\n            var _iterator22 = _createForOfIteratorHelper(this.graph.adjacentNodes(targetVertex)),\n                _step22;\n\n            try {\n              for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n                var _adjacentNode = _step22.value;\n                sourceVertex = sourceVertex !== null && sourceVertex !== void 0 ? sourceVertex : this.fetchCellOrCreateEmpty(targetAddress);\n                this.graph.addEdge(sourceVertex, _adjacentNode);\n                this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);\n              }\n            } catch (err) {\n              _iterator22.e(err);\n            } finally {\n              _iterator22.f();\n            }\n\n            this.removeVertex(targetVertex);\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      var _iterator20 = _createForOfIteratorHelper(this.rangeMapping.rangeVerticesContainedInRange(sourceRange)),\n          _step20;\n\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var rangeVertex = _step20.value;\n\n          var _iterator23 = _createForOfIteratorHelper(this.graph.adjacentNodes(rangeVertex)),\n              _step23;\n\n          try {\n            for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n              var _adjacentNode2 = _step23.value;\n\n              if (_adjacentNode2 instanceof RangeVertex && !sourceRange.containsRange(_adjacentNode2.range)) {\n                this.graph.removeEdge(rangeVertex, _adjacentNode2);\n\n                var _iterator24 = _createForOfIteratorHelper(rangeVertex.range.addresses(this)),\n                    _step24;\n\n                try {\n                  for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n                    var address = _step24.value;\n                    var newEmptyVertex = this.fetchCellOrCreateEmpty(address);\n                    this.graph.addEdge(newEmptyVertex, _adjacentNode2);\n                    this.addressMapping.setCell(address, newEmptyVertex);\n                    this.graph.markNodeAsSpecialRecentlyChanged(newEmptyVertex);\n                  }\n                } catch (err) {\n                  _iterator24.e(err);\n                } finally {\n                  _iterator24.f();\n                }\n              }\n            }\n          } catch (err) {\n            _iterator23.e(err);\n          } finally {\n            _iterator23.f();\n          }\n        }\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n\n      this.rangeMapping.moveRangesInsideSourceRange(sourceRange, toRight, toBottom, toSheet);\n    }\n  }, {\n    key: \"disableNumericMatrices\",\n    value: function disableNumericMatrices() {\n      var _iterator25 = _createForOfIteratorHelper(this.matrixMapping.numericMatrices()),\n          _step25;\n\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var _step25$value = _slicedToArray(_step25.value, 2),\n              _ = _step25$value[0],\n              matrixVertex = _step25$value[1];\n\n          this.breakNumericMatrix(matrixVertex);\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n    }\n  }, {\n    key: \"breakNumericMatricesInRange\",\n    value: function breakNumericMatricesInRange(range) {\n      var _iterator26 = _createForOfIteratorHelper(this.matrixMapping.numericMatricesInRange(range)),\n          _step26;\n\n      try {\n        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n          var _step26$value = _slicedToArray(_step26.value, 2),\n              _ = _step26$value[0],\n              matrix = _step26$value[1];\n\n          this.breakNumericMatrix(matrix);\n        }\n      } catch (err) {\n        _iterator26.e(err);\n      } finally {\n        _iterator26.f();\n      }\n    }\n  }, {\n    key: \"breakNumericMatrix\",\n    value: function breakNumericMatrix(matrixVertex) {\n      var matrixRange = AbsoluteCellRange.spanFrom(matrixVertex.getAddress(), matrixVertex.width, matrixVertex.height);\n      var adjacentNodes = this.graph.adjacentNodes(matrixVertex);\n\n      var _iterator27 = _createForOfIteratorHelper(matrixRange.addresses(this)),\n          _step27;\n\n      try {\n        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n          var address = _step27.value;\n          // We wouldn't need that typecast if we would take values from Matrix\n          var valueVertex = new ValueCellVertex(this.getCellValue(address), this.getRawValue(address));\n          this.addVertex(address, valueVertex);\n        }\n      } catch (err) {\n        _iterator27.e(err);\n      } finally {\n        _iterator27.f();\n      }\n\n      var _iterator28 = _createForOfIteratorHelper(adjacentNodes.values()),\n          _step28;\n\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var adjacentNode = _step28.value;\n          var nodeDependencies = collectAddressesDependentToMatrix(this.functionRegistry, adjacentNode, matrixVertex, this.lazilyTransformingAstService, this);\n\n          var _iterator29 = _createForOfIteratorHelper(nodeDependencies),\n              _step29;\n\n          try {\n            for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n              var _address = _step29.value;\n              var vertex = this.fetchCell(_address);\n              this.graph.addEdge(vertex, adjacentNode);\n            }\n          } catch (err) {\n            _iterator29.e(err);\n          } finally {\n            _iterator29.f();\n          }\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n\n      this.removeVertex(matrixVertex);\n      this.matrixMapping.removeMatrix(matrixVertex.getRange());\n    }\n  }, {\n    key: \"setMatrixEmpty\",\n    value: function setMatrixEmpty(matrixVertex) {\n      var matrixRange = AbsoluteCellRange.spanFrom(matrixVertex.getAddress(), matrixVertex.width, matrixVertex.height);\n      var adjacentNodes = this.graph.adjacentNodes(matrixVertex);\n\n      var _iterator30 = _createForOfIteratorHelper(matrixRange.addresses(this)),\n          _step30;\n\n      try {\n        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n          var address = _step30.value;\n          this.addressMapping.removeCell(address);\n        }\n      } catch (err) {\n        _iterator30.e(err);\n      } finally {\n        _iterator30.f();\n      }\n\n      var _iterator31 = _createForOfIteratorHelper(adjacentNodes.values()),\n          _step31;\n\n      try {\n        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n          var adjacentNode = _step31.value;\n          var nodeDependencies = collectAddressesDependentToMatrix(this.functionRegistry, adjacentNode, matrixVertex, this.lazilyTransformingAstService, this);\n\n          var _iterator32 = _createForOfIteratorHelper(nodeDependencies),\n              _step32;\n\n          try {\n            for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n              var _address2 = _step32.value;\n              var vertex = this.fetchCellOrCreateEmpty(_address2);\n              this.graph.addEdge(vertex, adjacentNode);\n            }\n          } catch (err) {\n            _iterator32.e(err);\n          } finally {\n            _iterator32.f();\n          }\n\n          if (nodeDependencies.length > 0) {\n            this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n          }\n        }\n      } catch (err) {\n        _iterator31.e(err);\n      } finally {\n        _iterator31.f();\n      }\n\n      this.removeVertex(matrixVertex);\n      this.matrixMapping.removeMatrix(matrixVertex.getRange());\n    }\n  }, {\n    key: \"addVertex\",\n    value: function addVertex(address, vertex) {\n      this.graph.addNode(vertex);\n      this.setVertexAddress(address, vertex);\n    }\n  }, {\n    key: \"addMatrixVertex\",\n    value: function addMatrixVertex(address, vertex) {\n      this.graph.addNode(vertex);\n      this.setAddressMappingForMatrixVertex(vertex, address);\n    }\n  }, {\n    key: \"addNewMatrixVertex\",\n    value: function addNewMatrixVertex(matrixVertex) {\n      var range = AbsoluteCellRange.spanFrom(matrixVertex.getAddress(), matrixVertex.width, matrixVertex.height);\n\n      var _iterator33 = _createForOfIteratorHelper(this.verticesFromRange(range)),\n          _step33;\n\n      try {\n        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n          var vertex = _step33.value;\n\n          if (vertex instanceof MatrixVertex) {\n            throw Error('You cannot modify only part of an array');\n          }\n        }\n      } catch (err) {\n        _iterator33.e(err);\n      } finally {\n        _iterator33.f();\n      }\n\n      this.setMatrix(range, matrixVertex);\n\n      var _iterator34 = _createForOfIteratorHelper(this.entriesFromRange(range)),\n          _step34;\n\n      try {\n        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n          var _step34$value = _slicedToArray(_step34.value, 2),\n              address = _step34$value[0],\n              _vertex = _step34$value[1];\n\n          if (_vertex) {\n            this.exchangeGraphNode(_vertex, matrixVertex);\n          }\n\n          this.setVertexAddress(address, matrixVertex);\n        }\n      } catch (err) {\n        _iterator34.e(err);\n      } finally {\n        _iterator34.f();\n      }\n    }\n  }, {\n    key: \"matrixFormulaNodes\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function matrixFormulaNodes() {\n      var _iterator35, _step35, vertex;\n\n      return regeneratorRuntime.wrap(function matrixFormulaNodes$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator35 = _createForOfIteratorHelper(this.graph.nodes);\n              _context.prev = 1;\n\n              _iterator35.s();\n\n            case 3:\n              if ((_step35 = _iterator35.n()).done) {\n                _context.next = 10;\n                break;\n              }\n\n              vertex = _step35.value;\n\n              if (!(vertex instanceof MatrixVertex && vertex.isFormula())) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 8;\n              return vertex;\n\n            case 8:\n              _context.next = 3;\n              break;\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator35.e(_context.t0);\n\n            case 15:\n              _context.prev = 15;\n\n              _iterator35.f();\n\n              return _context.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, matrixFormulaNodes, this, [[1, 12, 15, 18]]);\n    })\n  }, {\n    key: \"entriesFromRowsSpan\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromRowsSpan(rowsSpan) {\n      return regeneratorRuntime.wrap(function entriesFromRowsSpan$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.delegateYield(this.addressMapping.entriesFromRowsSpan(rowsSpan), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, entriesFromRowsSpan, this);\n    })\n  }, {\n    key: \"entriesFromColumnsSpan\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromColumnsSpan(columnsSpan) {\n      return regeneratorRuntime.wrap(function entriesFromColumnsSpan$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.delegateYield(this.addressMapping.entriesFromColumnsSpan(columnsSpan), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, entriesFromColumnsSpan, this);\n    })\n  }, {\n    key: \"existsVertex\",\n    value: function existsVertex(address) {\n      return this.addressMapping.has(address);\n    }\n  }, {\n    key: \"fetchCell\",\n    value: function fetchCell(address) {\n      return this.addressMapping.fetchCell(address);\n    }\n  }, {\n    key: \"getCell\",\n    value: function getCell(address) {\n      return this.addressMapping.getCell(address);\n    }\n  }, {\n    key: \"getCellValue\",\n    value: function getCellValue(address) {\n      return this.addressMapping.getCellValue(address);\n    }\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue(address) {\n      return this.addressMapping.getRawValue(address);\n    }\n  }, {\n    key: \"getScalarValue\",\n    value: function getScalarValue(address) {\n      var value = this.addressMapping.getCellValue(address);\n\n      if (value instanceof SimpleRangeValue) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ScalarExpected);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"setVertexAddress\",\n    value: function setVertexAddress(address, vertex) {\n      this.addressMapping.setCell(address, vertex);\n    }\n  }, {\n    key: \"existsEdge\",\n    value: function existsEdge(fromNode, toNode) {\n      return this.graph.existsEdge(fromNode, toNode);\n    }\n  }, {\n    key: \"getSheetId\",\n    value: function getSheetId(sheetName) {\n      return this.sheetMapping.fetch(sheetName);\n    }\n  }, {\n    key: \"getSheetName\",\n    value: function getSheetName(sheetId) {\n      return this.sheetMapping.fetchDisplayName(sheetId);\n    }\n  }, {\n    key: \"getSheetHeight\",\n    value: function getSheetHeight(sheet) {\n      return this.addressMapping.getHeight(sheet);\n    }\n  }, {\n    key: \"getSheetWidth\",\n    value: function getSheetWidth(sheet) {\n      return this.addressMapping.getWidth(sheet);\n    }\n  }, {\n    key: \"getMatrix\",\n    value: function getMatrix(range) {\n      return this.matrixMapping.getMatrix(range);\n    }\n  }, {\n    key: \"setMatrix\",\n    value: function setMatrix(range, vertex) {\n      this.matrixMapping.setMatrix(range, vertex);\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(start, end) {\n      return this.rangeMapping.getRange(start, end);\n    }\n  }, {\n    key: \"topSortWithScc\",\n    value: function topSortWithScc() {\n      return this.graph.topSortWithScc();\n    }\n  }, {\n    key: \"markAsVolatile\",\n    value: function markAsVolatile(vertex) {\n      this.graph.markNodeAsSpecial(vertex);\n    }\n  }, {\n    key: \"markAsDependentOnStructureChange\",\n    value: function markAsDependentOnStructureChange(vertex) {\n      this.graph.markNodeAsChangingWithStructure(vertex);\n    }\n  }, {\n    key: \"forceApplyPostponedTransformations\",\n    value: function forceApplyPostponedTransformations() {\n      var _iterator36 = _createForOfIteratorHelper(this.graph.nodes.values()),\n          _step36;\n\n      try {\n        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n          var vertex = _step36.value;\n\n          if (vertex instanceof FormulaCellVertex) {\n            vertex.ensureRecentData(this.lazilyTransformingAstService);\n          }\n        }\n      } catch (err) {\n        _iterator36.e(err);\n      } finally {\n        _iterator36.f();\n      }\n    }\n  }, {\n    key: \"volatileVertices\",\n    value: function volatileVertices() {\n      return this.graph.specialNodes;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.graph.destroy();\n      this.addressMapping.destroy();\n      this.rangeMapping.destroy();\n      this.sheetMapping.destroy();\n      this.matrixMapping.destroy();\n    }\n  }, {\n    key: \"verticesFromRange\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromRange(range) {\n      var _iterator37, _step37, address, vertex;\n\n      return regeneratorRuntime.wrap(function verticesFromRange$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iterator37 = _createForOfIteratorHelper(range.addresses(this));\n              _context4.prev = 1;\n\n              _iterator37.s();\n\n            case 3:\n              if ((_step37 = _iterator37.n()).done) {\n                _context4.next = 11;\n                break;\n              }\n\n              address = _step37.value;\n              vertex = this.getCell(address);\n\n              if (!vertex) {\n                _context4.next = 9;\n                break;\n              }\n\n              _context4.next = 9;\n              return vertex;\n\n            case 9:\n              _context4.next = 3;\n              break;\n\n            case 11:\n              _context4.next = 16;\n              break;\n\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](1);\n\n              _iterator37.e(_context4.t0);\n\n            case 16:\n              _context4.prev = 16;\n\n              _iterator37.f();\n\n              return _context4.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, verticesFromRange, this, [[1, 13, 16, 19]]);\n    })\n  }, {\n    key: \"rawValuesFromRange\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function rawValuesFromRange(range) {\n      var _iterator38, _step38, address, value;\n\n      return regeneratorRuntime.wrap(function rawValuesFromRange$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _iterator38 = _createForOfIteratorHelper(range.addresses(this));\n              _context5.prev = 1;\n\n              _iterator38.s();\n\n            case 3:\n              if ((_step38 = _iterator38.n()).done) {\n                _context5.next = 11;\n                break;\n              }\n\n              address = _step38.value;\n              value = this.getScalarValue(address);\n\n              if (!(value !== EmptyValue)) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.next = 9;\n              return [getRawValue(value), address];\n\n            case 9:\n              _context5.next = 3;\n              break;\n\n            case 11:\n              _context5.next = 16;\n              break;\n\n            case 13:\n              _context5.prev = 13;\n              _context5.t0 = _context5[\"catch\"](1);\n\n              _iterator38.e(_context5.t0);\n\n            case 16:\n              _context5.prev = 16;\n\n              _iterator38.f();\n\n              return _context5.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, rawValuesFromRange, this, [[1, 13, 16, 19]]);\n    })\n  }, {\n    key: \"entriesFromRange\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromRange(range) {\n      var _iterator39, _step39, address;\n\n      return regeneratorRuntime.wrap(function entriesFromRange$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _iterator39 = _createForOfIteratorHelper(range.addresses(this));\n              _context6.prev = 1;\n\n              _iterator39.s();\n\n            case 3:\n              if ((_step39 = _iterator39.n()).done) {\n                _context6.next = 9;\n                break;\n              }\n\n              address = _step39.value;\n              _context6.next = 7;\n              return [address, this.getCell(address)];\n\n            case 7:\n              _context6.next = 3;\n              break;\n\n            case 9:\n              _context6.next = 14;\n              break;\n\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](1);\n\n              _iterator39.e(_context6.t0);\n\n            case 14:\n              _context6.prev = 14;\n\n              _iterator39.f();\n\n              return _context6.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, entriesFromRange, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"exchangeGraphNode\",\n    value: function exchangeGraphNode(oldNode, newNode) {\n      var _this8 = this;\n\n      this.graph.addNode(newNode);\n      var adjNodesStored = this.graph.adjacentNodes(oldNode);\n      this.removeVertex(oldNode);\n      adjNodesStored.forEach(function (adjacentNode) {\n        if (_this8.graph.hasNode(adjacentNode)) {\n          _this8.graph.addEdge(newNode, adjacentNode);\n        }\n      });\n    }\n  }, {\n    key: \"exchangeOrAddGraphNode\",\n    value: function exchangeOrAddGraphNode(oldNode, newNode) {\n      if (oldNode) {\n        this.exchangeGraphNode(oldNode, newNode);\n      } else {\n        this.graph.addNode(newNode);\n      }\n    }\n  }, {\n    key: \"computeListOfValuesInRange\",\n    value: function computeListOfValuesInRange(range) {\n      var values = [];\n\n      var _iterator40 = _createForOfIteratorHelper(range.addresses(this)),\n          _step40;\n\n      try {\n        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n          var cellFromRange = _step40.value;\n          var value = this.getScalarValue(cellFromRange);\n          values.push(value);\n        }\n      } catch (err) {\n        _iterator40.e(err);\n      } finally {\n        _iterator40.f();\n      }\n\n      return values;\n    }\n  }, {\n    key: \"addStructuralNodesToChangeSet\",\n    value: function addStructuralNodesToChangeSet() {\n      var _iterator41 = _createForOfIteratorHelper(this.graph.specialNodesStructuralChanges),\n          _step41;\n\n      try {\n        for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n          var vertex = _step41.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator41.e(err);\n      } finally {\n        _iterator41.f();\n      }\n    }\n  }, {\n    key: \"fixRangesWhenAddingRows\",\n    value: function fixRangesWhenAddingRows(sheet, row, numberOfRows) {\n      var originalValues = Array.from(this.rangeMapping.rangesInSheet(sheet));\n\n      for (var _i2 = 0, _originalValues = originalValues; _i2 < _originalValues.length; _i2++) {\n        var rangeVertex = _originalValues[_i2];\n\n        if (rangeVertex.range.includesRow(row + numberOfRows)) {\n          if (rangeVertex.bruteForce) {\n            var addedSubrangeInThatRange = rangeVertex.range.rangeWithSameWidth(row, numberOfRows);\n\n            var _iterator42 = _createForOfIteratorHelper(addedSubrangeInThatRange.addresses(this)),\n                _step42;\n\n            try {\n              for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {\n                var address = _step42.value;\n                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);\n              }\n            } catch (err) {\n              _iterator42.e(err);\n            } finally {\n              _iterator42.f();\n            }\n          } else {\n            var currentRangeVertex = rangeVertex;\n            var find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);\n\n            if (find.smallerRangeVertex !== null) {\n              continue;\n            }\n\n            while (find.smallerRangeVertex === null) {\n              var newRangeVertex = new RangeVertex(AbsoluteCellRange.spanFrom(currentRangeVertex.range.start, currentRangeVertex.range.width(), currentRangeVertex.range.height() - 1));\n              this.rangeMapping.setRange(newRangeVertex);\n              this.graph.addNode(newRangeVertex);\n              var restRange = new AbsoluteCellRange(simpleCellAddress(currentRangeVertex.range.start.sheet, currentRangeVertex.range.start.col, currentRangeVertex.range.end.row), currentRangeVertex.range.end);\n              this.addAllFromRange(restRange, currentRangeVertex);\n              this.graph.addEdge(newRangeVertex, currentRangeVertex);\n              currentRangeVertex = newRangeVertex;\n              find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);\n            }\n\n            this.graph.addEdge(find.smallerRangeVertex, currentRangeVertex);\n            this.addAllFromRange(find.restRange, currentRangeVertex);\n            this.graph.removeEdge(find.smallerRangeVertex, rangeVertex);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"addAllFromRange\",\n    value: function addAllFromRange(range, vertex) {\n      var _iterator43 = _createForOfIteratorHelper(range.addresses(this)),\n          _step43;\n\n      try {\n        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n          var address = _step43.value;\n          this.graph.addEdge(this.fetchCellOrCreateEmpty(address), vertex);\n        }\n      } catch (err) {\n        _iterator43.e(err);\n      } finally {\n        _iterator43.f();\n      }\n    }\n  }, {\n    key: \"fixRangesWhenAddingColumns\",\n    value: function fixRangesWhenAddingColumns(sheet, column, numberOfColumns) {\n      var _iterator44 = _createForOfIteratorHelper(this.rangeMapping.rangesInSheet(sheet)),\n          _step44;\n\n      try {\n        for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {\n          var rangeVertex = _step44.value;\n\n          if (rangeVertex.range.includesColumn(column + numberOfColumns)) {\n            var subrange = void 0;\n\n            if (rangeVertex.bruteForce) {\n              subrange = rangeVertex.range.rangeWithSameHeight(column, numberOfColumns);\n            } else {\n              subrange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheet, column, rangeVertex.range.end.row), numberOfColumns, 1);\n            }\n\n            var _iterator45 = _createForOfIteratorHelper(subrange.addresses(this)),\n                _step45;\n\n            try {\n              for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n                var address = _step45.value;\n                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);\n              }\n            } catch (err) {\n              _iterator45.e(err);\n            } finally {\n              _iterator45.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator44.e(err);\n      } finally {\n        _iterator44.f();\n      }\n    }\n  }, {\n    key: \"setAddressMappingForMatrixVertex\",\n    value: function setAddressMappingForMatrixVertex(vertex, formulaAddress) {\n      this.setVertexAddress(formulaAddress, vertex);\n\n      if (!(vertex instanceof MatrixVertex)) {\n        return;\n      }\n\n      var range = AbsoluteCellRange.spanFrom(formulaAddress, vertex.width, vertex.height);\n      this.setMatrix(range, vertex);\n\n      var _iterator46 = _createForOfIteratorHelper(range.addresses(this)),\n          _step46;\n\n      try {\n        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n          var address = _step46.value;\n          this.setVertexAddress(address, vertex);\n        }\n      } catch (err) {\n        _iterator46.e(err);\n      } finally {\n        _iterator46.f();\n      }\n    }\n  }, {\n    key: \"truncateMatricesAfterRemovingRows\",\n    value: function truncateMatricesAfterRemovingRows(removedRows) {\n      var _this9 = this;\n\n      var verticesToRemove = this.matrixMapping.truncateMatricesByRows(removedRows);\n      verticesToRemove.forEach(function (vertex) {\n        _this9.removeVertex(vertex);\n      });\n    }\n  }, {\n    key: \"truncateRanges\",\n    value: function truncateRanges(span, coordinate) {\n      var _this$rangeMapping$tr = this.rangeMapping.truncateRanges(span, coordinate),\n          verticesToRemove = _this$rangeMapping$tr.verticesToRemove,\n          verticesToMerge = _this$rangeMapping$tr.verticesToMerge;\n\n      var _iterator47 = _createForOfIteratorHelper(verticesToMerge),\n          _step47;\n\n      try {\n        for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n          var _step47$value = _slicedToArray(_step47.value, 2),\n              existingVertex = _step47$value[0],\n              mergedVertex = _step47$value[1];\n\n          this.mergeRangeVertices(existingVertex, mergedVertex);\n        }\n      } catch (err) {\n        _iterator47.e(err);\n      } finally {\n        _iterator47.f();\n      }\n\n      var _iterator48 = _createForOfIteratorHelper(verticesToRemove),\n          _step48;\n\n      try {\n        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n          var rangeVertex = _step48.value;\n          this.removeVertexAndCleanupDependencies(rangeVertex);\n        }\n      } catch (err) {\n        _iterator48.e(err);\n      } finally {\n        _iterator48.f();\n      }\n    }\n  }, {\n    key: \"truncateMatricesAfterRemovingColumns\",\n    value: function truncateMatricesAfterRemovingColumns(removedColumns) {\n      var _this10 = this;\n\n      var verticesToRemove = this.matrixMapping.truncateMatricesByColumns(removedColumns);\n      verticesToRemove.forEach(function (vertex) {\n        _this10.removeVertex(vertex);\n      });\n    }\n  }, {\n    key: \"expandMatricesAfterAddingRows\",\n    value: function expandMatricesAfterAddingRows(sheet, rowStart, numberOfRows) {\n      var _iterator49 = _createForOfIteratorHelper(this.matrixMapping.numericMatricesInRows(RowsSpan.fromRowStartAndEnd(sheet, rowStart, rowStart))),\n          _step49;\n\n      try {\n        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n          var _step49$value = _slicedToArray(_step49.value, 2),\n              matrix = _step49$value[1];\n\n          matrix.addRows(sheet, rowStart, numberOfRows);\n          var addedRange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheet, matrix.getAddress().col, rowStart), matrix.width, numberOfRows);\n\n          var _iterator50 = _createForOfIteratorHelper(addedRange.addresses(this)),\n              _step50;\n\n          try {\n            for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {\n              var address = _step50.value;\n              this.addressMapping.setCell(address, matrix);\n            }\n          } catch (err) {\n            _iterator50.e(err);\n          } finally {\n            _iterator50.f();\n          }\n        }\n      } catch (err) {\n        _iterator49.e(err);\n      } finally {\n        _iterator49.f();\n      }\n    }\n  }, {\n    key: \"expandMatricesAfterAddingColumns\",\n    value: function expandMatricesAfterAddingColumns(sheet, columnStart, numberOfColumns) {\n      var _iterator51 = _createForOfIteratorHelper(this.matrixMapping.numericMatricesInColumns(ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart, columnStart))),\n          _step51;\n\n      try {\n        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {\n          var _step51$value = _slicedToArray(_step51.value, 2),\n              matrix = _step51$value[1];\n\n          matrix.addColumns(sheet, columnStart, numberOfColumns);\n          var addedRange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheet, columnStart, matrix.getAddress().row), numberOfColumns, matrix.height);\n\n          var _iterator52 = _createForOfIteratorHelper(addedRange.addresses(this)),\n              _step52;\n\n          try {\n            for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {\n              var address = _step52.value;\n              this.addressMapping.setCell(address, matrix);\n            }\n          } catch (err) {\n            _iterator52.e(err);\n          } finally {\n            _iterator52.f();\n          }\n        }\n      } catch (err) {\n        _iterator51.e(err);\n      } finally {\n        _iterator51.f();\n      }\n    }\n  }, {\n    key: \"removeVertex\",\n    value: function removeVertex(vertex) {\n      this.removeVertexAndCleanupDependencies(vertex);\n\n      if (vertex instanceof RangeVertex) {\n        this.rangeMapping.removeRange(vertex);\n      }\n    }\n  }, {\n    key: \"mergeRangeVertices\",\n    value: function mergeRangeVertices(existingVertex, newVertex) {\n      var _this11 = this;\n\n      var adjNodesStored = this.graph.adjacentNodes(newVertex);\n      this.removeVertexAndCleanupDependencies(newVertex);\n      this.graph.softRemoveEdge(existingVertex, newVertex);\n      adjNodesStored.forEach(function (adjacentNode) {\n        if (_this11.graph.hasNode(adjacentNode)) {\n          _this11.graph.addEdge(existingVertex, adjacentNode);\n        }\n      });\n    }\n  }, {\n    key: \"removeVertexAndCleanupDependencies\",\n    value: function removeVertexAndCleanupDependencies(inputVertex) {\n      var dependencies = new Set(this.graph.removeNode(inputVertex));\n\n      while (dependencies.size > 0) {\n        var vertex = dependencies.values().next().value;\n        dependencies.delete(vertex);\n\n        if (this.graph.hasNode(vertex) && this.graph.adjacentNodesCount(vertex) === 0) {\n          if (vertex instanceof RangeVertex || vertex instanceof EmptyCellVertex) {\n            this.graph.removeNode(vertex).forEach(function (candidate) {\n              return dependencies.add(candidate);\n            });\n          }\n\n          if (vertex instanceof RangeVertex) {\n            this.rangeMapping.removeRange(vertex);\n          } else if (vertex instanceof EmptyCellVertex) {\n            this.addressMapping.removeCell(vertex.address);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getAdjacentNodesAddresses\",\n    value: function getAdjacentNodesAddresses(inputVertex) {\n      var _this12 = this;\n\n      var deps = this.graph.adjacentNodes(inputVertex);\n      var ret = [];\n      deps.forEach(function (vertex) {\n        var castVertex = vertex;\n\n        if (castVertex instanceof RangeVertex) {\n          ret.push(new AbsoluteCellRange(castVertex.start, castVertex.end));\n        } else if (castVertex instanceof FormulaCellVertex) {\n          ret.push(castVertex.getAddress(_this12.lazilyTransformingAstService));\n        } else {\n          ret.push(castVertex.getAddress());\n        }\n      });\n      return ret;\n    }\n  }], [{\n    key: \"buildEmpty\",\n    value: function buildEmpty(lazilyTransformingAstService, config, functionRegistry, namedExpressions, stats) {\n      var addressMapping = new AddressMapping(config.chooseAddressMappingPolicy);\n      var rangeMapping = new RangeMapping();\n      return new DependencyGraph(addressMapping, rangeMapping, new SheetMapping(config.translationPackage), new MatrixMapping(), stats, lazilyTransformingAstService, functionRegistry, namedExpressions);\n    }\n  }]);\n\n  return DependencyGraph;\n}();"]},"metadata":{},"sourceType":"module"}