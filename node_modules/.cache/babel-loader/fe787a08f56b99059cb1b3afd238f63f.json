{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { AbsoluteCellRange } from '../../AbsoluteCellRange';\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { AstNodeType } from '../../parser';\nimport { coerceRangeToScalar, coerceScalarToBoolean, coerceScalarToString, coerceToRange } from '../ArithmeticHelper';\nimport { getRawValue, isExtendedNumber } from '../InterpreterValue';\nimport { SimpleRangeValue } from '../SimpleRangeValue';\nexport var ArgumentTypes;\n\n(function (ArgumentTypes) {\n  /**\n   * String type.\n   */\n  ArgumentTypes[\"STRING\"] = \"STRING\";\n  /**\n   * Floating point type.\n   */\n\n  ArgumentTypes[\"NUMBER\"] = \"NUMBER\";\n  /**\n   * Boolean type.\n   */\n\n  ArgumentTypes[\"BOOLEAN\"] = \"BOOLEAN\";\n  /**\n   * Any non-range value.\n   */\n\n  ArgumentTypes[\"SCALAR\"] = \"SCALAR\";\n  /**\n   * Any non-range, no-error type.\n   */\n\n  ArgumentTypes[\"NOERROR\"] = \"NOERROR\";\n  /**\n   * Range type.\n   */\n\n  ArgumentTypes[\"RANGE\"] = \"RANGE\";\n  /**\n   * Integer type.\n   */\n\n  ArgumentTypes[\"INTEGER\"] = \"INTEGER\";\n  /**\n   * String representing complex number.\n   */\n\n  ArgumentTypes[\"COMPLEX\"] = \"COMPLEX\";\n  /**\n   * Range or scalar.\n   */\n\n  ArgumentTypes[\"ANY\"] = \"ANY\";\n})(ArgumentTypes || (ArgumentTypes = {}));\n/**\n * Abstract class representing interpreter function plugin.\n * Plugin may contain multiple functions. Each function should be of type {@link PluginFunctionType} and needs to be\n * included in {@link implementedFunctions}\n */\n\n\nexport var FunctionPlugin = /*#__PURE__*/function () {\n  function FunctionPlugin(interpreter) {\n    var _this = this;\n\n    _classCallCheck(this, FunctionPlugin);\n\n    this.coerceScalarToNumberOrError = function (arg) {\n      return _this.arithmeticHelper.coerceScalarToNumberOrError(arg);\n    };\n\n    this.runFunction = function (args, state, metadata, fn) {\n      var _a, _b, _c, _d, _e;\n\n      var argumentDefinitions = metadata.parameters;\n      var argValues;\n\n      if (metadata.expandRanges) {\n        argValues = _this.listOfScalarValues(args, state);\n      } else {\n        argValues = args.map(function (ast) {\n          return [_this.evaluateAst(ast, state), false];\n        });\n      }\n\n      if (metadata.repeatLastArgs === undefined && argumentDefinitions.length < argValues.length) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      if (metadata.repeatLastArgs !== undefined && argumentDefinitions.length < argValues.length && (argValues.length - argumentDefinitions.length) % metadata.repeatLastArgs !== 0) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      argumentDefinitions = _toConsumableArray(argumentDefinitions);\n\n      while (argumentDefinitions.length < argValues.length) {\n        var _argumentDefinitions;\n\n        (_argumentDefinitions = argumentDefinitions).push.apply(_argumentDefinitions, _toConsumableArray(argumentDefinitions.slice(argumentDefinitions.length - metadata.repeatLastArgs)));\n      }\n\n      var maxWidth = 1;\n      var maxHeight = 1;\n\n      if (!metadata.vectorizationForbidden && state.arraysFlag) {\n        for (var i = 0; i < argValues.length; i++) {\n          var _argValues$i = _slicedToArray(argValues[i], 1),\n              val = _argValues$i[0];\n\n          if (val instanceof SimpleRangeValue && argumentDefinitions[i].argumentType !== ArgumentTypes.RANGE && argumentDefinitions[i].argumentType !== ArgumentTypes.ANY) {\n            maxHeight = Math.max(maxHeight, val.height());\n            maxWidth = Math.max(maxWidth, val.width());\n          }\n        }\n      }\n\n      for (var _i2 = argValues.length; _i2 < argumentDefinitions.length; _i2++) {\n        if (((_a = argumentDefinitions[_i2]) === null || _a === void 0 ? void 0 : _a.defaultValue) === undefined) {\n          if (!((_b = argumentDefinitions[_i2]) === null || _b === void 0 ? void 0 : _b.optionalArg)) {\n            //not enough values passed as arguments, and there was no default value and argument was not optional\n            return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n          }\n        }\n      }\n\n      var retArr = [];\n\n      for (var row = 0; row < maxHeight; row++) {\n        var rowArr = [];\n\n        for (var col = 0; col < maxWidth; col++) {\n          var argCoerceFailure = undefined;\n          var coercedArguments = [];\n\n          for (var _i3 = 0; _i3 < argumentDefinitions.length; _i3++) {\n            // eslint-disable-next-line prefer-const\n            var _ref = (_c = argValues[_i3]) !== null && _c !== void 0 ? _c : [undefined, undefined],\n                _ref2 = _slicedToArray(_ref, 2),\n                _val = _ref2[0],\n                ignorable = _ref2[1];\n\n            if (_val instanceof SimpleRangeValue && argumentDefinitions[_i3].argumentType !== ArgumentTypes.RANGE && argumentDefinitions[_i3].argumentType !== ArgumentTypes.ANY) {\n              if (!metadata.vectorizationForbidden && state.arraysFlag) {\n                _val = (_d = _val.data[_val.height() !== 1 ? row : 0]) === null || _d === void 0 ? void 0 : _d[_val.width() !== 1 ? col : 0];\n              }\n            }\n\n            var arg = _val !== null && _val !== void 0 ? _val : (_e = argumentDefinitions[_i3]) === null || _e === void 0 ? void 0 : _e.defaultValue;\n\n            if (arg === undefined) {\n              coercedArguments.push(undefined); //we verified in previous loop that this arg is optional\n            } else {\n              //we apply coerce only to non-default values\n              var coercedArg = _val !== undefined ? _this.coerceToType(arg, argumentDefinitions[_i3], state) : arg;\n\n              if (coercedArg !== undefined) {\n                if (coercedArg instanceof CellError && argumentDefinitions[_i3].argumentType !== ArgumentTypes.SCALAR) {\n                  //if this is first error encountered, store it\n                  argCoerceFailure = argCoerceFailure !== null && argCoerceFailure !== void 0 ? argCoerceFailure : coercedArg;\n                }\n\n                coercedArguments.push(coercedArg);\n              } else if (!ignorable) {\n                //if this is first error encountered, store it\n                argCoerceFailure = argCoerceFailure !== null && argCoerceFailure !== void 0 ? argCoerceFailure : new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n              }\n            }\n          }\n\n          var ret = argCoerceFailure !== null && argCoerceFailure !== void 0 ? argCoerceFailure : _this.returnNumberWrapper(fn.apply(void 0, coercedArguments), metadata.returnNumberType);\n\n          if (maxHeight === 1 && maxWidth === 1) {\n            return ret;\n          }\n\n          if (ret instanceof SimpleRangeValue) {\n            throw 'Function returning array cannot be vectorized.';\n          }\n\n          rowArr.push(ret);\n        }\n\n        retArr.push(rowArr);\n      }\n\n      return SimpleRangeValue.onlyValues(retArr);\n    };\n\n    this.runFunctionWithReferenceArgument = function (args, state, metadata, noArgCallback, referenceCallback) {\n      var nonReferenceCallback = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {\n        return new CellError(ErrorType.NA, ErrorMessage.CellRefExpected);\n      };\n\n      if (args.length === 0) {\n        return _this.returnNumberWrapper(noArgCallback(), metadata.returnNumberType);\n      } else if (args.length > 1) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      var arg = args[0];\n\n      while (arg.type === AstNodeType.PARENTHESIS) {\n        arg = arg.expression;\n      }\n\n      var cellReference;\n\n      if (arg.type === AstNodeType.CELL_REFERENCE) {\n        cellReference = arg.reference.toSimpleCellAddress(state.formulaAddress);\n      } else if (arg.type === AstNodeType.CELL_RANGE || arg.type === AstNodeType.COLUMN_RANGE || arg.type === AstNodeType.ROW_RANGE) {\n        try {\n          cellReference = AbsoluteCellRange.fromAst(arg, state.formulaAddress).start;\n        } catch (e) {\n          return new CellError(ErrorType.REF, ErrorMessage.CellRefExpected);\n        }\n      }\n\n      if (cellReference !== undefined) {\n        return _this.returnNumberWrapper(referenceCallback(cellReference), metadata.returnNumberType);\n      }\n\n      return _this.runFunction(args, state, metadata, nonReferenceCallback);\n    };\n\n    this.interpreter = interpreter;\n    this.dependencyGraph = interpreter.dependencyGraph;\n    this.columnSearch = interpreter.columnSearch;\n    this.config = interpreter.config;\n    this.serialization = interpreter.serialization;\n    this.arraySizePredictor = interpreter.arraySizePredictor;\n    this.dateTimeHelper = interpreter.dateTimeHelper;\n    this.arithmeticHelper = interpreter.arithmeticHelper;\n  }\n\n  _createClass(FunctionPlugin, [{\n    key: \"evaluateAst\",\n    value: function evaluateAst(ast, state) {\n      return this.interpreter.evaluateAst(ast, state);\n    }\n  }, {\n    key: \"arraySizeForAst\",\n    value: function arraySizeForAst(ast, state) {\n      return this.arraySizePredictor.checkArraySizeForAst(ast, state);\n    }\n  }, {\n    key: \"listOfScalarValues\",\n    value: function listOfScalarValues(asts, state) {\n      var ret = [];\n\n      var _iterator = _createForOfIteratorHelper(asts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var argAst = _step.value;\n          var value = this.evaluateAst(argAst, state);\n\n          if (value instanceof SimpleRangeValue) {\n            var _iterator2 = _createForOfIteratorHelper(value.valuesFromTopLeftCorner()),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var scalarValue = _step2.value;\n                ret.push([scalarValue, true]);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } else {\n            ret.push([value, false]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"coerceToType\",\n    value: function coerceToType(arg, coercedType, state) {\n      var ret;\n\n      if (arg instanceof SimpleRangeValue) {\n        switch (coercedType.argumentType) {\n          case ArgumentTypes.RANGE:\n          case ArgumentTypes.ANY:\n            ret = arg;\n            break;\n\n          default:\n            {\n              var coerce = coerceRangeToScalar(arg, state);\n\n              if (coerce === undefined) {\n                return undefined;\n              }\n\n              arg = coerce;\n            }\n        }\n      }\n\n      if (!(arg instanceof SimpleRangeValue)) {\n        switch (coercedType.argumentType) {\n          case ArgumentTypes.INTEGER:\n          case ArgumentTypes.NUMBER:\n            // eslint-disable-next-line no-case-declarations\n            var coerced = this.coerceScalarToNumberOrError(arg);\n\n            if (!isExtendedNumber(coerced)) {\n              ret = coerced;\n              break;\n            } // eslint-disable-next-line no-case-declarations\n\n\n            var value = getRawValue(coerced);\n\n            if (coercedType.maxValue !== undefined && value > coercedType.maxValue) {\n              return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n            }\n\n            if (coercedType.minValue !== undefined && value < coercedType.minValue) {\n              return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n            }\n\n            if (coercedType.lessThan !== undefined && value >= coercedType.lessThan) {\n              return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n            }\n\n            if (coercedType.greaterThan !== undefined && value <= coercedType.greaterThan) {\n              return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n            }\n\n            if (coercedType.argumentType === ArgumentTypes.INTEGER && !Number.isInteger(value)) {\n              return new CellError(ErrorType.NUM, ErrorMessage.IntegerExpected);\n            }\n\n            ret = coerced;\n            break;\n\n          case ArgumentTypes.STRING:\n            ret = coerceScalarToString(arg);\n            break;\n\n          case ArgumentTypes.BOOLEAN:\n            ret = coerceScalarToBoolean(arg);\n            break;\n\n          case ArgumentTypes.SCALAR:\n          case ArgumentTypes.NOERROR:\n          case ArgumentTypes.ANY:\n            ret = arg;\n            break;\n\n          case ArgumentTypes.RANGE:\n            if (arg instanceof CellError) {\n              return arg;\n            }\n\n            ret = coerceToRange(arg);\n            break;\n\n          case ArgumentTypes.COMPLEX:\n            return this.arithmeticHelper.coerceScalarToComplex(getRawValue(arg));\n        }\n      }\n\n      if (coercedType.passSubtype || ret === undefined) {\n        return ret;\n      } else {\n        return getRawValue(ret);\n      }\n    }\n  }, {\n    key: \"metadata\",\n    value: function metadata(name) {\n      var params = this.constructor.implementedFunctions[name];\n\n      if (params !== undefined) {\n        return params;\n      }\n\n      throw new Error(\"No metadata for function \".concat(name, \".\"));\n    }\n  }, {\n    key: \"returnNumberWrapper\",\n    value: function returnNumberWrapper(val, type, format) {\n      if (type !== undefined && isExtendedNumber(val)) {\n        return this.arithmeticHelper.ExtendedNumberFactory(getRawValue(val), {\n          type: type,\n          format: format\n        });\n      } else {\n        return val;\n      }\n    }\n  }]);\n\n  return FunctionPlugin;\n}();","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/interpreter/plugin/FunctionPlugin.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e2","f","TypeError","normalCompletion","didErr","err","call","step","next","_e3","return","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_i","_arr","_n","_d","_s","_e","push","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","iter","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","AbsoluteCellRange","CellError","ErrorType","ErrorMessage","AstNodeType","coerceRangeToScalar","coerceScalarToBoolean","coerceScalarToString","coerceToRange","getRawValue","isExtendedNumber","SimpleRangeValue","ArgumentTypes","FunctionPlugin","interpreter","_this","coerceScalarToNumberOrError","arg","arithmeticHelper","runFunction","args","state","metadata","fn","_a","_b","_c","argumentDefinitions","parameters","argValues","expandRanges","listOfScalarValues","map","ast","evaluateAst","repeatLastArgs","undefined","NA","WrongArgNumber","_argumentDefinitions","apply","maxWidth","maxHeight","vectorizationForbidden","arraysFlag","_argValues$i","val","argumentType","RANGE","ANY","Math","max","height","width","_i2","defaultValue","optionalArg","retArr","row","rowArr","col","argCoerceFailure","coercedArguments","_i3","_ref","_ref2","_val","ignorable","data","coercedArg","coerceToType","SCALAR","VALUE","WrongType","ret","returnNumberWrapper","returnNumberType","onlyValues","runFunctionWithReferenceArgument","noArgCallback","referenceCallback","nonReferenceCallback","arguments","CellRefExpected","type","PARENTHESIS","expression","cellReference","CELL_REFERENCE","reference","toSimpleCellAddress","formulaAddress","CELL_RANGE","COLUMN_RANGE","ROW_RANGE","fromAst","start","REF","dependencyGraph","columnSearch","config","serialization","arraySizePredictor","dateTimeHelper","arraySizeForAst","checkArraySizeForAst","asts","_iterator","_step","argAst","_iterator2","valuesFromTopLeftCorner","_step2","scalarValue","coercedType","coerce","INTEGER","NUMBER","coerced","maxValue","NUM","ValueLarge","minValue","ValueSmall","lessThan","greaterThan","Number","isInteger","IntegerExpected","STRING","BOOLEAN","NOERROR","COMPLEX","coerceScalarToComplex","passSubtype","params","implementedFunctions","Error","concat","format","ExtendedNumberFactory"],"mappings":"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","sourcesContent":["function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { AbsoluteCellRange } from '../../AbsoluteCellRange';\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { AstNodeType } from '../../parser';\nimport { coerceRangeToScalar, coerceScalarToBoolean, coerceScalarToString, coerceToRange } from '../ArithmeticHelper';\nimport { getRawValue, isExtendedNumber } from '../InterpreterValue';\nimport { SimpleRangeValue } from '../SimpleRangeValue';\nexport var ArgumentTypes;\n\n(function (ArgumentTypes) {\n  /**\n   * String type.\n   */\n  ArgumentTypes[\"STRING\"] = \"STRING\";\n  /**\n   * Floating point type.\n   */\n\n  ArgumentTypes[\"NUMBER\"] = \"NUMBER\";\n  /**\n   * Boolean type.\n   */\n\n  ArgumentTypes[\"BOOLEAN\"] = \"BOOLEAN\";\n  /**\n   * Any non-range value.\n   */\n\n  ArgumentTypes[\"SCALAR\"] = \"SCALAR\";\n  /**\n   * Any non-range, no-error type.\n   */\n\n  ArgumentTypes[\"NOERROR\"] = \"NOERROR\";\n  /**\n   * Range type.\n   */\n\n  ArgumentTypes[\"RANGE\"] = \"RANGE\";\n  /**\n   * Integer type.\n   */\n\n  ArgumentTypes[\"INTEGER\"] = \"INTEGER\";\n  /**\n   * String representing complex number.\n   */\n\n  ArgumentTypes[\"COMPLEX\"] = \"COMPLEX\";\n  /**\n   * Range or scalar.\n   */\n\n  ArgumentTypes[\"ANY\"] = \"ANY\";\n})(ArgumentTypes || (ArgumentTypes = {}));\n/**\n * Abstract class representing interpreter function plugin.\n * Plugin may contain multiple functions. Each function should be of type {@link PluginFunctionType} and needs to be\n * included in {@link implementedFunctions}\n */\n\n\nexport var FunctionPlugin = /*#__PURE__*/function () {\n  function FunctionPlugin(interpreter) {\n    var _this = this;\n\n    _classCallCheck(this, FunctionPlugin);\n\n    this.coerceScalarToNumberOrError = function (arg) {\n      return _this.arithmeticHelper.coerceScalarToNumberOrError(arg);\n    };\n\n    this.runFunction = function (args, state, metadata, fn) {\n      var _a, _b, _c, _d, _e;\n\n      var argumentDefinitions = metadata.parameters;\n      var argValues;\n\n      if (metadata.expandRanges) {\n        argValues = _this.listOfScalarValues(args, state);\n      } else {\n        argValues = args.map(function (ast) {\n          return [_this.evaluateAst(ast, state), false];\n        });\n      }\n\n      if (metadata.repeatLastArgs === undefined && argumentDefinitions.length < argValues.length) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      if (metadata.repeatLastArgs !== undefined && argumentDefinitions.length < argValues.length && (argValues.length - argumentDefinitions.length) % metadata.repeatLastArgs !== 0) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      argumentDefinitions = _toConsumableArray(argumentDefinitions);\n\n      while (argumentDefinitions.length < argValues.length) {\n        var _argumentDefinitions;\n\n        (_argumentDefinitions = argumentDefinitions).push.apply(_argumentDefinitions, _toConsumableArray(argumentDefinitions.slice(argumentDefinitions.length - metadata.repeatLastArgs)));\n      }\n\n      var maxWidth = 1;\n      var maxHeight = 1;\n\n      if (!metadata.vectorizationForbidden && state.arraysFlag) {\n        for (var i = 0; i < argValues.length; i++) {\n          var _argValues$i = _slicedToArray(argValues[i], 1),\n              val = _argValues$i[0];\n\n          if (val instanceof SimpleRangeValue && argumentDefinitions[i].argumentType !== ArgumentTypes.RANGE && argumentDefinitions[i].argumentType !== ArgumentTypes.ANY) {\n            maxHeight = Math.max(maxHeight, val.height());\n            maxWidth = Math.max(maxWidth, val.width());\n          }\n        }\n      }\n\n      for (var _i2 = argValues.length; _i2 < argumentDefinitions.length; _i2++) {\n        if (((_a = argumentDefinitions[_i2]) === null || _a === void 0 ? void 0 : _a.defaultValue) === undefined) {\n          if (!((_b = argumentDefinitions[_i2]) === null || _b === void 0 ? void 0 : _b.optionalArg)) {\n            //not enough values passed as arguments, and there was no default value and argument was not optional\n            return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n          }\n        }\n      }\n\n      var retArr = [];\n\n      for (var row = 0; row < maxHeight; row++) {\n        var rowArr = [];\n\n        for (var col = 0; col < maxWidth; col++) {\n          var argCoerceFailure = undefined;\n          var coercedArguments = [];\n\n          for (var _i3 = 0; _i3 < argumentDefinitions.length; _i3++) {\n            // eslint-disable-next-line prefer-const\n            var _ref = (_c = argValues[_i3]) !== null && _c !== void 0 ? _c : [undefined, undefined],\n                _ref2 = _slicedToArray(_ref, 2),\n                _val = _ref2[0],\n                ignorable = _ref2[1];\n\n            if (_val instanceof SimpleRangeValue && argumentDefinitions[_i3].argumentType !== ArgumentTypes.RANGE && argumentDefinitions[_i3].argumentType !== ArgumentTypes.ANY) {\n              if (!metadata.vectorizationForbidden && state.arraysFlag) {\n                _val = (_d = _val.data[_val.height() !== 1 ? row : 0]) === null || _d === void 0 ? void 0 : _d[_val.width() !== 1 ? col : 0];\n              }\n            }\n\n            var arg = _val !== null && _val !== void 0 ? _val : (_e = argumentDefinitions[_i3]) === null || _e === void 0 ? void 0 : _e.defaultValue;\n\n            if (arg === undefined) {\n              coercedArguments.push(undefined); //we verified in previous loop that this arg is optional\n            } else {\n              //we apply coerce only to non-default values\n              var coercedArg = _val !== undefined ? _this.coerceToType(arg, argumentDefinitions[_i3], state) : arg;\n\n              if (coercedArg !== undefined) {\n                if (coercedArg instanceof CellError && argumentDefinitions[_i3].argumentType !== ArgumentTypes.SCALAR) {\n                  //if this is first error encountered, store it\n                  argCoerceFailure = argCoerceFailure !== null && argCoerceFailure !== void 0 ? argCoerceFailure : coercedArg;\n                }\n\n                coercedArguments.push(coercedArg);\n              } else if (!ignorable) {\n                //if this is first error encountered, store it\n                argCoerceFailure = argCoerceFailure !== null && argCoerceFailure !== void 0 ? argCoerceFailure : new CellError(ErrorType.VALUE, ErrorMessage.WrongType);\n              }\n            }\n          }\n\n          var ret = argCoerceFailure !== null && argCoerceFailure !== void 0 ? argCoerceFailure : _this.returnNumberWrapper(fn.apply(void 0, coercedArguments), metadata.returnNumberType);\n\n          if (maxHeight === 1 && maxWidth === 1) {\n            return ret;\n          }\n\n          if (ret instanceof SimpleRangeValue) {\n            throw 'Function returning array cannot be vectorized.';\n          }\n\n          rowArr.push(ret);\n        }\n\n        retArr.push(rowArr);\n      }\n\n      return SimpleRangeValue.onlyValues(retArr);\n    };\n\n    this.runFunctionWithReferenceArgument = function (args, state, metadata, noArgCallback, referenceCallback) {\n      var nonReferenceCallback = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {\n        return new CellError(ErrorType.NA, ErrorMessage.CellRefExpected);\n      };\n\n      if (args.length === 0) {\n        return _this.returnNumberWrapper(noArgCallback(), metadata.returnNumberType);\n      } else if (args.length > 1) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      var arg = args[0];\n\n      while (arg.type === AstNodeType.PARENTHESIS) {\n        arg = arg.expression;\n      }\n\n      var cellReference;\n\n      if (arg.type === AstNodeType.CELL_REFERENCE) {\n        cellReference = arg.reference.toSimpleCellAddress(state.formulaAddress);\n      } else if (arg.type === AstNodeType.CELL_RANGE || arg.type === AstNodeType.COLUMN_RANGE || arg.type === AstNodeType.ROW_RANGE) {\n        try {\n          cellReference = AbsoluteCellRange.fromAst(arg, state.formulaAddress).start;\n        } catch (e) {\n          return new CellError(ErrorType.REF, ErrorMessage.CellRefExpected);\n        }\n      }\n\n      if (cellReference !== undefined) {\n        return _this.returnNumberWrapper(referenceCallback(cellReference), metadata.returnNumberType);\n      }\n\n      return _this.runFunction(args, state, metadata, nonReferenceCallback);\n    };\n\n    this.interpreter = interpreter;\n    this.dependencyGraph = interpreter.dependencyGraph;\n    this.columnSearch = interpreter.columnSearch;\n    this.config = interpreter.config;\n    this.serialization = interpreter.serialization;\n    this.arraySizePredictor = interpreter.arraySizePredictor;\n    this.dateTimeHelper = interpreter.dateTimeHelper;\n    this.arithmeticHelper = interpreter.arithmeticHelper;\n  }\n\n  _createClass(FunctionPlugin, [{\n    key: \"evaluateAst\",\n    value: function evaluateAst(ast, state) {\n      return this.interpreter.evaluateAst(ast, state);\n    }\n  }, {\n    key: \"arraySizeForAst\",\n    value: function arraySizeForAst(ast, state) {\n      return this.arraySizePredictor.checkArraySizeForAst(ast, state);\n    }\n  }, {\n    key: \"listOfScalarValues\",\n    value: function listOfScalarValues(asts, state) {\n      var ret = [];\n\n      var _iterator = _createForOfIteratorHelper(asts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var argAst = _step.value;\n          var value = this.evaluateAst(argAst, state);\n\n          if (value instanceof SimpleRangeValue) {\n            var _iterator2 = _createForOfIteratorHelper(value.valuesFromTopLeftCorner()),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var scalarValue = _step2.value;\n                ret.push([scalarValue, true]);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } else {\n            ret.push([value, false]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"coerceToType\",\n    value: function coerceToType(arg, coercedType, state) {\n      var ret;\n\n      if (arg instanceof SimpleRangeValue) {\n        switch (coercedType.argumentType) {\n          case ArgumentTypes.RANGE:\n          case ArgumentTypes.ANY:\n            ret = arg;\n            break;\n\n          default:\n            {\n              var coerce = coerceRangeToScalar(arg, state);\n\n              if (coerce === undefined) {\n                return undefined;\n              }\n\n              arg = coerce;\n            }\n        }\n      }\n\n      if (!(arg instanceof SimpleRangeValue)) {\n        switch (coercedType.argumentType) {\n          case ArgumentTypes.INTEGER:\n          case ArgumentTypes.NUMBER:\n            // eslint-disable-next-line no-case-declarations\n            var coerced = this.coerceScalarToNumberOrError(arg);\n\n            if (!isExtendedNumber(coerced)) {\n              ret = coerced;\n              break;\n            } // eslint-disable-next-line no-case-declarations\n\n\n            var value = getRawValue(coerced);\n\n            if (coercedType.maxValue !== undefined && value > coercedType.maxValue) {\n              return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n            }\n\n            if (coercedType.minValue !== undefined && value < coercedType.minValue) {\n              return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n            }\n\n            if (coercedType.lessThan !== undefined && value >= coercedType.lessThan) {\n              return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n            }\n\n            if (coercedType.greaterThan !== undefined && value <= coercedType.greaterThan) {\n              return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n            }\n\n            if (coercedType.argumentType === ArgumentTypes.INTEGER && !Number.isInteger(value)) {\n              return new CellError(ErrorType.NUM, ErrorMessage.IntegerExpected);\n            }\n\n            ret = coerced;\n            break;\n\n          case ArgumentTypes.STRING:\n            ret = coerceScalarToString(arg);\n            break;\n\n          case ArgumentTypes.BOOLEAN:\n            ret = coerceScalarToBoolean(arg);\n            break;\n\n          case ArgumentTypes.SCALAR:\n          case ArgumentTypes.NOERROR:\n          case ArgumentTypes.ANY:\n            ret = arg;\n            break;\n\n          case ArgumentTypes.RANGE:\n            if (arg instanceof CellError) {\n              return arg;\n            }\n\n            ret = coerceToRange(arg);\n            break;\n\n          case ArgumentTypes.COMPLEX:\n            return this.arithmeticHelper.coerceScalarToComplex(getRawValue(arg));\n        }\n      }\n\n      if (coercedType.passSubtype || ret === undefined) {\n        return ret;\n      } else {\n        return getRawValue(ret);\n      }\n    }\n  }, {\n    key: \"metadata\",\n    value: function metadata(name) {\n      var params = this.constructor.implementedFunctions[name];\n\n      if (params !== undefined) {\n        return params;\n      }\n\n      throw new Error(\"No metadata for function \".concat(name, \".\"));\n    }\n  }, {\n    key: \"returnNumberWrapper\",\n    value: function returnNumberWrapper(val, type, format) {\n      if (type !== undefined && isExtendedNumber(val)) {\n        return this.arithmeticHelper.ExtendedNumberFactory(getRawValue(val), {\n          type: type,\n          format: format\n        });\n      } else {\n        return val;\n      }\n    }\n  }]);\n\n  return FunctionPlugin;\n}();"]},"metadata":{},"sourceType":"module"}