{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { absoluteSheetReference, invalidSimpleCellAddress, simpleCellAddress, simpleColumnAddress, simpleRowAddress } from '../Cell';\nimport { columnIndexToLabel } from './addressRepresentationConverters';\n/** Possible kinds of cell references */\n\nexport var CellReferenceType;\n\n(function (CellReferenceType) {\n  /** Cell reference with both row and column relative. */\n  CellReferenceType[\"CELL_REFERENCE_RELATIVE\"] = \"CELL_REFERENCE\";\n  /** Cell reference with both row and column absolute. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE\"] = \"CELL_REFERENCE_ABSOLUTE\";\n  /** Cell reference with absolute column and relative row. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE_COL\"] = \"CELL_REFERENCE_ABSOLUTE_COL\";\n  /** Cell reference with relative column and absolute row. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE_ROW\"] = \"CELL_REFERENCE_ABSOLUTE_ROW\";\n})(CellReferenceType || (CellReferenceType = {}));\n\nexport var CellAddress = /*#__PURE__*/function () {\n  function CellAddress(col, row, type, sheet) {\n    _classCallCheck(this, CellAddress);\n\n    this.col = col;\n    this.row = row;\n    this.type = type;\n    this.sheet = sheet;\n  }\n\n  _createClass(CellAddress, [{\n    key: \"toSimpleCellAddress\",\n    value:\n    /**\n     * Converts R0C0 representation of cell address to simple object representation.\n     *\n     * @param baseAddress - base address for R0C0 shifts\n     */\n    function toSimpleCellAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n\n      if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE) {\n        return simpleCellAddress(sheet, this.col, this.row);\n      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW) {\n        return simpleCellAddress(sheet, baseAddress.col + this.col, this.row);\n      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL) {\n        return simpleCellAddress(sheet, this.col, baseAddress.row + this.row);\n      } else {\n        return simpleCellAddress(sheet, baseAddress.col + this.col, baseAddress.row + this.row);\n      }\n    }\n  }, {\n    key: \"toSimpleColumnAddress\",\n    value: function toSimpleColumnAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n      var column = this.col;\n\n      if (this.isColumnRelative()) {\n        column += baseAddress.col;\n      }\n\n      return simpleColumnAddress(sheet, column);\n    }\n  }, {\n    key: \"toSimpleRowAddress\",\n    value: function toSimpleRowAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n      var row = this.row;\n\n      if (this.isRowRelative()) {\n        row += baseAddress.row;\n      }\n\n      return simpleRowAddress(sheet, row);\n    }\n  }, {\n    key: \"isRowAbsolute\",\n    value: function isRowAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;\n    }\n  }, {\n    key: \"isColumnAbsolute\",\n    value: function isColumnAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;\n    }\n  }, {\n    key: \"isColumnRelative\",\n    value: function isColumnRelative() {\n      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;\n    }\n  }, {\n    key: \"isRowRelative\",\n    value: function isRowRelative() {\n      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;\n    }\n  }, {\n    key: \"isAbsolute\",\n    value: function isAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE && this.sheet !== undefined;\n    }\n  }, {\n    key: \"shiftedByRows\",\n    value: function shiftedByRows(numberOfRows) {\n      return new CellAddress(this.col, this.row + numberOfRows, this.type, this.sheet);\n    }\n  }, {\n    key: \"shiftedByColumns\",\n    value: function shiftedByColumns(numberOfColumns) {\n      return new CellAddress(this.col + numberOfColumns, this.row, this.type, this.sheet);\n    }\n  }, {\n    key: \"moved\",\n    value: function moved(toSheet, toRight, toBottom) {\n      var newSheet = this.sheet === undefined ? undefined : toSheet;\n      return new CellAddress(this.col + toRight, this.row + toBottom, this.type, newSheet);\n    }\n  }, {\n    key: \"withAbsoluteSheet\",\n    value: function withAbsoluteSheet(sheet) {\n      return new CellAddress(this.col, this.row, this.type, sheet);\n    }\n  }, {\n    key: \"isInvalid\",\n    value: function isInvalid(baseAddress) {\n      return invalidSimpleCellAddress(this.toSimpleCellAddress(baseAddress));\n    }\n  }, {\n    key: \"shiftRelativeDimensions\",\n    value: function shiftRelativeDimensions(toRight, toBottom) {\n      var col = this.isColumnAbsolute() ? this.col : this.col + toRight;\n      var row = this.isRowAbsolute() ? this.row : this.row + toBottom;\n      return new CellAddress(col, row, this.type, this.sheet);\n    }\n  }, {\n    key: \"shiftAbsoluteDimensions\",\n    value: function shiftAbsoluteDimensions(toRight, toBottom) {\n      var col = this.isColumnRelative() ? this.col : this.col + toRight;\n      var row = this.isRowRelative() ? this.row : this.row + toBottom;\n      return new CellAddress(col, row, this.type, this.sheet);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(withSheet) {\n      var sheetPart = withSheet && this.sheet !== undefined ? \"#\".concat(this.sheet) : '';\n\n      switch (this.type) {\n        case CellReferenceType.CELL_REFERENCE_RELATIVE:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"R\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"A\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"AC\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"AR\").concat(this.col);\n          }\n      }\n    }\n  }, {\n    key: \"unparse\",\n    value: function unparse(baseAddress) {\n      var simpleAddress = this.toSimpleCellAddress(baseAddress);\n\n      if (invalidSimpleCellAddress(simpleAddress)) {\n        return undefined;\n      }\n\n      var column = columnIndexToLabel(simpleAddress.col);\n      var rowDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW ? '$' : '';\n      var colDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL ? '$' : '';\n      return \"\".concat(colDollar).concat(column).concat(rowDollar).concat(simpleAddress.row + 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {\n      return this.row >= maxRows || this.col >= maxColumns;\n    }\n  }], [{\n    key: \"relative\",\n    value: function relative(row, col, sheet) {\n      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_RELATIVE, sheet);\n    }\n  }, {\n    key: \"absolute\",\n    value: function absolute(col, row, sheet) {\n      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE, sheet);\n    }\n  }, {\n    key: \"absoluteCol\",\n    value: function absoluteCol(col, row, sheet) {\n      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL, sheet);\n    }\n  }, {\n    key: \"absoluteRow\",\n    value: function absoluteRow(col, row, sheet) {\n      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW, sheet);\n    }\n  }]);\n\n  return CellAddress;\n}();","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/parser/CellAddress.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","absoluteSheetReference","invalidSimpleCellAddress","simpleCellAddress","simpleColumnAddress","simpleRowAddress","columnIndexToLabel","CellReferenceType","CellAddress","col","row","type","sheet","value","toSimpleCellAddress","baseAddress","CELL_REFERENCE_ABSOLUTE","CELL_REFERENCE_ABSOLUTE_ROW","CELL_REFERENCE_ABSOLUTE_COL","toSimpleColumnAddress","column","isColumnRelative","toSimpleRowAddress","isRowRelative","isRowAbsolute","isColumnAbsolute","CELL_REFERENCE_RELATIVE","isAbsolute","undefined","shiftedByRows","numberOfRows","shiftedByColumns","numberOfColumns","moved","toSheet","toRight","toBottom","newSheet","withAbsoluteSheet","isInvalid","shiftRelativeDimensions","shiftAbsoluteDimensions","hash","withSheet","sheetPart","concat","unparse","simpleAddress","rowDollar","colDollar","exceedsSheetSizeLimits","maxColumns","maxRows","relative","absolute","absoluteCol","absoluteRow"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { absoluteSheetReference, invalidSimpleCellAddress, simpleCellAddress, simpleColumnAddress, simpleRowAddress } from '../Cell';\nimport { columnIndexToLabel } from './addressRepresentationConverters';\n/** Possible kinds of cell references */\n\nexport var CellReferenceType;\n\n(function (CellReferenceType) {\n  /** Cell reference with both row and column relative. */\n  CellReferenceType[\"CELL_REFERENCE_RELATIVE\"] = \"CELL_REFERENCE\";\n  /** Cell reference with both row and column absolute. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE\"] = \"CELL_REFERENCE_ABSOLUTE\";\n  /** Cell reference with absolute column and relative row. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE_COL\"] = \"CELL_REFERENCE_ABSOLUTE_COL\";\n  /** Cell reference with relative column and absolute row. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE_ROW\"] = \"CELL_REFERENCE_ABSOLUTE_ROW\";\n})(CellReferenceType || (CellReferenceType = {}));\n\nexport var CellAddress = /*#__PURE__*/function () {\n  function CellAddress(col, row, type, sheet) {\n    _classCallCheck(this, CellAddress);\n\n    this.col = col;\n    this.row = row;\n    this.type = type;\n    this.sheet = sheet;\n  }\n\n  _createClass(CellAddress, [{\n    key: \"toSimpleCellAddress\",\n    value:\n    /**\n     * Converts R0C0 representation of cell address to simple object representation.\n     *\n     * @param baseAddress - base address for R0C0 shifts\n     */\n    function toSimpleCellAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n\n      if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE) {\n        return simpleCellAddress(sheet, this.col, this.row);\n      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW) {\n        return simpleCellAddress(sheet, baseAddress.col + this.col, this.row);\n      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL) {\n        return simpleCellAddress(sheet, this.col, baseAddress.row + this.row);\n      } else {\n        return simpleCellAddress(sheet, baseAddress.col + this.col, baseAddress.row + this.row);\n      }\n    }\n  }, {\n    key: \"toSimpleColumnAddress\",\n    value: function toSimpleColumnAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n      var column = this.col;\n\n      if (this.isColumnRelative()) {\n        column += baseAddress.col;\n      }\n\n      return simpleColumnAddress(sheet, column);\n    }\n  }, {\n    key: \"toSimpleRowAddress\",\n    value: function toSimpleRowAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n      var row = this.row;\n\n      if (this.isRowRelative()) {\n        row += baseAddress.row;\n      }\n\n      return simpleRowAddress(sheet, row);\n    }\n  }, {\n    key: \"isRowAbsolute\",\n    value: function isRowAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;\n    }\n  }, {\n    key: \"isColumnAbsolute\",\n    value: function isColumnAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;\n    }\n  }, {\n    key: \"isColumnRelative\",\n    value: function isColumnRelative() {\n      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;\n    }\n  }, {\n    key: \"isRowRelative\",\n    value: function isRowRelative() {\n      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;\n    }\n  }, {\n    key: \"isAbsolute\",\n    value: function isAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE && this.sheet !== undefined;\n    }\n  }, {\n    key: \"shiftedByRows\",\n    value: function shiftedByRows(numberOfRows) {\n      return new CellAddress(this.col, this.row + numberOfRows, this.type, this.sheet);\n    }\n  }, {\n    key: \"shiftedByColumns\",\n    value: function shiftedByColumns(numberOfColumns) {\n      return new CellAddress(this.col + numberOfColumns, this.row, this.type, this.sheet);\n    }\n  }, {\n    key: \"moved\",\n    value: function moved(toSheet, toRight, toBottom) {\n      var newSheet = this.sheet === undefined ? undefined : toSheet;\n      return new CellAddress(this.col + toRight, this.row + toBottom, this.type, newSheet);\n    }\n  }, {\n    key: \"withAbsoluteSheet\",\n    value: function withAbsoluteSheet(sheet) {\n      return new CellAddress(this.col, this.row, this.type, sheet);\n    }\n  }, {\n    key: \"isInvalid\",\n    value: function isInvalid(baseAddress) {\n      return invalidSimpleCellAddress(this.toSimpleCellAddress(baseAddress));\n    }\n  }, {\n    key: \"shiftRelativeDimensions\",\n    value: function shiftRelativeDimensions(toRight, toBottom) {\n      var col = this.isColumnAbsolute() ? this.col : this.col + toRight;\n      var row = this.isRowAbsolute() ? this.row : this.row + toBottom;\n      return new CellAddress(col, row, this.type, this.sheet);\n    }\n  }, {\n    key: \"shiftAbsoluteDimensions\",\n    value: function shiftAbsoluteDimensions(toRight, toBottom) {\n      var col = this.isColumnRelative() ? this.col : this.col + toRight;\n      var row = this.isRowRelative() ? this.row : this.row + toBottom;\n      return new CellAddress(col, row, this.type, this.sheet);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(withSheet) {\n      var sheetPart = withSheet && this.sheet !== undefined ? \"#\".concat(this.sheet) : '';\n\n      switch (this.type) {\n        case CellReferenceType.CELL_REFERENCE_RELATIVE:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"R\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"A\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"AC\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"AR\").concat(this.col);\n          }\n      }\n    }\n  }, {\n    key: \"unparse\",\n    value: function unparse(baseAddress) {\n      var simpleAddress = this.toSimpleCellAddress(baseAddress);\n\n      if (invalidSimpleCellAddress(simpleAddress)) {\n        return undefined;\n      }\n\n      var column = columnIndexToLabel(simpleAddress.col);\n      var rowDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW ? '$' : '';\n      var colDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL ? '$' : '';\n      return \"\".concat(colDollar).concat(column).concat(rowDollar).concat(simpleAddress.row + 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {\n      return this.row >= maxRows || this.col >= maxColumns;\n    }\n  }], [{\n    key: \"relative\",\n    value: function relative(row, col, sheet) {\n      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_RELATIVE, sheet);\n    }\n  }, {\n    key: \"absolute\",\n    value: function absolute(col, row, sheet) {\n      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE, sheet);\n    }\n  }, {\n    key: \"absoluteCol\",\n    value: function absoluteCol(col, row, sheet) {\n      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL, sheet);\n    }\n  }, {\n    key: \"absoluteRow\",\n    value: function absoluteRow(col, row, sheet) {\n      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW, sheet);\n    }\n  }]);\n\n  return CellAddress;\n}();"]},"metadata":{},"sourceType":"module"}