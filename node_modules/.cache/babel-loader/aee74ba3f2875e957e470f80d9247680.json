{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { invalidSimpleCellAddress } from './Cell';\nimport { NamedExpressionDependency } from './parser';\nimport { AbsoluteCellRange } from './AbsoluteCellRange';\n/**\n * Converts dependencies from maybe relative addressing to absolute addressing.\n *\n * @param deps - list of addresses in R0C0 format\n * @param baseAddress - base address with regard to which make a convertion\n */\n\nexport var absolutizeDependencies = function absolutizeDependencies(deps, baseAddress) {\n  return deps.map(function (dep) {\n    return dep.absolutize(baseAddress);\n  });\n};\nexport var filterDependenciesOutOfScope = function filterDependenciesOutOfScope(deps) {\n  return deps.filter(function (dep) {\n    if (dep instanceof NamedExpressionDependency) {\n      return true;\n    }\n\n    if (dep instanceof AbsoluteCellRange) {\n      return !(invalidSimpleCellAddress(dep.start) || invalidSimpleCellAddress(dep.end));\n    } else {\n      return !invalidSimpleCellAddress(dep);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/absolutizeDependencies.js"],"names":["invalidSimpleCellAddress","NamedExpressionDependency","AbsoluteCellRange","absolutizeDependencies","deps","baseAddress","map","dep","absolutize","filterDependenciesOutOfScope","filter","start","end"],"mappings":"AAGA;AACA;AACA;AACA;AACA,SAASA,wBAAT,QAAyC,QAAzC;AACA,SAASC,yBAAT,QAA0C,UAA1C;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,sBAAsB,GAAG,SAASA,sBAAT,CAAgCC,IAAhC,EAAsCC,WAAtC,EAAmD;AACrF,SAAOD,IAAI,CAACE,GAAL,CAAS,UAAUC,GAAV,EAAe;AAC7B,WAAOA,GAAG,CAACC,UAAJ,CAAeH,WAAf,CAAP;AACD,GAFM,CAAP;AAGD,CAJM;AAKP,OAAO,IAAII,4BAA4B,GAAG,SAASA,4BAAT,CAAsCL,IAAtC,EAA4C;AACpF,SAAOA,IAAI,CAACM,MAAL,CAAY,UAAUH,GAAV,EAAe;AAChC,QAAIA,GAAG,YAAYN,yBAAnB,EAA8C;AAC5C,aAAO,IAAP;AACD;;AAED,QAAIM,GAAG,YAAYL,iBAAnB,EAAsC;AACpC,aAAO,EAAEF,wBAAwB,CAACO,GAAG,CAACI,KAAL,CAAxB,IAAuCX,wBAAwB,CAACO,GAAG,CAACK,GAAL,CAAjE,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAACZ,wBAAwB,CAACO,GAAD,CAAhC;AACD;AACF,GAVM,CAAP;AAWD,CAZM","sourcesContent":["import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { invalidSimpleCellAddress } from './Cell';\nimport { NamedExpressionDependency } from './parser';\nimport { AbsoluteCellRange } from './AbsoluteCellRange';\n/**\n * Converts dependencies from maybe relative addressing to absolute addressing.\n *\n * @param deps - list of addresses in R0C0 format\n * @param baseAddress - base address with regard to which make a convertion\n */\n\nexport var absolutizeDependencies = function absolutizeDependencies(deps, baseAddress) {\n  return deps.map(function (dep) {\n    return dep.absolutize(baseAddress);\n  });\n};\nexport var filterDependenciesOutOfScope = function filterDependenciesOutOfScope(deps) {\n  return deps.filter(function (dep) {\n    if (dep instanceof NamedExpressionDependency) {\n      return true;\n    }\n\n    if (dep instanceof AbsoluteCellRange) {\n      return !(invalidSimpleCellAddress(dep.start) || invalidSimpleCellAddress(dep.end));\n    } else {\n      return !invalidSimpleCellAddress(dep);\n    }\n  });\n};"]},"metadata":{},"sourceType":"module"}