{"ast":null,"code":"var _binaryOpTokenMap;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { AstNodeType } from './Ast';\nexport var binaryOpTokenMap = (_binaryOpTokenMap = {}, _defineProperty(_binaryOpTokenMap, AstNodeType.PLUS_OP, '+'), _defineProperty(_binaryOpTokenMap, AstNodeType.MINUS_OP, '-'), _defineProperty(_binaryOpTokenMap, AstNodeType.TIMES_OP, '*'), _defineProperty(_binaryOpTokenMap, AstNodeType.DIV_OP, '/'), _defineProperty(_binaryOpTokenMap, AstNodeType.CONCATENATE_OP, '&'), _defineProperty(_binaryOpTokenMap, AstNodeType.POWER_OP, '^'), _defineProperty(_binaryOpTokenMap, AstNodeType.EQUALS_OP, '='), _defineProperty(_binaryOpTokenMap, AstNodeType.NOT_EQUAL_OP, '<>'), _defineProperty(_binaryOpTokenMap, AstNodeType.GREATER_THAN_OP, '>'), _defineProperty(_binaryOpTokenMap, AstNodeType.GREATER_THAN_OR_EQUAL_OP, '>='), _defineProperty(_binaryOpTokenMap, AstNodeType.LESS_THAN_OP, '<'), _defineProperty(_binaryOpTokenMap, AstNodeType.LESS_THAN_OR_EQUAL_OP, '<='), _binaryOpTokenMap);","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/parser/binaryOpTokenMap.js"],"names":["_binaryOpTokenMap","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","AstNodeType","binaryOpTokenMap","PLUS_OP","MINUS_OP","TIMES_OP","DIV_OP","CONCATENATE_OP","POWER_OP","EQUALS_OP","NOT_EQUAL_OP","GREATER_THAN_OP","GREATER_THAN_OR_EQUAL_OP","LESS_THAN_OP","LESS_THAN_OR_EQUAL_OP"],"mappings":"AAAA,IAAIA,iBAAJ;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAID,GAAX,EAAgB;AAAEG,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAAEC,MAAAA,KAAK,EAAEA,KAAT;AAAgBG,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOF,GAAP;AAAa;AAEjN;AACA;AACA;AACA;;;AACA,SAASQ,WAAT,QAA4B,OAA5B;AACA,OAAO,IAAIC,gBAAgB,IAAIX,iBAAiB,GAAG,EAApB,EAAwBC,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACE,OAAhC,EAAyC,GAAzC,CAAvC,EAAsFX,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACG,QAAhC,EAA0C,GAA1C,CAArG,EAAqJZ,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACI,QAAhC,EAA0C,GAA1C,CAApK,EAAoNb,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACK,MAAhC,EAAwC,GAAxC,CAAnO,EAAiRd,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACM,cAAhC,EAAgD,GAAhD,CAAhS,EAAsVf,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACO,QAAhC,EAA0C,GAA1C,CAArW,EAAqZhB,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACQ,SAAhC,EAA2C,GAA3C,CAApa,EAAqdjB,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACS,YAAhC,EAA8C,IAA9C,CAApe,EAAyhBlB,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACU,eAAhC,EAAiD,GAAjD,CAAxiB,EAA+lBnB,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACW,wBAAhC,EAA0D,IAA1D,CAA9mB,EAA+qBpB,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACY,YAAhC,EAA8C,GAA9C,CAA9rB,EAAkvBrB,eAAe,CAACD,iBAAD,EAAoBU,WAAW,CAACa,qBAAhC,EAAuD,IAAvD,CAAjwB,EAA+zBvB,iBAAn0B,CAApB","sourcesContent":["var _binaryOpTokenMap;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { AstNodeType } from './Ast';\nexport var binaryOpTokenMap = (_binaryOpTokenMap = {}, _defineProperty(_binaryOpTokenMap, AstNodeType.PLUS_OP, '+'), _defineProperty(_binaryOpTokenMap, AstNodeType.MINUS_OP, '-'), _defineProperty(_binaryOpTokenMap, AstNodeType.TIMES_OP, '*'), _defineProperty(_binaryOpTokenMap, AstNodeType.DIV_OP, '/'), _defineProperty(_binaryOpTokenMap, AstNodeType.CONCATENATE_OP, '&'), _defineProperty(_binaryOpTokenMap, AstNodeType.POWER_OP, '^'), _defineProperty(_binaryOpTokenMap, AstNodeType.EQUALS_OP, '='), _defineProperty(_binaryOpTokenMap, AstNodeType.NOT_EQUAL_OP, '<>'), _defineProperty(_binaryOpTokenMap, AstNodeType.GREATER_THAN_OP, '>'), _defineProperty(_binaryOpTokenMap, AstNodeType.GREATER_THAN_OR_EQUAL_OP, '>='), _defineProperty(_binaryOpTokenMap, AstNodeType.LESS_THAN_OP, '<'), _defineProperty(_binaryOpTokenMap, AstNodeType.LESS_THAN_OR_EQUAL_OP, '<='), _binaryOpTokenMap);"]},"metadata":{},"sourceType":"module"}