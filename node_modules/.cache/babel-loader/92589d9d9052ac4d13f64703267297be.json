{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { equalSimpleCellAddress, isSimpleCellAddress, simpleCellAddress } from './Cell';\nimport { SheetsNotEqual } from './errors';\nimport { AstNodeType } from './parser';\nimport { RowsSpan } from './Span';\nexport var WRONG_RANGE_SIZE = 'AbsoluteCellRange: Wrong range size';\nexport function isSimpleCellRange(obj) {\n  if (obj && (_typeof(obj) === 'object' || typeof obj === 'function')) {\n    return 'start' in obj && isSimpleCellAddress(obj.start) && 'end' in obj && isSimpleCellAddress(obj.end);\n  } else {\n    return false;\n  }\n}\nexport var simpleCellRange = function simpleCellRange(start, end) {\n  return {\n    start: start,\n    end: end\n  };\n};\nexport var AbsoluteCellRange = /*#__PURE__*/function () {\n  function AbsoluteCellRange(start, end) {\n    _classCallCheck(this, AbsoluteCellRange);\n\n    if (start.sheet !== end.sheet) {\n      throw new SheetsNotEqual(start.sheet, end.sheet);\n    }\n\n    this.start = simpleCellAddress(start.sheet, start.col, start.row);\n    this.end = simpleCellAddress(end.sheet, end.col, end.row);\n  }\n\n  _createClass(AbsoluteCellRange, [{\n    key: \"sheet\",\n    get: function get() {\n      return this.start.sheet;\n    }\n  }, {\n    key: \"isFinite\",\n    value: function isFinite() {\n      return Number.isFinite(this.size());\n    }\n  }, {\n    key: \"doesOverlap\",\n    value: function doesOverlap(other) {\n      if (this.start.sheet != other.start.sheet) {\n        return false;\n      }\n\n      if (this.end.row < other.start.row || this.start.row > other.end.row) {\n        return false;\n      }\n\n      if (this.end.col < other.start.col || this.start.col > other.end.col) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"addressInRange\",\n    value: function addressInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.row <= address.row && this.end.row >= address.row && this.start.col <= address.col && this.end.col >= address.col;\n    }\n  }, {\n    key: \"columnInRange\",\n    value: function columnInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.col <= address.col && this.end.col >= address.col;\n    }\n  }, {\n    key: \"rowInRange\",\n    value: function rowInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.row <= address.row && this.end.row >= address.row;\n    }\n  }, {\n    key: \"containsRange\",\n    value: function containsRange(range) {\n      return this.addressInRange(range.start) && this.addressInRange(range.end);\n    }\n  }, {\n    key: \"intersectionWith\",\n    value: function intersectionWith(other) {\n      if (this.sheet !== other.start.sheet) {\n        return undefined;\n      }\n\n      var startRow = Math.max(this.start.row, other.start.row);\n      var endRow = Math.min(this.end.row, other.end.row);\n      var startCol = Math.max(this.start.col, other.start.col);\n      var endCol = Math.min(this.end.col, other.end.col);\n\n      if (startRow > endRow || startCol > endCol) {\n        return undefined;\n      }\n\n      return new AbsoluteCellRange(simpleCellAddress(this.sheet, startCol, startRow), simpleCellAddress(this.sheet, endCol, endRow));\n    }\n  }, {\n    key: \"includesRow\",\n    value: function includesRow(row) {\n      return this.start.row < row && this.end.row >= row;\n    }\n  }, {\n    key: \"includesColumn\",\n    value: function includesColumn(column) {\n      return this.start.col < column && this.end.col >= column;\n    }\n  }, {\n    key: \"shiftByRows\",\n    value: function shiftByRows(numberOfRows) {\n      this.start.row += numberOfRows;\n      this.end.row += numberOfRows;\n    }\n  }, {\n    key: \"expandByRows\",\n    value: function expandByRows(numberOfRows) {\n      this.end.row += numberOfRows;\n    }\n  }, {\n    key: \"shiftByColumns\",\n    value: function shiftByColumns(numberOfColumns) {\n      this.start.col += numberOfColumns;\n      this.end.col += numberOfColumns;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, byRows) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, this.start.col + byCols, this.start.row + byRows), this.width(), this.height());\n    }\n  }, {\n    key: \"expandByColumns\",\n    value: function expandByColumns(numberOfColumns) {\n      this.end.col += numberOfColumns;\n    }\n  }, {\n    key: \"moveToSheet\",\n    value: function moveToSheet(toSheet) {\n      this.start.sheet = toSheet;\n      this.end.sheet = toSheet;\n    }\n  }, {\n    key: \"removeSpan\",\n    value: function removeSpan(span) {\n      if (span instanceof RowsSpan) {\n        this.removeRows(span.start, span.end);\n      } else {\n        this.removeColumns(span.start, span.end);\n      }\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(rowStart, rowEnd) {\n      if (rowStart > this.end.row) {\n        return;\n      }\n\n      if (rowEnd < this.start.row) {\n        var numberOfRows = rowEnd - rowStart + 1;\n        return this.shiftByRows(-numberOfRows);\n      }\n\n      if (rowStart <= this.start.row) {\n        this.start.row = rowStart;\n      }\n\n      this.end.row -= Math.min(rowEnd, this.end.row) - rowStart + 1;\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(columnStart, columnEnd) {\n      if (columnStart > this.end.col) {\n        return;\n      }\n\n      if (columnEnd < this.start.col) {\n        var numberOfColumns = columnEnd - columnStart + 1;\n        return this.shiftByColumns(-numberOfColumns);\n      }\n\n      if (columnStart <= this.start.col) {\n        this.start.col = columnStart;\n      }\n\n      this.end.col -= Math.min(columnEnd, this.end.col) - columnStart + 1;\n    }\n  }, {\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.width() <= 0 || this.height() <= 0;\n    }\n  }, {\n    key: \"rangeWithSameWidth\",\n    value: function rangeWithSameWidth(startRow, numberOfRows) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, this.start.col, startRow), this.width(), numberOfRows);\n    }\n  }, {\n    key: \"rangeWithSameHeight\",\n    value: function rangeWithSameHeight(startColumn, numberOfColumns) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, startColumn, this.start.row), numberOfColumns, this.height());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.start.sheet, \",\").concat(this.start.col, \",\").concat(this.start.row, \",\").concat(this.end.col, \",\").concat(this.end.row);\n    }\n  }, {\n    key: \"width\",\n    value: function width() {\n      return this.end.col - this.start.col + 1;\n    }\n  }, {\n    key: \"height\",\n    value: function height() {\n      return this.end.row - this.start.row + 1;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.height() * this.width();\n    }\n  }, {\n    key: \"arrayOfAddressesInRange\",\n    value: function arrayOfAddressesInRange() {\n      var result = [];\n\n      for (var y = 0; y < this.height(); ++y) {\n        result[y] = [];\n\n        for (var x = 0; x < this.width(); ++x) {\n          var value = simpleCellAddress(this.sheet, this.start.col + x, this.start.row + y);\n          result[y].push(value);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"withStart\",\n    value: function withStart(newStart) {\n      return new AbsoluteCellRange(newStart, this.end);\n    }\n  }, {\n    key: \"sameDimensionsAs\",\n    value: function sameDimensionsAs(other) {\n      return this.width() === other.width() && this.height() === other.height();\n    }\n  }, {\n    key: \"sameAs\",\n    value: function sameAs(other) {\n      return equalSimpleCellAddress(this.start, other.start) && equalSimpleCellAddress(this.end, other.end);\n    }\n  }, {\n    key: \"addressesArrayMap\",\n    value: function addressesArrayMap(dependencyGraph, op) {\n      var ret = [];\n      var currentRow = this.start.row;\n\n      while (currentRow <= this.effectiveEndRow(dependencyGraph)) {\n        var currentColumn = this.start.col;\n        var tmp = [];\n\n        while (currentColumn <= this.effectiveEndColumn(dependencyGraph)) {\n          tmp.push(op(simpleCellAddress(this.start.sheet, currentColumn, currentRow)));\n          currentColumn++;\n        }\n\n        ret.push(tmp);\n        currentRow++;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"addresses\",\n    value: function addresses(dependencyGraph) {\n      var ret = [];\n      var currentRow = this.start.row;\n      var limitRow = this.effectiveEndRow(dependencyGraph);\n      var limitColumn = this.effectiveEndColumn(dependencyGraph);\n\n      while (currentRow <= limitRow) {\n        var currentColumn = this.start.col;\n\n        while (currentColumn <= limitColumn) {\n          ret.push(simpleCellAddress(this.start.sheet, currentColumn, currentRow));\n          currentColumn++;\n        }\n\n        currentRow++;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"addressesWithDirection\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function addressesWithDirection(right, bottom, dependencyGraph) {\n      var currentRow, currentColumn, _currentRow, _currentColumn, _currentRow2, _currentColumn2, _currentRow3, _currentColumn3;\n\n      return _regeneratorRuntime.wrap(function addressesWithDirection$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(right > 0)) {\n                _context.next = 30;\n                break;\n              }\n\n              if (!(bottom > 0)) {\n                _context.next = 16;\n                break;\n              }\n\n              currentRow = this.effectiveEndRow(dependencyGraph);\n\n            case 3:\n              if (!(currentRow >= this.start.row)) {\n                _context.next = 14;\n                break;\n              }\n\n              currentColumn = this.effectiveEndColumn(dependencyGraph);\n\n            case 5:\n              if (!(currentColumn >= this.start.col)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 8;\n              return simpleCellAddress(this.start.sheet, currentColumn, currentRow);\n\n            case 8:\n              currentColumn -= 1;\n              _context.next = 5;\n              break;\n\n            case 11:\n              currentRow -= 1;\n              _context.next = 3;\n              break;\n\n            case 14:\n              _context.next = 28;\n              break;\n\n            case 16:\n              _currentRow = this.start.row;\n\n            case 17:\n              if (!(_currentRow <= this.effectiveEndRow(dependencyGraph))) {\n                _context.next = 28;\n                break;\n              }\n\n              _currentColumn = this.effectiveEndColumn(dependencyGraph);\n\n            case 19:\n              if (!(_currentColumn >= this.start.col)) {\n                _context.next = 25;\n                break;\n              }\n\n              _context.next = 22;\n              return simpleCellAddress(this.start.sheet, _currentColumn, _currentRow);\n\n            case 22:\n              _currentColumn -= 1;\n              _context.next = 19;\n              break;\n\n            case 25:\n              _currentRow += 1;\n              _context.next = 17;\n              break;\n\n            case 28:\n              _context.next = 57;\n              break;\n\n            case 30:\n              if (!(bottom > 0)) {\n                _context.next = 45;\n                break;\n              }\n\n              _currentRow2 = this.effectiveEndRow(dependencyGraph);\n\n            case 32:\n              if (!(_currentRow2 >= this.start.row)) {\n                _context.next = 43;\n                break;\n              }\n\n              _currentColumn2 = this.start.col;\n\n            case 34:\n              if (!(_currentColumn2 <= this.effectiveEndColumn(dependencyGraph))) {\n                _context.next = 40;\n                break;\n              }\n\n              _context.next = 37;\n              return simpleCellAddress(this.start.sheet, _currentColumn2, _currentRow2);\n\n            case 37:\n              _currentColumn2 += 1;\n              _context.next = 34;\n              break;\n\n            case 40:\n              _currentRow2 -= 1;\n              _context.next = 32;\n              break;\n\n            case 43:\n              _context.next = 57;\n              break;\n\n            case 45:\n              _currentRow3 = this.start.row;\n\n            case 46:\n              if (!(_currentRow3 <= this.effectiveEndRow(dependencyGraph))) {\n                _context.next = 57;\n                break;\n              }\n\n              _currentColumn3 = this.start.col;\n\n            case 48:\n              if (!(_currentColumn3 <= this.effectiveEndColumn(dependencyGraph))) {\n                _context.next = 54;\n                break;\n              }\n\n              _context.next = 51;\n              return simpleCellAddress(this.start.sheet, _currentColumn3, _currentRow3);\n\n            case 51:\n              _currentColumn3 += 1;\n              _context.next = 48;\n              break;\n\n            case 54:\n              _currentRow3 += 1;\n              _context.next = 46;\n              break;\n\n            case 57:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, addressesWithDirection, this);\n    })\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(col, row) {\n      if (col < 0 || row < 0 || row > this.height() - 1 || col > this.width() - 1) {\n        throw Error('Index out of bound');\n      }\n\n      return simpleCellAddress(this.start.sheet, this.start.col + col, this.start.row + row);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {\n      return this.end.col >= maxColumns || this.end.row >= maxRows;\n    }\n  }, {\n    key: \"effectiveEndColumn\",\n    value: function effectiveEndColumn(_dependencyGraph) {\n      return this.end.col;\n    }\n  }, {\n    key: \"effectiveEndRow\",\n    value: function effectiveEndRow(_dependencyGraph) {\n      return this.end.row;\n    }\n  }], [{\n    key: \"fromAst\",\n    value: function fromAst(ast, baseAddress) {\n      if (ast.type === AstNodeType.CELL_RANGE) {\n        return AbsoluteCellRange.fromCellRange(ast, baseAddress);\n      } else if (ast.type === AstNodeType.COLUMN_RANGE) {\n        return AbsoluteColumnRange.fromColumnRange(ast, baseAddress);\n      } else {\n        return AbsoluteRowRange.fromRowRangeAst(ast, baseAddress);\n      }\n    }\n  }, {\n    key: \"fromCellRange\",\n    value: function fromCellRange(x, baseAddress) {\n      return new AbsoluteCellRange(x.start.toSimpleCellAddress(baseAddress), x.end.toSimpleCellAddress(baseAddress));\n    }\n  }, {\n    key: \"fromCellRangeOrUndef\",\n    value: function fromCellRangeOrUndef(x, baseAddress) {\n      try {\n        return new AbsoluteCellRange(x.start.toSimpleCellAddress(baseAddress), x.end.toSimpleCellAddress(baseAddress));\n      } catch (e) {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"spanFrom\",\n    value: function spanFrom(topLeftCorner, width, height) {\n      if (!Number.isFinite(width) && Number.isFinite(height)) {\n        if (topLeftCorner.col !== 0) {\n          throw new Error(WRONG_RANGE_SIZE);\n        }\n\n        return new AbsoluteRowRange(topLeftCorner.sheet, topLeftCorner.row, topLeftCorner.row + height - 1);\n      } else if (!Number.isFinite(height) && Number.isFinite(width)) {\n        if (topLeftCorner.row !== 0) {\n          throw new Error(WRONG_RANGE_SIZE);\n        }\n\n        return new AbsoluteColumnRange(topLeftCorner.sheet, topLeftCorner.col, topLeftCorner.col + width - 1);\n      } else if (Number.isFinite(height) && Number.isFinite(width)) {\n        return new AbsoluteCellRange(topLeftCorner, simpleCellAddress(topLeftCorner.sheet, topLeftCorner.col + width - 1, topLeftCorner.row + height - 1));\n      }\n\n      throw new Error(WRONG_RANGE_SIZE);\n    }\n  }, {\n    key: \"fromCoordinates\",\n    value: function fromCoordinates(sheet, x1, y1, x2, y2) {\n      return new AbsoluteCellRange(simpleCellAddress(sheet, x1, y1), simpleCellAddress(sheet, x2, y2));\n    }\n  }]);\n\n  return AbsoluteCellRange;\n}();\nexport var AbsoluteColumnRange = /*#__PURE__*/function (_AbsoluteCellRange) {\n  _inherits(AbsoluteColumnRange, _AbsoluteCellRange);\n\n  var _super = _createSuper(AbsoluteColumnRange);\n\n  function AbsoluteColumnRange(sheet, columnStart, columnEnd) {\n    _classCallCheck(this, AbsoluteColumnRange);\n\n    return _super.call(this, simpleCellAddress(sheet, columnStart, 0), simpleCellAddress(sheet, columnEnd, Number.POSITIVE_INFINITY));\n  }\n\n  _createClass(AbsoluteColumnRange, [{\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.width() <= 0;\n    }\n  }, {\n    key: \"shiftByRows\",\n    value: function shiftByRows(_numberOfRows) {\n      return;\n    }\n  }, {\n    key: \"expandByRows\",\n    value: function expandByRows(_numberOfRows) {\n      return;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, _byRows) {\n      return new AbsoluteColumnRange(this.sheet, this.start.col + byCols, this.end.col + byCols);\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(_rowStart, _rowEnd) {\n      return;\n    }\n  }, {\n    key: \"rangeWithSameHeight\",\n    value: function rangeWithSameHeight(startColumn, numberOfColumns) {\n      return new AbsoluteColumnRange(this.sheet, startColumn, startColumn + numberOfColumns - 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, _maxRows) {\n      return this.end.col >= maxColumns;\n    }\n  }, {\n    key: \"effectiveEndRow\",\n    value: function effectiveEndRow(dependencyGraph) {\n      return dependencyGraph.getSheetHeight(this.sheet) - 1;\n    }\n  }], [{\n    key: \"fromColumnRange\",\n    value: function fromColumnRange(x, baseAddress) {\n      var start = x.start.toSimpleColumnAddress(baseAddress);\n      var end = x.end.toSimpleColumnAddress(baseAddress);\n\n      if (start.sheet !== end.sheet) {\n        throw new SheetsNotEqual(start.sheet, end.sheet);\n      }\n\n      return new AbsoluteColumnRange(start.sheet, start.col, end.col);\n    }\n  }]);\n\n  return AbsoluteColumnRange;\n}(AbsoluteCellRange);\nexport var AbsoluteRowRange = /*#__PURE__*/function (_AbsoluteCellRange2) {\n  _inherits(AbsoluteRowRange, _AbsoluteCellRange2);\n\n  var _super2 = _createSuper(AbsoluteRowRange);\n\n  function AbsoluteRowRange(sheet, rowStart, rowEnd) {\n    _classCallCheck(this, AbsoluteRowRange);\n\n    return _super2.call(this, simpleCellAddress(sheet, 0, rowStart), simpleCellAddress(sheet, Number.POSITIVE_INFINITY, rowEnd));\n  }\n\n  _createClass(AbsoluteRowRange, [{\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.height() <= 0;\n    }\n  }, {\n    key: \"shiftByColumns\",\n    value: function shiftByColumns(_numberOfColumns) {\n      return;\n    }\n  }, {\n    key: \"expandByColumns\",\n    value: function expandByColumns(_numberOfColumns) {\n      return;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, byRows) {\n      return new AbsoluteRowRange(this.sheet, this.start.row + byRows, this.end.row + byRows);\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(_columnStart, _columnEnd) {\n      return;\n    }\n  }, {\n    key: \"rangeWithSameWidth\",\n    value: function rangeWithSameWidth(startRow, numberOfRows) {\n      return new AbsoluteRowRange(this.sheet, startRow, startRow + numberOfRows - 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(_maxColumns, maxRows) {\n      return this.end.row >= maxRows;\n    }\n  }, {\n    key: \"effectiveEndColumn\",\n    value: function effectiveEndColumn(dependencyGraph) {\n      return dependencyGraph.getSheetWidth(this.sheet) - 1;\n    }\n  }], [{\n    key: \"fromRowRangeAst\",\n    value: function fromRowRangeAst(x, baseAddress) {\n      var start = x.start.toSimpleRowAddress(baseAddress);\n      var end = x.end.toSimpleRowAddress(baseAddress);\n\n      if (start.sheet !== end.sheet) {\n        throw new SheetsNotEqual(start.sheet, end.sheet);\n      }\n\n      return new AbsoluteRowRange(start.sheet, start.row, end.row);\n    }\n  }]);\n\n  return AbsoluteRowRange;\n}(AbsoluteCellRange);","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/AbsoluteCellRange.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","writable","configurable","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_typeof","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","defineProperty","key","_createClass","protoProps","staticProps","obj","Symbol","iterator","equalSimpleCellAddress","isSimpleCellAddress","simpleCellAddress","SheetsNotEqual","AstNodeType","RowsSpan","WRONG_RANGE_SIZE","isSimpleCellRange","start","end","simpleCellRange","AbsoluteCellRange","sheet","col","row","get","isFinite","Number","size","doesOverlap","other","addressInRange","address","columnInRange","rowInRange","containsRange","range","intersectionWith","undefined","startRow","Math","max","endRow","min","startCol","endCol","includesRow","includesColumn","column","shiftByRows","numberOfRows","expandByRows","shiftByColumns","numberOfColumns","shifted","byCols","byRows","spanFrom","width","height","expandByColumns","moveToSheet","toSheet","removeSpan","span","removeRows","removeColumns","rowStart","rowEnd","columnStart","columnEnd","shouldBeRemoved","rangeWithSameWidth","rangeWithSameHeight","startColumn","toString","concat","arrayOfAddressesInRange","y","x","push","withStart","newStart","sameDimensionsAs","sameAs","addressesArrayMap","dependencyGraph","op","ret","currentRow","effectiveEndRow","currentColumn","tmp","effectiveEndColumn","addresses","limitRow","limitColumn","mark","addressesWithDirection","right","bottom","_currentRow","_currentColumn","_currentRow2","_currentColumn2","_currentRow3","_currentColumn3","wrap","addressesWithDirection$","_context","prev","next","stop","getAddress","Error","exceedsSheetSizeLimits","maxColumns","maxRows","_dependencyGraph","fromAst","ast","baseAddress","type","CELL_RANGE","fromCellRange","COLUMN_RANGE","AbsoluteColumnRange","fromColumnRange","AbsoluteRowRange","fromRowRangeAst","toSimpleCellAddress","fromCellRangeOrUndef","topLeftCorner","fromCoordinates","x1","y1","x2","y2","_AbsoluteCellRange","_super","POSITIVE_INFINITY","_numberOfRows","_byRows","_rowStart","_rowEnd","_maxRows","getSheetHeight","toSimpleColumnAddress","_AbsoluteCellRange2","_super2","_numberOfColumns","_columnStart","_columnEnd","_maxColumns","getSheetWidth","toSimpleRowAddress"],"mappings":"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","sourcesContent":["function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.number.is-finite.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { equalSimpleCellAddress, isSimpleCellAddress, simpleCellAddress } from './Cell';\nimport { SheetsNotEqual } from './errors';\nimport { AstNodeType } from './parser';\nimport { RowsSpan } from './Span';\nexport var WRONG_RANGE_SIZE = 'AbsoluteCellRange: Wrong range size';\nexport function isSimpleCellRange(obj) {\n  if (obj && (_typeof(obj) === 'object' || typeof obj === 'function')) {\n    return 'start' in obj && isSimpleCellAddress(obj.start) && 'end' in obj && isSimpleCellAddress(obj.end);\n  } else {\n    return false;\n  }\n}\nexport var simpleCellRange = function simpleCellRange(start, end) {\n  return {\n    start: start,\n    end: end\n  };\n};\nexport var AbsoluteCellRange = /*#__PURE__*/function () {\n  function AbsoluteCellRange(start, end) {\n    _classCallCheck(this, AbsoluteCellRange);\n\n    if (start.sheet !== end.sheet) {\n      throw new SheetsNotEqual(start.sheet, end.sheet);\n    }\n\n    this.start = simpleCellAddress(start.sheet, start.col, start.row);\n    this.end = simpleCellAddress(end.sheet, end.col, end.row);\n  }\n\n  _createClass(AbsoluteCellRange, [{\n    key: \"sheet\",\n    get: function get() {\n      return this.start.sheet;\n    }\n  }, {\n    key: \"isFinite\",\n    value: function isFinite() {\n      return Number.isFinite(this.size());\n    }\n  }, {\n    key: \"doesOverlap\",\n    value: function doesOverlap(other) {\n      if (this.start.sheet != other.start.sheet) {\n        return false;\n      }\n\n      if (this.end.row < other.start.row || this.start.row > other.end.row) {\n        return false;\n      }\n\n      if (this.end.col < other.start.col || this.start.col > other.end.col) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"addressInRange\",\n    value: function addressInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.row <= address.row && this.end.row >= address.row && this.start.col <= address.col && this.end.col >= address.col;\n    }\n  }, {\n    key: \"columnInRange\",\n    value: function columnInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.col <= address.col && this.end.col >= address.col;\n    }\n  }, {\n    key: \"rowInRange\",\n    value: function rowInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.row <= address.row && this.end.row >= address.row;\n    }\n  }, {\n    key: \"containsRange\",\n    value: function containsRange(range) {\n      return this.addressInRange(range.start) && this.addressInRange(range.end);\n    }\n  }, {\n    key: \"intersectionWith\",\n    value: function intersectionWith(other) {\n      if (this.sheet !== other.start.sheet) {\n        return undefined;\n      }\n\n      var startRow = Math.max(this.start.row, other.start.row);\n      var endRow = Math.min(this.end.row, other.end.row);\n      var startCol = Math.max(this.start.col, other.start.col);\n      var endCol = Math.min(this.end.col, other.end.col);\n\n      if (startRow > endRow || startCol > endCol) {\n        return undefined;\n      }\n\n      return new AbsoluteCellRange(simpleCellAddress(this.sheet, startCol, startRow), simpleCellAddress(this.sheet, endCol, endRow));\n    }\n  }, {\n    key: \"includesRow\",\n    value: function includesRow(row) {\n      return this.start.row < row && this.end.row >= row;\n    }\n  }, {\n    key: \"includesColumn\",\n    value: function includesColumn(column) {\n      return this.start.col < column && this.end.col >= column;\n    }\n  }, {\n    key: \"shiftByRows\",\n    value: function shiftByRows(numberOfRows) {\n      this.start.row += numberOfRows;\n      this.end.row += numberOfRows;\n    }\n  }, {\n    key: \"expandByRows\",\n    value: function expandByRows(numberOfRows) {\n      this.end.row += numberOfRows;\n    }\n  }, {\n    key: \"shiftByColumns\",\n    value: function shiftByColumns(numberOfColumns) {\n      this.start.col += numberOfColumns;\n      this.end.col += numberOfColumns;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, byRows) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, this.start.col + byCols, this.start.row + byRows), this.width(), this.height());\n    }\n  }, {\n    key: \"expandByColumns\",\n    value: function expandByColumns(numberOfColumns) {\n      this.end.col += numberOfColumns;\n    }\n  }, {\n    key: \"moveToSheet\",\n    value: function moveToSheet(toSheet) {\n      this.start.sheet = toSheet;\n      this.end.sheet = toSheet;\n    }\n  }, {\n    key: \"removeSpan\",\n    value: function removeSpan(span) {\n      if (span instanceof RowsSpan) {\n        this.removeRows(span.start, span.end);\n      } else {\n        this.removeColumns(span.start, span.end);\n      }\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(rowStart, rowEnd) {\n      if (rowStart > this.end.row) {\n        return;\n      }\n\n      if (rowEnd < this.start.row) {\n        var numberOfRows = rowEnd - rowStart + 1;\n        return this.shiftByRows(-numberOfRows);\n      }\n\n      if (rowStart <= this.start.row) {\n        this.start.row = rowStart;\n      }\n\n      this.end.row -= Math.min(rowEnd, this.end.row) - rowStart + 1;\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(columnStart, columnEnd) {\n      if (columnStart > this.end.col) {\n        return;\n      }\n\n      if (columnEnd < this.start.col) {\n        var numberOfColumns = columnEnd - columnStart + 1;\n        return this.shiftByColumns(-numberOfColumns);\n      }\n\n      if (columnStart <= this.start.col) {\n        this.start.col = columnStart;\n      }\n\n      this.end.col -= Math.min(columnEnd, this.end.col) - columnStart + 1;\n    }\n  }, {\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.width() <= 0 || this.height() <= 0;\n    }\n  }, {\n    key: \"rangeWithSameWidth\",\n    value: function rangeWithSameWidth(startRow, numberOfRows) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, this.start.col, startRow), this.width(), numberOfRows);\n    }\n  }, {\n    key: \"rangeWithSameHeight\",\n    value: function rangeWithSameHeight(startColumn, numberOfColumns) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, startColumn, this.start.row), numberOfColumns, this.height());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.start.sheet, \",\").concat(this.start.col, \",\").concat(this.start.row, \",\").concat(this.end.col, \",\").concat(this.end.row);\n    }\n  }, {\n    key: \"width\",\n    value: function width() {\n      return this.end.col - this.start.col + 1;\n    }\n  }, {\n    key: \"height\",\n    value: function height() {\n      return this.end.row - this.start.row + 1;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.height() * this.width();\n    }\n  }, {\n    key: \"arrayOfAddressesInRange\",\n    value: function arrayOfAddressesInRange() {\n      var result = [];\n\n      for (var y = 0; y < this.height(); ++y) {\n        result[y] = [];\n\n        for (var x = 0; x < this.width(); ++x) {\n          var value = simpleCellAddress(this.sheet, this.start.col + x, this.start.row + y);\n          result[y].push(value);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"withStart\",\n    value: function withStart(newStart) {\n      return new AbsoluteCellRange(newStart, this.end);\n    }\n  }, {\n    key: \"sameDimensionsAs\",\n    value: function sameDimensionsAs(other) {\n      return this.width() === other.width() && this.height() === other.height();\n    }\n  }, {\n    key: \"sameAs\",\n    value: function sameAs(other) {\n      return equalSimpleCellAddress(this.start, other.start) && equalSimpleCellAddress(this.end, other.end);\n    }\n  }, {\n    key: \"addressesArrayMap\",\n    value: function addressesArrayMap(dependencyGraph, op) {\n      var ret = [];\n      var currentRow = this.start.row;\n\n      while (currentRow <= this.effectiveEndRow(dependencyGraph)) {\n        var currentColumn = this.start.col;\n        var tmp = [];\n\n        while (currentColumn <= this.effectiveEndColumn(dependencyGraph)) {\n          tmp.push(op(simpleCellAddress(this.start.sheet, currentColumn, currentRow)));\n          currentColumn++;\n        }\n\n        ret.push(tmp);\n        currentRow++;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"addresses\",\n    value: function addresses(dependencyGraph) {\n      var ret = [];\n      var currentRow = this.start.row;\n      var limitRow = this.effectiveEndRow(dependencyGraph);\n      var limitColumn = this.effectiveEndColumn(dependencyGraph);\n\n      while (currentRow <= limitRow) {\n        var currentColumn = this.start.col;\n\n        while (currentColumn <= limitColumn) {\n          ret.push(simpleCellAddress(this.start.sheet, currentColumn, currentRow));\n          currentColumn++;\n        }\n\n        currentRow++;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"addressesWithDirection\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function addressesWithDirection(right, bottom, dependencyGraph) {\n      var currentRow, currentColumn, _currentRow, _currentColumn, _currentRow2, _currentColumn2, _currentRow3, _currentColumn3;\n\n      return regeneratorRuntime.wrap(function addressesWithDirection$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(right > 0)) {\n                _context.next = 30;\n                break;\n              }\n\n              if (!(bottom > 0)) {\n                _context.next = 16;\n                break;\n              }\n\n              currentRow = this.effectiveEndRow(dependencyGraph);\n\n            case 3:\n              if (!(currentRow >= this.start.row)) {\n                _context.next = 14;\n                break;\n              }\n\n              currentColumn = this.effectiveEndColumn(dependencyGraph);\n\n            case 5:\n              if (!(currentColumn >= this.start.col)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 8;\n              return simpleCellAddress(this.start.sheet, currentColumn, currentRow);\n\n            case 8:\n              currentColumn -= 1;\n              _context.next = 5;\n              break;\n\n            case 11:\n              currentRow -= 1;\n              _context.next = 3;\n              break;\n\n            case 14:\n              _context.next = 28;\n              break;\n\n            case 16:\n              _currentRow = this.start.row;\n\n            case 17:\n              if (!(_currentRow <= this.effectiveEndRow(dependencyGraph))) {\n                _context.next = 28;\n                break;\n              }\n\n              _currentColumn = this.effectiveEndColumn(dependencyGraph);\n\n            case 19:\n              if (!(_currentColumn >= this.start.col)) {\n                _context.next = 25;\n                break;\n              }\n\n              _context.next = 22;\n              return simpleCellAddress(this.start.sheet, _currentColumn, _currentRow);\n\n            case 22:\n              _currentColumn -= 1;\n              _context.next = 19;\n              break;\n\n            case 25:\n              _currentRow += 1;\n              _context.next = 17;\n              break;\n\n            case 28:\n              _context.next = 57;\n              break;\n\n            case 30:\n              if (!(bottom > 0)) {\n                _context.next = 45;\n                break;\n              }\n\n              _currentRow2 = this.effectiveEndRow(dependencyGraph);\n\n            case 32:\n              if (!(_currentRow2 >= this.start.row)) {\n                _context.next = 43;\n                break;\n              }\n\n              _currentColumn2 = this.start.col;\n\n            case 34:\n              if (!(_currentColumn2 <= this.effectiveEndColumn(dependencyGraph))) {\n                _context.next = 40;\n                break;\n              }\n\n              _context.next = 37;\n              return simpleCellAddress(this.start.sheet, _currentColumn2, _currentRow2);\n\n            case 37:\n              _currentColumn2 += 1;\n              _context.next = 34;\n              break;\n\n            case 40:\n              _currentRow2 -= 1;\n              _context.next = 32;\n              break;\n\n            case 43:\n              _context.next = 57;\n              break;\n\n            case 45:\n              _currentRow3 = this.start.row;\n\n            case 46:\n              if (!(_currentRow3 <= this.effectiveEndRow(dependencyGraph))) {\n                _context.next = 57;\n                break;\n              }\n\n              _currentColumn3 = this.start.col;\n\n            case 48:\n              if (!(_currentColumn3 <= this.effectiveEndColumn(dependencyGraph))) {\n                _context.next = 54;\n                break;\n              }\n\n              _context.next = 51;\n              return simpleCellAddress(this.start.sheet, _currentColumn3, _currentRow3);\n\n            case 51:\n              _currentColumn3 += 1;\n              _context.next = 48;\n              break;\n\n            case 54:\n              _currentRow3 += 1;\n              _context.next = 46;\n              break;\n\n            case 57:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, addressesWithDirection, this);\n    })\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(col, row) {\n      if (col < 0 || row < 0 || row > this.height() - 1 || col > this.width() - 1) {\n        throw Error('Index out of bound');\n      }\n\n      return simpleCellAddress(this.start.sheet, this.start.col + col, this.start.row + row);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {\n      return this.end.col >= maxColumns || this.end.row >= maxRows;\n    }\n  }, {\n    key: \"effectiveEndColumn\",\n    value: function effectiveEndColumn(_dependencyGraph) {\n      return this.end.col;\n    }\n  }, {\n    key: \"effectiveEndRow\",\n    value: function effectiveEndRow(_dependencyGraph) {\n      return this.end.row;\n    }\n  }], [{\n    key: \"fromAst\",\n    value: function fromAst(ast, baseAddress) {\n      if (ast.type === AstNodeType.CELL_RANGE) {\n        return AbsoluteCellRange.fromCellRange(ast, baseAddress);\n      } else if (ast.type === AstNodeType.COLUMN_RANGE) {\n        return AbsoluteColumnRange.fromColumnRange(ast, baseAddress);\n      } else {\n        return AbsoluteRowRange.fromRowRangeAst(ast, baseAddress);\n      }\n    }\n  }, {\n    key: \"fromCellRange\",\n    value: function fromCellRange(x, baseAddress) {\n      return new AbsoluteCellRange(x.start.toSimpleCellAddress(baseAddress), x.end.toSimpleCellAddress(baseAddress));\n    }\n  }, {\n    key: \"fromCellRangeOrUndef\",\n    value: function fromCellRangeOrUndef(x, baseAddress) {\n      try {\n        return new AbsoluteCellRange(x.start.toSimpleCellAddress(baseAddress), x.end.toSimpleCellAddress(baseAddress));\n      } catch (e) {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"spanFrom\",\n    value: function spanFrom(topLeftCorner, width, height) {\n      if (!Number.isFinite(width) && Number.isFinite(height)) {\n        if (topLeftCorner.col !== 0) {\n          throw new Error(WRONG_RANGE_SIZE);\n        }\n\n        return new AbsoluteRowRange(topLeftCorner.sheet, topLeftCorner.row, topLeftCorner.row + height - 1);\n      } else if (!Number.isFinite(height) && Number.isFinite(width)) {\n        if (topLeftCorner.row !== 0) {\n          throw new Error(WRONG_RANGE_SIZE);\n        }\n\n        return new AbsoluteColumnRange(topLeftCorner.sheet, topLeftCorner.col, topLeftCorner.col + width - 1);\n      } else if (Number.isFinite(height) && Number.isFinite(width)) {\n        return new AbsoluteCellRange(topLeftCorner, simpleCellAddress(topLeftCorner.sheet, topLeftCorner.col + width - 1, topLeftCorner.row + height - 1));\n      }\n\n      throw new Error(WRONG_RANGE_SIZE);\n    }\n  }, {\n    key: \"fromCoordinates\",\n    value: function fromCoordinates(sheet, x1, y1, x2, y2) {\n      return new AbsoluteCellRange(simpleCellAddress(sheet, x1, y1), simpleCellAddress(sheet, x2, y2));\n    }\n  }]);\n\n  return AbsoluteCellRange;\n}();\nexport var AbsoluteColumnRange = /*#__PURE__*/function (_AbsoluteCellRange) {\n  _inherits(AbsoluteColumnRange, _AbsoluteCellRange);\n\n  var _super = _createSuper(AbsoluteColumnRange);\n\n  function AbsoluteColumnRange(sheet, columnStart, columnEnd) {\n    _classCallCheck(this, AbsoluteColumnRange);\n\n    return _super.call(this, simpleCellAddress(sheet, columnStart, 0), simpleCellAddress(sheet, columnEnd, Number.POSITIVE_INFINITY));\n  }\n\n  _createClass(AbsoluteColumnRange, [{\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.width() <= 0;\n    }\n  }, {\n    key: \"shiftByRows\",\n    value: function shiftByRows(_numberOfRows) {\n      return;\n    }\n  }, {\n    key: \"expandByRows\",\n    value: function expandByRows(_numberOfRows) {\n      return;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, _byRows) {\n      return new AbsoluteColumnRange(this.sheet, this.start.col + byCols, this.end.col + byCols);\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(_rowStart, _rowEnd) {\n      return;\n    }\n  }, {\n    key: \"rangeWithSameHeight\",\n    value: function rangeWithSameHeight(startColumn, numberOfColumns) {\n      return new AbsoluteColumnRange(this.sheet, startColumn, startColumn + numberOfColumns - 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, _maxRows) {\n      return this.end.col >= maxColumns;\n    }\n  }, {\n    key: \"effectiveEndRow\",\n    value: function effectiveEndRow(dependencyGraph) {\n      return dependencyGraph.getSheetHeight(this.sheet) - 1;\n    }\n  }], [{\n    key: \"fromColumnRange\",\n    value: function fromColumnRange(x, baseAddress) {\n      var start = x.start.toSimpleColumnAddress(baseAddress);\n      var end = x.end.toSimpleColumnAddress(baseAddress);\n\n      if (start.sheet !== end.sheet) {\n        throw new SheetsNotEqual(start.sheet, end.sheet);\n      }\n\n      return new AbsoluteColumnRange(start.sheet, start.col, end.col);\n    }\n  }]);\n\n  return AbsoluteColumnRange;\n}(AbsoluteCellRange);\nexport var AbsoluteRowRange = /*#__PURE__*/function (_AbsoluteCellRange2) {\n  _inherits(AbsoluteRowRange, _AbsoluteCellRange2);\n\n  var _super2 = _createSuper(AbsoluteRowRange);\n\n  function AbsoluteRowRange(sheet, rowStart, rowEnd) {\n    _classCallCheck(this, AbsoluteRowRange);\n\n    return _super2.call(this, simpleCellAddress(sheet, 0, rowStart), simpleCellAddress(sheet, Number.POSITIVE_INFINITY, rowEnd));\n  }\n\n  _createClass(AbsoluteRowRange, [{\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.height() <= 0;\n    }\n  }, {\n    key: \"shiftByColumns\",\n    value: function shiftByColumns(_numberOfColumns) {\n      return;\n    }\n  }, {\n    key: \"expandByColumns\",\n    value: function expandByColumns(_numberOfColumns) {\n      return;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, byRows) {\n      return new AbsoluteRowRange(this.sheet, this.start.row + byRows, this.end.row + byRows);\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(_columnStart, _columnEnd) {\n      return;\n    }\n  }, {\n    key: \"rangeWithSameWidth\",\n    value: function rangeWithSameWidth(startRow, numberOfRows) {\n      return new AbsoluteRowRange(this.sheet, startRow, startRow + numberOfRows - 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(_maxColumns, maxRows) {\n      return this.end.row >= maxRows;\n    }\n  }, {\n    key: \"effectiveEndColumn\",\n    value: function effectiveEndColumn(dependencyGraph) {\n      return dependencyGraph.getSheetWidth(this.sheet) - 1;\n    }\n  }], [{\n    key: \"fromRowRangeAst\",\n    value: function fromRowRangeAst(x, baseAddress) {\n      var start = x.start.toSimpleRowAddress(baseAddress);\n      var end = x.end.toSimpleRowAddress(baseAddress);\n\n      if (start.sheet !== end.sheet) {\n        throw new SheetsNotEqual(start.sheet, end.sheet);\n      }\n\n      return new AbsoluteRowRange(start.sheet, start.row, end.row);\n    }\n  }]);\n\n  return AbsoluteRowRange;\n}(AbsoluteCellRange);"]},"metadata":{},"sourceType":"module"}