{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { simpleCellAddress } from './Cell';\nimport { AstNodeType, CellAddress } from './parser';\nimport { RowsSpan } from './Span';\nexport var DIFFERENT_SHEETS_ERROR = 'AbsoluteCellRange: Start and end are in different sheets';\nexport var WRONG_RANGE_SIZE = 'AbsoluteCellRange: Wrong range size';\nexport var AbsoluteCellRange = /*#__PURE__*/function () {\n  function AbsoluteCellRange(start, end) {\n    _classCallCheck(this, AbsoluteCellRange);\n\n    if (start.sheet !== end.sheet) {\n      throw new Error(DIFFERENT_SHEETS_ERROR);\n    }\n\n    this.start = simpleCellAddress(start.sheet, start.col, start.row);\n    this.end = simpleCellAddress(end.sheet, end.col, end.row);\n  }\n\n  _createClass(AbsoluteCellRange, [{\n    key: \"sheet\",\n    get: function get() {\n      return this.start.sheet;\n    }\n  }, {\n    key: \"isFinite\",\n    value: function isFinite() {\n      return Number.isFinite(this.size());\n    }\n  }, {\n    key: \"doesOverlap\",\n    value: function doesOverlap(other) {\n      if (this.start.sheet != other.start.sheet) {\n        return false;\n      }\n\n      if (this.end.row < other.start.row || this.start.row > other.end.row) {\n        return false;\n      }\n\n      if (this.end.col < other.start.col || this.start.col > other.end.col) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"addressInRange\",\n    value: function addressInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      if (this.start.row <= address.row && this.end.row >= address.row && this.start.col <= address.col && this.end.col >= address.col) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"columnInRange\",\n    value: function columnInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.col <= address.col && this.end.col >= address.col;\n    }\n  }, {\n    key: \"rowInRange\",\n    value: function rowInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.row <= address.row && this.end.row >= address.row;\n    }\n  }, {\n    key: \"containsRange\",\n    value: function containsRange(range) {\n      return this.addressInRange(range.start) && this.addressInRange(range.end);\n    }\n  }, {\n    key: \"intersectionWith\",\n    value: function intersectionWith(other) {\n      if (this.sheet !== other.start.sheet) {\n        return null;\n      }\n\n      var startRow = Math.max(this.start.row, other.start.row);\n      var endRow = Math.min(this.end.row, other.end.row);\n      var startCol = Math.max(this.start.col, other.start.col);\n      var endCol = Math.min(this.end.col, other.end.col);\n\n      if (startRow > endRow || startCol > endCol) {\n        return null;\n      }\n\n      return new AbsoluteCellRange(simpleCellAddress(this.sheet, startCol, startRow), simpleCellAddress(this.sheet, endCol, endRow));\n    }\n  }, {\n    key: \"includesRow\",\n    value: function includesRow(row) {\n      return this.start.row < row && this.end.row >= row;\n    }\n  }, {\n    key: \"includesColumn\",\n    value: function includesColumn(column) {\n      return this.start.col < column && this.end.col >= column;\n    }\n  }, {\n    key: \"shiftByRows\",\n    value: function shiftByRows(numberOfRows) {\n      this.start.row += numberOfRows;\n      this.end.row += numberOfRows;\n    }\n  }, {\n    key: \"expandByRows\",\n    value: function expandByRows(numberOfRows) {\n      this.end.row += numberOfRows;\n    }\n  }, {\n    key: \"shiftByColumns\",\n    value: function shiftByColumns(numberOfColumns) {\n      this.start.col += numberOfColumns;\n      this.end.col += numberOfColumns;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, byRows) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, this.start.col + byCols, this.start.row + byRows), this.width(), this.height());\n    }\n  }, {\n    key: \"expandByColumns\",\n    value: function expandByColumns(numberOfColumns) {\n      this.end.col += numberOfColumns;\n    }\n  }, {\n    key: \"moveToSheet\",\n    value: function moveToSheet(toSheet) {\n      this.start.sheet = toSheet;\n      this.end.sheet = toSheet;\n    }\n  }, {\n    key: \"removeSpan\",\n    value: function removeSpan(span) {\n      if (span instanceof RowsSpan) {\n        this.removeRows(span.start, span.end);\n      } else {\n        this.removeColumns(span.start, span.end);\n      }\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(rowStart, rowEnd) {\n      if (rowStart > this.end.row) {\n        return;\n      }\n\n      if (rowEnd < this.start.row) {\n        var numberOfRows = rowEnd - rowStart + 1;\n        return this.shiftByRows(-numberOfRows);\n      }\n\n      if (rowStart <= this.start.row) {\n        this.start.row = rowStart;\n      }\n\n      this.end.row -= Math.min(rowEnd, this.end.row) - rowStart + 1;\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(columnStart, columnEnd) {\n      if (columnStart > this.end.col) {\n        return;\n      }\n\n      if (columnEnd < this.start.col) {\n        var numberOfColumns = columnEnd - columnStart + 1;\n        return this.shiftByColumns(-numberOfColumns);\n      }\n\n      if (columnStart <= this.start.col) {\n        this.start.col = columnStart;\n      }\n\n      this.end.col -= Math.min(columnEnd, this.end.col) - columnStart + 1;\n    }\n  }, {\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.width() <= 0 || this.height() <= 0;\n    }\n  }, {\n    key: \"rangeWithSameWidth\",\n    value: function rangeWithSameWidth(startRow, numberOfRows) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, this.start.col, startRow), this.width(), numberOfRows);\n    }\n  }, {\n    key: \"rangeWithSameHeight\",\n    value: function rangeWithSameHeight(startColumn, numberOfColumns) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, startColumn, this.start.row), numberOfColumns, this.height());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.start.sheet, \",\").concat(this.start.col, \",\").concat(this.start.row, \",\").concat(this.end.col, \",\").concat(this.end.row);\n    }\n  }, {\n    key: \"width\",\n    value: function width() {\n      return this.end.col - this.start.col + 1;\n    }\n  }, {\n    key: \"height\",\n    value: function height() {\n      return this.end.row - this.start.row + 1;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.height() * this.width();\n    }\n  }, {\n    key: \"arrayOfAddressesInRange\",\n    value: function arrayOfAddressesInRange() {\n      var result = [];\n\n      for (var y = 0; y < this.height(); ++y) {\n        result[y] = [];\n\n        for (var x = 0; x < this.width(); ++x) {\n          var value = simpleCellAddress(this.sheet, this.start.col + x, this.start.row + y);\n          result[y].push(value);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"withStart\",\n    value: function withStart(newStart) {\n      return new AbsoluteCellRange(newStart, this.end);\n    }\n  }, {\n    key: \"sameDimensionsAs\",\n    value: function sameDimensionsAs(other) {\n      return this.width() === other.width() && this.height() === other.height();\n    }\n  }, {\n    key: \"addresses\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function addresses(dependencyGraph) {\n      var currentRow, currentColumn;\n      return _regeneratorRuntime.wrap(function addresses$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentRow = this.start.row;\n\n            case 1:\n              if (!(currentRow <= this.effectiveEndRow(dependencyGraph))) {\n                _context.next = 12;\n                break;\n              }\n\n              currentColumn = this.start.col;\n\n            case 3:\n              if (!(currentColumn <= this.effectiveEndColumn(dependencyGraph))) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return simpleCellAddress(this.start.sheet, currentColumn, currentRow);\n\n            case 6:\n              currentColumn++;\n              _context.next = 3;\n              break;\n\n            case 9:\n              currentRow++;\n              _context.next = 1;\n              break;\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, addresses, this);\n    })\n  }, {\n    key: \"addressesWithDirection\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function addressesWithDirection(right, bottom, dependencyGraph) {\n      var currentRow, currentColumn, _currentRow, _currentColumn, _currentRow2, _currentColumn2, _currentRow3, _currentColumn3;\n\n      return _regeneratorRuntime.wrap(function addressesWithDirection$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(right > 0)) {\n                _context2.next = 30;\n                break;\n              }\n\n              if (!(bottom > 0)) {\n                _context2.next = 16;\n                break;\n              }\n\n              currentRow = this.effectiveEndRow(dependencyGraph);\n\n            case 3:\n              if (!(currentRow >= this.start.row)) {\n                _context2.next = 14;\n                break;\n              }\n\n              currentColumn = this.effectiveEndColumn(dependencyGraph);\n\n            case 5:\n              if (!(currentColumn >= this.start.col)) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 8;\n              return simpleCellAddress(this.start.sheet, currentColumn, currentRow);\n\n            case 8:\n              currentColumn -= 1;\n              _context2.next = 5;\n              break;\n\n            case 11:\n              currentRow -= 1;\n              _context2.next = 3;\n              break;\n\n            case 14:\n              _context2.next = 28;\n              break;\n\n            case 16:\n              _currentRow = this.start.row;\n\n            case 17:\n              if (!(_currentRow <= this.effectiveEndRow(dependencyGraph))) {\n                _context2.next = 28;\n                break;\n              }\n\n              _currentColumn = this.effectiveEndColumn(dependencyGraph);\n\n            case 19:\n              if (!(_currentColumn >= this.start.col)) {\n                _context2.next = 25;\n                break;\n              }\n\n              _context2.next = 22;\n              return simpleCellAddress(this.start.sheet, _currentColumn, _currentRow);\n\n            case 22:\n              _currentColumn -= 1;\n              _context2.next = 19;\n              break;\n\n            case 25:\n              _currentRow += 1;\n              _context2.next = 17;\n              break;\n\n            case 28:\n              _context2.next = 57;\n              break;\n\n            case 30:\n              if (!(bottom > 0)) {\n                _context2.next = 45;\n                break;\n              }\n\n              _currentRow2 = this.effectiveEndRow(dependencyGraph);\n\n            case 32:\n              if (!(_currentRow2 >= this.start.row)) {\n                _context2.next = 43;\n                break;\n              }\n\n              _currentColumn2 = this.start.col;\n\n            case 34:\n              if (!(_currentColumn2 <= this.effectiveEndColumn(dependencyGraph))) {\n                _context2.next = 40;\n                break;\n              }\n\n              _context2.next = 37;\n              return simpleCellAddress(this.start.sheet, _currentColumn2, _currentRow2);\n\n            case 37:\n              _currentColumn2 += 1;\n              _context2.next = 34;\n              break;\n\n            case 40:\n              _currentRow2 -= 1;\n              _context2.next = 32;\n              break;\n\n            case 43:\n              _context2.next = 57;\n              break;\n\n            case 45:\n              _currentRow3 = this.start.row;\n\n            case 46:\n              if (!(_currentRow3 <= this.effectiveEndRow(dependencyGraph))) {\n                _context2.next = 57;\n                break;\n              }\n\n              _currentColumn3 = this.start.col;\n\n            case 48:\n              if (!(_currentColumn3 <= this.effectiveEndColumn(dependencyGraph))) {\n                _context2.next = 54;\n                break;\n              }\n\n              _context2.next = 51;\n              return simpleCellAddress(this.start.sheet, _currentColumn3, _currentRow3);\n\n            case 51:\n              _currentColumn3 += 1;\n              _context2.next = 48;\n              break;\n\n            case 54:\n              _currentRow3 += 1;\n              _context2.next = 46;\n              break;\n\n            case 57:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, addressesWithDirection, this);\n    })\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(col, row) {\n      if (col < 0 || row < 0 || row > this.height() - 1 || col > this.width() - 1) {\n        throw Error('Index out of bound');\n      }\n\n      return simpleCellAddress(this.start.sheet, this.start.col + col, this.start.row + row);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {\n      return this.end.col >= maxColumns || this.end.row >= maxRows;\n    }\n  }, {\n    key: \"effectiveEndColumn\",\n    value: function effectiveEndColumn(_dependencyGraph) {\n      return this.end.col;\n    }\n  }, {\n    key: \"effectiveEndRow\",\n    value: function effectiveEndRow(_dependencyGraph) {\n      return this.end.row;\n    }\n  }], [{\n    key: \"fromAst\",\n    value: function fromAst(ast, baseAddress) {\n      if (ast.type === AstNodeType.CELL_RANGE) {\n        return AbsoluteCellRange.fromCellRange(ast, baseAddress);\n      } else if (ast.type === AstNodeType.COLUMN_RANGE) {\n        return AbsoluteColumnRange.fromColumnRange(ast, baseAddress);\n      } else {\n        return AbsoluteRowRange.fromRowRange(ast, baseAddress);\n      }\n    }\n  }, {\n    key: \"fromCellRange\",\n    value: function fromCellRange(x, baseAddress) {\n      return new AbsoluteCellRange(new CellAddress(x.start.sheet, x.start.col, x.start.row, x.start.type).toSimpleCellAddress(baseAddress), new CellAddress(x.end.sheet, x.end.col, x.end.row, x.end.type).toSimpleCellAddress(baseAddress));\n    }\n  }, {\n    key: \"spanFrom\",\n    value: function spanFrom(topLeftCorner, width, height) {\n      if (!Number.isFinite(width) && Number.isFinite(height)) {\n        return new AbsoluteRowRange(topLeftCorner.sheet, topLeftCorner.row, topLeftCorner.row + height - 1);\n      } else if (!Number.isFinite(height) && Number.isFinite(width)) {\n        return new AbsoluteColumnRange(topLeftCorner.sheet, topLeftCorner.col, topLeftCorner.col + width - 1);\n      } else if (Number.isFinite(height) && Number.isFinite(width)) {\n        return new AbsoluteCellRange(topLeftCorner, simpleCellAddress(topLeftCorner.sheet, topLeftCorner.col + width - 1, topLeftCorner.row + height - 1));\n      }\n\n      throw new Error(WRONG_RANGE_SIZE);\n    }\n  }, {\n    key: \"fromCoordinates\",\n    value: function fromCoordinates(sheet, x1, y1, x2, y2) {\n      return new AbsoluteCellRange(simpleCellAddress(sheet, x1, y1), simpleCellAddress(sheet, x2, y2));\n    }\n  }, {\n    key: \"singleRangeFromCellAddress\",\n    value: function singleRangeFromCellAddress(cellAddress, baseAddress) {\n      var simpleCellAddress = cellAddress.toSimpleCellAddress(baseAddress);\n      return new AbsoluteCellRange(simpleCellAddress, simpleCellAddress);\n    }\n  }]);\n\n  return AbsoluteCellRange;\n}();\nexport var AbsoluteColumnRange = /*#__PURE__*/function (_AbsoluteCellRange) {\n  _inherits(AbsoluteColumnRange, _AbsoluteCellRange);\n\n  var _super = _createSuper(AbsoluteColumnRange);\n\n  function AbsoluteColumnRange(sheet, columnStart, columnEnd) {\n    _classCallCheck(this, AbsoluteColumnRange);\n\n    return _super.call(this, simpleCellAddress(sheet, columnStart, 0), simpleCellAddress(sheet, columnEnd, Number.POSITIVE_INFINITY));\n  }\n\n  _createClass(AbsoluteColumnRange, [{\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.width() <= 0;\n    }\n  }, {\n    key: \"shiftByRows\",\n    value: function shiftByRows(_numberOfRows) {\n      return;\n    }\n  }, {\n    key: \"expandByRows\",\n    value: function expandByRows(_numberOfRows) {\n      return;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, _byRows) {\n      return new AbsoluteColumnRange(this.sheet, this.start.col + byCols, this.end.col + byCols);\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(_rowStart, _rowEnd) {\n      return;\n    }\n  }, {\n    key: \"rangeWithSameHeight\",\n    value: function rangeWithSameHeight(startColumn, numberOfColumns) {\n      return new AbsoluteColumnRange(this.sheet, startColumn, startColumn + numberOfColumns - 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, _maxRows) {\n      return this.end.col >= maxColumns;\n    }\n  }, {\n    key: \"effectiveEndRow\",\n    value: function effectiveEndRow(dependencyGraph) {\n      return dependencyGraph.getSheetHeight(this.sheet) - 1;\n    }\n  }], [{\n    key: \"fromColumnRange\",\n    value: function fromColumnRange(x, baseAddress) {\n      var start = x.start.toSimpleColumnAddress(baseAddress);\n      var end = x.end.toSimpleColumnAddress(baseAddress);\n\n      if (start.sheet !== end.sheet) {\n        throw new Error(DIFFERENT_SHEETS_ERROR);\n      }\n\n      return new AbsoluteColumnRange(start.sheet, start.col, end.col);\n    }\n  }]);\n\n  return AbsoluteColumnRange;\n}(AbsoluteCellRange);\nexport var AbsoluteRowRange = /*#__PURE__*/function (_AbsoluteCellRange2) {\n  _inherits(AbsoluteRowRange, _AbsoluteCellRange2);\n\n  var _super2 = _createSuper(AbsoluteRowRange);\n\n  function AbsoluteRowRange(sheet, rowStart, rowEnd) {\n    _classCallCheck(this, AbsoluteRowRange);\n\n    return _super2.call(this, simpleCellAddress(sheet, 0, rowStart), simpleCellAddress(sheet, Number.POSITIVE_INFINITY, rowEnd));\n  }\n\n  _createClass(AbsoluteRowRange, [{\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.height() <= 0;\n    }\n  }, {\n    key: \"shiftByColumns\",\n    value: function shiftByColumns(_numberOfColumns) {\n      return;\n    }\n  }, {\n    key: \"expandByColumns\",\n    value: function expandByColumns(_numberOfColumns) {\n      return;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, byRows) {\n      return new AbsoluteRowRange(this.sheet, this.start.row + byRows, this.end.row + byRows);\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(_columnStart, _columnEnd) {\n      return;\n    }\n  }, {\n    key: \"rangeWithSameWidth\",\n    value: function rangeWithSameWidth(startRow, numberOfRows) {\n      return new AbsoluteRowRange(this.sheet, startRow, startRow + numberOfRows - 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(_maxColumns, maxRows) {\n      return this.end.row >= maxRows;\n    }\n  }, {\n    key: \"effectiveEndColumn\",\n    value: function effectiveEndColumn(dependencyGraph) {\n      return dependencyGraph.getSheetWidth(this.sheet) - 1;\n    }\n  }], [{\n    key: \"fromRowRange\",\n    value: function fromRowRange(x, baseAddress) {\n      var start = x.start.toSimpleRowAddress(baseAddress);\n      var end = x.end.toSimpleRowAddress(baseAddress);\n\n      if (start.sheet !== end.sheet) {\n        throw new Error(DIFFERENT_SHEETS_ERROR);\n      }\n\n      return new AbsoluteRowRange(start.sheet, start.row, end.row);\n    }\n  }]);\n\n  return AbsoluteRowRange;\n}(AbsoluteCellRange);","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/AbsoluteCellRange.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_inherits","subClass","superClass","TypeError","Object","create","value","writable","configurable","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","defineProperty","key","_createClass","protoProps","staticProps","simpleCellAddress","AstNodeType","CellAddress","RowsSpan","DIFFERENT_SHEETS_ERROR","WRONG_RANGE_SIZE","AbsoluteCellRange","start","end","sheet","Error","col","row","get","isFinite","Number","size","doesOverlap","other","addressInRange","address","columnInRange","rowInRange","containsRange","range","intersectionWith","startRow","Math","max","endRow","min","startCol","endCol","includesRow","includesColumn","column","shiftByRows","numberOfRows","expandByRows","shiftByColumns","numberOfColumns","shifted","byCols","byRows","spanFrom","width","height","expandByColumns","moveToSheet","toSheet","removeSpan","span","removeRows","removeColumns","rowStart","rowEnd","columnStart","columnEnd","shouldBeRemoved","rangeWithSameWidth","rangeWithSameHeight","startColumn","toString","concat","arrayOfAddressesInRange","y","x","push","withStart","newStart","sameDimensionsAs","mark","addresses","dependencyGraph","currentRow","currentColumn","wrap","addresses$","_context","prev","next","effectiveEndRow","effectiveEndColumn","stop","addressesWithDirection","right","bottom","_currentRow","_currentColumn","_currentRow2","_currentColumn2","_currentRow3","_currentColumn3","addressesWithDirection$","_context2","getAddress","exceedsSheetSizeLimits","maxColumns","maxRows","_dependencyGraph","fromAst","ast","baseAddress","type","CELL_RANGE","fromCellRange","COLUMN_RANGE","AbsoluteColumnRange","fromColumnRange","AbsoluteRowRange","fromRowRange","toSimpleCellAddress","topLeftCorner","fromCoordinates","x1","y1","x2","y2","singleRangeFromCellAddress","cellAddress","_AbsoluteCellRange","_super","POSITIVE_INFINITY","_numberOfRows","_byRows","_rowStart","_rowEnd","_maxRows","getSheetHeight","toSimpleColumnAddress","_AbsoluteCellRange2","_super2","_numberOfColumns","_columnStart","_columnEnd","_maxColumns","getSheetWidth","toSimpleRowAddress"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.number.is-finite.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { simpleCellAddress } from './Cell';\nimport { AstNodeType, CellAddress } from './parser';\nimport { RowsSpan } from './Span';\nexport var DIFFERENT_SHEETS_ERROR = 'AbsoluteCellRange: Start and end are in different sheets';\nexport var WRONG_RANGE_SIZE = 'AbsoluteCellRange: Wrong range size';\nexport var AbsoluteCellRange = /*#__PURE__*/function () {\n  function AbsoluteCellRange(start, end) {\n    _classCallCheck(this, AbsoluteCellRange);\n\n    if (start.sheet !== end.sheet) {\n      throw new Error(DIFFERENT_SHEETS_ERROR);\n    }\n\n    this.start = simpleCellAddress(start.sheet, start.col, start.row);\n    this.end = simpleCellAddress(end.sheet, end.col, end.row);\n  }\n\n  _createClass(AbsoluteCellRange, [{\n    key: \"sheet\",\n    get: function get() {\n      return this.start.sheet;\n    }\n  }, {\n    key: \"isFinite\",\n    value: function isFinite() {\n      return Number.isFinite(this.size());\n    }\n  }, {\n    key: \"doesOverlap\",\n    value: function doesOverlap(other) {\n      if (this.start.sheet != other.start.sheet) {\n        return false;\n      }\n\n      if (this.end.row < other.start.row || this.start.row > other.end.row) {\n        return false;\n      }\n\n      if (this.end.col < other.start.col || this.start.col > other.end.col) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"addressInRange\",\n    value: function addressInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      if (this.start.row <= address.row && this.end.row >= address.row && this.start.col <= address.col && this.end.col >= address.col) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"columnInRange\",\n    value: function columnInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.col <= address.col && this.end.col >= address.col;\n    }\n  }, {\n    key: \"rowInRange\",\n    value: function rowInRange(address) {\n      if (this.sheet !== address.sheet) {\n        return false;\n      }\n\n      return this.start.row <= address.row && this.end.row >= address.row;\n    }\n  }, {\n    key: \"containsRange\",\n    value: function containsRange(range) {\n      return this.addressInRange(range.start) && this.addressInRange(range.end);\n    }\n  }, {\n    key: \"intersectionWith\",\n    value: function intersectionWith(other) {\n      if (this.sheet !== other.start.sheet) {\n        return null;\n      }\n\n      var startRow = Math.max(this.start.row, other.start.row);\n      var endRow = Math.min(this.end.row, other.end.row);\n      var startCol = Math.max(this.start.col, other.start.col);\n      var endCol = Math.min(this.end.col, other.end.col);\n\n      if (startRow > endRow || startCol > endCol) {\n        return null;\n      }\n\n      return new AbsoluteCellRange(simpleCellAddress(this.sheet, startCol, startRow), simpleCellAddress(this.sheet, endCol, endRow));\n    }\n  }, {\n    key: \"includesRow\",\n    value: function includesRow(row) {\n      return this.start.row < row && this.end.row >= row;\n    }\n  }, {\n    key: \"includesColumn\",\n    value: function includesColumn(column) {\n      return this.start.col < column && this.end.col >= column;\n    }\n  }, {\n    key: \"shiftByRows\",\n    value: function shiftByRows(numberOfRows) {\n      this.start.row += numberOfRows;\n      this.end.row += numberOfRows;\n    }\n  }, {\n    key: \"expandByRows\",\n    value: function expandByRows(numberOfRows) {\n      this.end.row += numberOfRows;\n    }\n  }, {\n    key: \"shiftByColumns\",\n    value: function shiftByColumns(numberOfColumns) {\n      this.start.col += numberOfColumns;\n      this.end.col += numberOfColumns;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, byRows) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, this.start.col + byCols, this.start.row + byRows), this.width(), this.height());\n    }\n  }, {\n    key: \"expandByColumns\",\n    value: function expandByColumns(numberOfColumns) {\n      this.end.col += numberOfColumns;\n    }\n  }, {\n    key: \"moveToSheet\",\n    value: function moveToSheet(toSheet) {\n      this.start.sheet = toSheet;\n      this.end.sheet = toSheet;\n    }\n  }, {\n    key: \"removeSpan\",\n    value: function removeSpan(span) {\n      if (span instanceof RowsSpan) {\n        this.removeRows(span.start, span.end);\n      } else {\n        this.removeColumns(span.start, span.end);\n      }\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(rowStart, rowEnd) {\n      if (rowStart > this.end.row) {\n        return;\n      }\n\n      if (rowEnd < this.start.row) {\n        var numberOfRows = rowEnd - rowStart + 1;\n        return this.shiftByRows(-numberOfRows);\n      }\n\n      if (rowStart <= this.start.row) {\n        this.start.row = rowStart;\n      }\n\n      this.end.row -= Math.min(rowEnd, this.end.row) - rowStart + 1;\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(columnStart, columnEnd) {\n      if (columnStart > this.end.col) {\n        return;\n      }\n\n      if (columnEnd < this.start.col) {\n        var numberOfColumns = columnEnd - columnStart + 1;\n        return this.shiftByColumns(-numberOfColumns);\n      }\n\n      if (columnStart <= this.start.col) {\n        this.start.col = columnStart;\n      }\n\n      this.end.col -= Math.min(columnEnd, this.end.col) - columnStart + 1;\n    }\n  }, {\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.width() <= 0 || this.height() <= 0;\n    }\n  }, {\n    key: \"rangeWithSameWidth\",\n    value: function rangeWithSameWidth(startRow, numberOfRows) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, this.start.col, startRow), this.width(), numberOfRows);\n    }\n  }, {\n    key: \"rangeWithSameHeight\",\n    value: function rangeWithSameHeight(startColumn, numberOfColumns) {\n      return AbsoluteCellRange.spanFrom(simpleCellAddress(this.sheet, startColumn, this.start.row), numberOfColumns, this.height());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.start.sheet, \",\").concat(this.start.col, \",\").concat(this.start.row, \",\").concat(this.end.col, \",\").concat(this.end.row);\n    }\n  }, {\n    key: \"width\",\n    value: function width() {\n      return this.end.col - this.start.col + 1;\n    }\n  }, {\n    key: \"height\",\n    value: function height() {\n      return this.end.row - this.start.row + 1;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.height() * this.width();\n    }\n  }, {\n    key: \"arrayOfAddressesInRange\",\n    value: function arrayOfAddressesInRange() {\n      var result = [];\n\n      for (var y = 0; y < this.height(); ++y) {\n        result[y] = [];\n\n        for (var x = 0; x < this.width(); ++x) {\n          var value = simpleCellAddress(this.sheet, this.start.col + x, this.start.row + y);\n          result[y].push(value);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"withStart\",\n    value: function withStart(newStart) {\n      return new AbsoluteCellRange(newStart, this.end);\n    }\n  }, {\n    key: \"sameDimensionsAs\",\n    value: function sameDimensionsAs(other) {\n      return this.width() === other.width() && this.height() === other.height();\n    }\n  }, {\n    key: \"addresses\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function addresses(dependencyGraph) {\n      var currentRow, currentColumn;\n      return regeneratorRuntime.wrap(function addresses$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentRow = this.start.row;\n\n            case 1:\n              if (!(currentRow <= this.effectiveEndRow(dependencyGraph))) {\n                _context.next = 12;\n                break;\n              }\n\n              currentColumn = this.start.col;\n\n            case 3:\n              if (!(currentColumn <= this.effectiveEndColumn(dependencyGraph))) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return simpleCellAddress(this.start.sheet, currentColumn, currentRow);\n\n            case 6:\n              currentColumn++;\n              _context.next = 3;\n              break;\n\n            case 9:\n              currentRow++;\n              _context.next = 1;\n              break;\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, addresses, this);\n    })\n  }, {\n    key: \"addressesWithDirection\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function addressesWithDirection(right, bottom, dependencyGraph) {\n      var currentRow, currentColumn, _currentRow, _currentColumn, _currentRow2, _currentColumn2, _currentRow3, _currentColumn3;\n\n      return regeneratorRuntime.wrap(function addressesWithDirection$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(right > 0)) {\n                _context2.next = 30;\n                break;\n              }\n\n              if (!(bottom > 0)) {\n                _context2.next = 16;\n                break;\n              }\n\n              currentRow = this.effectiveEndRow(dependencyGraph);\n\n            case 3:\n              if (!(currentRow >= this.start.row)) {\n                _context2.next = 14;\n                break;\n              }\n\n              currentColumn = this.effectiveEndColumn(dependencyGraph);\n\n            case 5:\n              if (!(currentColumn >= this.start.col)) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 8;\n              return simpleCellAddress(this.start.sheet, currentColumn, currentRow);\n\n            case 8:\n              currentColumn -= 1;\n              _context2.next = 5;\n              break;\n\n            case 11:\n              currentRow -= 1;\n              _context2.next = 3;\n              break;\n\n            case 14:\n              _context2.next = 28;\n              break;\n\n            case 16:\n              _currentRow = this.start.row;\n\n            case 17:\n              if (!(_currentRow <= this.effectiveEndRow(dependencyGraph))) {\n                _context2.next = 28;\n                break;\n              }\n\n              _currentColumn = this.effectiveEndColumn(dependencyGraph);\n\n            case 19:\n              if (!(_currentColumn >= this.start.col)) {\n                _context2.next = 25;\n                break;\n              }\n\n              _context2.next = 22;\n              return simpleCellAddress(this.start.sheet, _currentColumn, _currentRow);\n\n            case 22:\n              _currentColumn -= 1;\n              _context2.next = 19;\n              break;\n\n            case 25:\n              _currentRow += 1;\n              _context2.next = 17;\n              break;\n\n            case 28:\n              _context2.next = 57;\n              break;\n\n            case 30:\n              if (!(bottom > 0)) {\n                _context2.next = 45;\n                break;\n              }\n\n              _currentRow2 = this.effectiveEndRow(dependencyGraph);\n\n            case 32:\n              if (!(_currentRow2 >= this.start.row)) {\n                _context2.next = 43;\n                break;\n              }\n\n              _currentColumn2 = this.start.col;\n\n            case 34:\n              if (!(_currentColumn2 <= this.effectiveEndColumn(dependencyGraph))) {\n                _context2.next = 40;\n                break;\n              }\n\n              _context2.next = 37;\n              return simpleCellAddress(this.start.sheet, _currentColumn2, _currentRow2);\n\n            case 37:\n              _currentColumn2 += 1;\n              _context2.next = 34;\n              break;\n\n            case 40:\n              _currentRow2 -= 1;\n              _context2.next = 32;\n              break;\n\n            case 43:\n              _context2.next = 57;\n              break;\n\n            case 45:\n              _currentRow3 = this.start.row;\n\n            case 46:\n              if (!(_currentRow3 <= this.effectiveEndRow(dependencyGraph))) {\n                _context2.next = 57;\n                break;\n              }\n\n              _currentColumn3 = this.start.col;\n\n            case 48:\n              if (!(_currentColumn3 <= this.effectiveEndColumn(dependencyGraph))) {\n                _context2.next = 54;\n                break;\n              }\n\n              _context2.next = 51;\n              return simpleCellAddress(this.start.sheet, _currentColumn3, _currentRow3);\n\n            case 51:\n              _currentColumn3 += 1;\n              _context2.next = 48;\n              break;\n\n            case 54:\n              _currentRow3 += 1;\n              _context2.next = 46;\n              break;\n\n            case 57:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, addressesWithDirection, this);\n    })\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(col, row) {\n      if (col < 0 || row < 0 || row > this.height() - 1 || col > this.width() - 1) {\n        throw Error('Index out of bound');\n      }\n\n      return simpleCellAddress(this.start.sheet, this.start.col + col, this.start.row + row);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {\n      return this.end.col >= maxColumns || this.end.row >= maxRows;\n    }\n  }, {\n    key: \"effectiveEndColumn\",\n    value: function effectiveEndColumn(_dependencyGraph) {\n      return this.end.col;\n    }\n  }, {\n    key: \"effectiveEndRow\",\n    value: function effectiveEndRow(_dependencyGraph) {\n      return this.end.row;\n    }\n  }], [{\n    key: \"fromAst\",\n    value: function fromAst(ast, baseAddress) {\n      if (ast.type === AstNodeType.CELL_RANGE) {\n        return AbsoluteCellRange.fromCellRange(ast, baseAddress);\n      } else if (ast.type === AstNodeType.COLUMN_RANGE) {\n        return AbsoluteColumnRange.fromColumnRange(ast, baseAddress);\n      } else {\n        return AbsoluteRowRange.fromRowRange(ast, baseAddress);\n      }\n    }\n  }, {\n    key: \"fromCellRange\",\n    value: function fromCellRange(x, baseAddress) {\n      return new AbsoluteCellRange(new CellAddress(x.start.sheet, x.start.col, x.start.row, x.start.type).toSimpleCellAddress(baseAddress), new CellAddress(x.end.sheet, x.end.col, x.end.row, x.end.type).toSimpleCellAddress(baseAddress));\n    }\n  }, {\n    key: \"spanFrom\",\n    value: function spanFrom(topLeftCorner, width, height) {\n      if (!Number.isFinite(width) && Number.isFinite(height)) {\n        return new AbsoluteRowRange(topLeftCorner.sheet, topLeftCorner.row, topLeftCorner.row + height - 1);\n      } else if (!Number.isFinite(height) && Number.isFinite(width)) {\n        return new AbsoluteColumnRange(topLeftCorner.sheet, topLeftCorner.col, topLeftCorner.col + width - 1);\n      } else if (Number.isFinite(height) && Number.isFinite(width)) {\n        return new AbsoluteCellRange(topLeftCorner, simpleCellAddress(topLeftCorner.sheet, topLeftCorner.col + width - 1, topLeftCorner.row + height - 1));\n      }\n\n      throw new Error(WRONG_RANGE_SIZE);\n    }\n  }, {\n    key: \"fromCoordinates\",\n    value: function fromCoordinates(sheet, x1, y1, x2, y2) {\n      return new AbsoluteCellRange(simpleCellAddress(sheet, x1, y1), simpleCellAddress(sheet, x2, y2));\n    }\n  }, {\n    key: \"singleRangeFromCellAddress\",\n    value: function singleRangeFromCellAddress(cellAddress, baseAddress) {\n      var simpleCellAddress = cellAddress.toSimpleCellAddress(baseAddress);\n      return new AbsoluteCellRange(simpleCellAddress, simpleCellAddress);\n    }\n  }]);\n\n  return AbsoluteCellRange;\n}();\nexport var AbsoluteColumnRange = /*#__PURE__*/function (_AbsoluteCellRange) {\n  _inherits(AbsoluteColumnRange, _AbsoluteCellRange);\n\n  var _super = _createSuper(AbsoluteColumnRange);\n\n  function AbsoluteColumnRange(sheet, columnStart, columnEnd) {\n    _classCallCheck(this, AbsoluteColumnRange);\n\n    return _super.call(this, simpleCellAddress(sheet, columnStart, 0), simpleCellAddress(sheet, columnEnd, Number.POSITIVE_INFINITY));\n  }\n\n  _createClass(AbsoluteColumnRange, [{\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.width() <= 0;\n    }\n  }, {\n    key: \"shiftByRows\",\n    value: function shiftByRows(_numberOfRows) {\n      return;\n    }\n  }, {\n    key: \"expandByRows\",\n    value: function expandByRows(_numberOfRows) {\n      return;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, _byRows) {\n      return new AbsoluteColumnRange(this.sheet, this.start.col + byCols, this.end.col + byCols);\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(_rowStart, _rowEnd) {\n      return;\n    }\n  }, {\n    key: \"rangeWithSameHeight\",\n    value: function rangeWithSameHeight(startColumn, numberOfColumns) {\n      return new AbsoluteColumnRange(this.sheet, startColumn, startColumn + numberOfColumns - 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, _maxRows) {\n      return this.end.col >= maxColumns;\n    }\n  }, {\n    key: \"effectiveEndRow\",\n    value: function effectiveEndRow(dependencyGraph) {\n      return dependencyGraph.getSheetHeight(this.sheet) - 1;\n    }\n  }], [{\n    key: \"fromColumnRange\",\n    value: function fromColumnRange(x, baseAddress) {\n      var start = x.start.toSimpleColumnAddress(baseAddress);\n      var end = x.end.toSimpleColumnAddress(baseAddress);\n\n      if (start.sheet !== end.sheet) {\n        throw new Error(DIFFERENT_SHEETS_ERROR);\n      }\n\n      return new AbsoluteColumnRange(start.sheet, start.col, end.col);\n    }\n  }]);\n\n  return AbsoluteColumnRange;\n}(AbsoluteCellRange);\nexport var AbsoluteRowRange = /*#__PURE__*/function (_AbsoluteCellRange2) {\n  _inherits(AbsoluteRowRange, _AbsoluteCellRange2);\n\n  var _super2 = _createSuper(AbsoluteRowRange);\n\n  function AbsoluteRowRange(sheet, rowStart, rowEnd) {\n    _classCallCheck(this, AbsoluteRowRange);\n\n    return _super2.call(this, simpleCellAddress(sheet, 0, rowStart), simpleCellAddress(sheet, Number.POSITIVE_INFINITY, rowEnd));\n  }\n\n  _createClass(AbsoluteRowRange, [{\n    key: \"shouldBeRemoved\",\n    value: function shouldBeRemoved() {\n      return this.height() <= 0;\n    }\n  }, {\n    key: \"shiftByColumns\",\n    value: function shiftByColumns(_numberOfColumns) {\n      return;\n    }\n  }, {\n    key: \"expandByColumns\",\n    value: function expandByColumns(_numberOfColumns) {\n      return;\n    }\n  }, {\n    key: \"shifted\",\n    value: function shifted(byCols, byRows) {\n      return new AbsoluteRowRange(this.sheet, this.start.row + byRows, this.end.row + byRows);\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(_columnStart, _columnEnd) {\n      return;\n    }\n  }, {\n    key: \"rangeWithSameWidth\",\n    value: function rangeWithSameWidth(startRow, numberOfRows) {\n      return new AbsoluteRowRange(this.sheet, startRow, startRow + numberOfRows - 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(_maxColumns, maxRows) {\n      return this.end.row >= maxRows;\n    }\n  }, {\n    key: \"effectiveEndColumn\",\n    value: function effectiveEndColumn(dependencyGraph) {\n      return dependencyGraph.getSheetWidth(this.sheet) - 1;\n    }\n  }], [{\n    key: \"fromRowRange\",\n    value: function fromRowRange(x, baseAddress) {\n      var start = x.start.toSimpleRowAddress(baseAddress);\n      var end = x.end.toSimpleRowAddress(baseAddress);\n\n      if (start.sheet !== end.sheet) {\n        throw new Error(DIFFERENT_SHEETS_ERROR);\n      }\n\n      return new AbsoluteRowRange(start.sheet, start.row, end.row);\n    }\n  }]);\n\n  return AbsoluteRowRange;\n}(AbsoluteCellRange);"]},"metadata":{},"sourceType":"module"}