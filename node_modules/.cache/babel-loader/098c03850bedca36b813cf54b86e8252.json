{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { CellError, ErrorType } from '../../Cell';\nimport { FormulaVertex } from '../../DependencyGraph/FormulaCellVertex';\nimport { ErrorMessage } from '../../error-message';\nimport { AstNodeType } from '../../parser';\nimport { EmptyValue, isExtendedNumber } from '../InterpreterValue';\nimport { SimpleRangeValue } from '../SimpleRangeValue';\nimport { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';\n/**\n * Interpreter plugin containing information functions\n */\n\nexport var InformationPlugin = /*#__PURE__*/function (_FunctionPlugin) {\n  _inherits(InformationPlugin, _FunctionPlugin);\n\n  var _super = _createSuper(InformationPlugin);\n\n  function InformationPlugin() {\n    _classCallCheck(this, InformationPlugin);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(InformationPlugin, [{\n    key: \"isbinary\",\n    value:\n    /**\n     * Corresponds to ISBINARY(value)\n     *\n     * Returns true if provided value is a valid binary number\n     *\n     * @param ast\n     * @param state\n     */\n    function isbinary(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISBINARY'), function (arg) {\n        return /^[01]{1,10}$/.test(arg);\n      });\n    }\n    /**\n     * Corresponds to ISERR(value)\n     *\n     * Returns true if provided value is an error except #N/A!\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"iserr\",\n    value: function iserr(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISERR'), function (arg) {\n        return arg instanceof CellError && arg.type !== ErrorType.NA;\n      });\n    }\n    /**\n     * Corresponds to ISERROR(value)\n     *\n     * Checks whether provided value is an error\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"iserror\",\n    value: function iserror(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISERROR'), function (arg) {\n        return arg instanceof CellError;\n      });\n    }\n    /**\n     * Corresponds to ISFORMULA(value)\n     *\n     * Checks whether referenced cell is a formula\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isformula\",\n    value: function isformula(ast, state) {\n      var _this = this;\n\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('ISFORMULA'), function () {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }, function (reference) {\n        var vertex = _this.dependencyGraph.addressMapping.getCell(reference);\n\n        return vertex instanceof FormulaVertex;\n      });\n    }\n    /**\n     * Corresponds to ISBLANK(value)\n     *\n     * Checks whether provided cell reference is empty\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isblank\",\n    value: function isblank(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISBLANK'), function (arg) {\n        return arg === EmptyValue;\n      });\n    }\n    /**\n     * Corresponds to ISNA(value)\n     *\n     * Returns true if provided value is #N/A! error\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isna\",\n    value: function isna(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISNA'), function (arg) {\n        return arg instanceof CellError && arg.type == ErrorType.NA;\n      });\n    }\n    /**\n     * Corresponds to ISNUMBER(value)\n     *\n     * Checks whether provided cell reference is a number\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isnumber\",\n    value: function isnumber(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISNUMBER'), isExtendedNumber);\n    }\n    /**\n     * Corresponds to ISLOGICAL(value)\n     *\n     * Checks whether provided cell reference is of logical type\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"islogical\",\n    value: function islogical(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISLOGICAL'), function (arg) {\n        return typeof arg === 'boolean';\n      });\n    }\n    /**\n     * Corresponds to ISREF(value)\n     *\n     * Returns true if provided value is #REF! error\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isref\",\n    value: function isref(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISREF'), function (arg) {\n        return arg instanceof CellError && (arg.type == ErrorType.REF || arg.type == ErrorType.CYCLE);\n      });\n    }\n    /**\n     * Corresponds to ISTEXT(value)\n     *\n     * Checks whether provided cell reference is of logical type\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"istext\",\n    value: function istext(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISTEXT'), function (arg) {\n        return typeof arg === 'string';\n      });\n    }\n    /**\n     * Corresponds to ISNONTEXT(value)\n     *\n     * Checks whether provided cell reference is of logical type\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isnontext\",\n    value: function isnontext(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISNONTEXT'), function (arg) {\n        return !(typeof arg === 'string');\n      });\n    }\n    /**\n     * Corresponds to COLUMN(reference)\n     *\n     * Returns column number of a reference or a formula cell if reference not provided\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"column\",\n    value: function column(ast, state) {\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('COLUMN'), function () {\n        return state.formulaAddress.col + 1;\n      }, function (reference) {\n        return reference.col + 1;\n      });\n    }\n    /**\n     * Corresponds to COLUMNS(range)\n     *\n     * Returns number of columns in provided range of cells\n     *\n     * @param ast\n     * @param _state\n     */\n\n  }, {\n    key: \"columns\",\n    value: function columns(ast, state) {\n      if (ast.args.length !== 1) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      if (ast.args.some(function (astIt) {\n        return astIt.type === AstNodeType.EMPTY;\n      })) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EmptyArg);\n      }\n\n      var argAst = ast.args[0];\n\n      while (argAst.type === AstNodeType.PARENTHESIS) {\n        argAst = argAst.expression;\n      }\n\n      if (argAst.type === AstNodeType.CELL_RANGE || argAst.type === AstNodeType.COLUMN_RANGE) {\n        return argAst.end.col - argAst.start.col + 1;\n      } else if (argAst.type === AstNodeType.CELL_REFERENCE) {\n        return 1;\n      } else if (argAst.type === AstNodeType.ROW_RANGE) {\n        return this.config.maxColumns;\n      } else {\n        var val = this.evaluateAst(argAst, state);\n\n        if (val instanceof SimpleRangeValue) {\n          return val.width();\n        } else if (val instanceof CellError) {\n          return val;\n        } else {\n          return 1;\n        }\n      }\n    }\n    /**\n     * Corresponds to ROW(reference)\n     *\n     * Returns row number of a reference or a formula cell if reference not provided\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"row\",\n    value: function row(ast, state) {\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('ROW'), function () {\n        return state.formulaAddress.row + 1;\n      }, function (reference) {\n        return reference.row + 1;\n      });\n    }\n    /**\n     * Corresponds to ROWS(range)\n     *\n     * Returns number of rows in provided range of cells\n     *\n     * @param ast\n     * @param _state\n     */\n\n  }, {\n    key: \"rows\",\n    value: function rows(ast, state) {\n      if (ast.args.length !== 1) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      if (ast.args.some(function (astIt) {\n        return astIt.type === AstNodeType.EMPTY;\n      })) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EmptyArg);\n      }\n\n      var argAst = ast.args[0];\n\n      while (argAst.type === AstNodeType.PARENTHESIS) {\n        argAst = argAst.expression;\n      }\n\n      if (argAst.type === AstNodeType.CELL_RANGE || argAst.type === AstNodeType.ROW_RANGE) {\n        return argAst.end.row - argAst.start.row + 1;\n      } else if (argAst.type === AstNodeType.CELL_REFERENCE) {\n        return 1;\n      } else if (argAst.type === AstNodeType.COLUMN_RANGE) {\n        return this.config.maxRows;\n      } else {\n        var val = this.evaluateAst(argAst, state);\n\n        if (val instanceof SimpleRangeValue) {\n          return val.height();\n        } else if (val instanceof CellError) {\n          return val;\n        } else {\n          return 1;\n        }\n      }\n    }\n    /**\n     * Corresponds to INDEX(range;)\n     *\n     * Returns specific position in 2d array.\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"index\",\n    value: function index(ast, state) {\n      var _this2 = this;\n\n      return this.runFunction(ast.args, state, this.metadata('INDEX'), function (rangeValue, row, col) {\n        var _a, _b, _c, _d, _e, _f;\n\n        if (col < 1 || row < 1) {\n          return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n        }\n\n        if (col > rangeValue.width() || row > rangeValue.height()) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n        }\n\n        return (_f = (_c = (_b = (_a = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue.data) === null || _a === void 0 ? void 0 : _a[row - 1]) === null || _b === void 0 ? void 0 : _b[col - 1]) !== null && _c !== void 0 ? _c : (_e = (_d = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue.data) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e[0]) !== null && _f !== void 0 ? _f : new CellError(ErrorType.VALUE, ErrorMessage.CellRangeExpected);\n        var address = rangeValue.range.getAddress(col - 1, row - 1);\n        return _this2.dependencyGraph.getScalarValue(address);\n      });\n    }\n    /**\n     * Corresponds to NA()\n     *\n     * Returns #N/A!\n     *\n     * @param _ast\n     * @param _state\n     */\n\n  }, {\n    key: \"na\",\n    value: function na(_ast, _state) {\n      return new CellError(ErrorType.NA);\n    }\n    /**\n     * Corresponds to SHEET(value)\n     *\n     * Returns sheet number of a given value or a formula sheet number if no argument is provided\n     *\n     * @param ast\n     * @param state\n     * */\n\n  }, {\n    key: \"sheet\",\n    value: function sheet(ast, state) {\n      var _this3 = this;\n\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('SHEET'), function () {\n        return state.formulaAddress.sheet + 1;\n      }, function (reference) {\n        return reference.sheet + 1;\n      }, function (value) {\n        var sheetNumber = _this3.dependencyGraph.sheetMapping.get(value);\n\n        if (sheetNumber !== undefined) {\n          return sheetNumber + 1;\n        } else {\n          return new CellError(ErrorType.NA, ErrorMessage.SheetRef);\n        }\n      });\n    }\n    /**\n     * Corresponds to SHEETS(value)\n     *\n     * Returns number of sheet of a given reference or number of all sheets in workbook when no argument is provided.\n     * It returns always 1 for a valid reference as 3D references are not supported.\n     *\n     * @param ast\n     * @param state\n     * */\n\n  }, {\n    key: \"sheets\",\n    value: function sheets(ast, state) {\n      var _this4 = this;\n\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('SHEETS'), function () {\n        return _this4.dependencyGraph.sheetMapping.numberOfSheets();\n      }, // return number of sheets if no argument\n      function () {\n        return 1;\n      }, // return 1 for valid reference\n      function () {\n        return new CellError(ErrorType.VALUE, ErrorMessage.CellRefExpected);\n      } // error otherwise\n      );\n    }\n  }]);\n\n  return InformationPlugin;\n}(FunctionPlugin);\nInformationPlugin.implementedFunctions = {\n  'COLUMN': {\n    method: 'column',\n    parameters: [{\n      argumentType: ArgumentTypes.NOERROR,\n      optional: true\n    }],\n    isDependentOnSheetStructureChange: true,\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'COLUMNS': {\n    method: 'columns',\n    parameters: [{\n      argumentType: ArgumentTypes.RANGE\n    }],\n    isDependentOnSheetStructureChange: true,\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'ISBINARY': {\n    method: 'isbinary',\n    parameters: [{\n      argumentType: ArgumentTypes.STRING\n    }]\n  },\n  'ISERR': {\n    method: 'iserr',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISFORMULA': {\n    method: 'isformula',\n    parameters: [{\n      argumentType: ArgumentTypes.NOERROR\n    }],\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'ISNA': {\n    method: 'isna',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISREF': {\n    method: 'isref',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }],\n    vectorizationForbidden: true\n  },\n  'ISERROR': {\n    method: 'iserror',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISBLANK': {\n    method: 'isblank',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISNUMBER': {\n    method: 'isnumber',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISLOGICAL': {\n    method: 'islogical',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISTEXT': {\n    method: 'istext',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISNONTEXT': {\n    method: 'isnontext',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'INDEX': {\n    method: 'index',\n    parameters: [{\n      argumentType: ArgumentTypes.RANGE\n    }, {\n      argumentType: ArgumentTypes.NUMBER\n    }, {\n      argumentType: ArgumentTypes.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'NA': {\n    method: 'na',\n    parameters: []\n  },\n  'ROW': {\n    method: 'row',\n    parameters: [{\n      argumentType: ArgumentTypes.NOERROR,\n      optional: true\n    }],\n    isDependentOnSheetStructureChange: true,\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'ROWS': {\n    method: 'rows',\n    parameters: [{\n      argumentType: ArgumentTypes.RANGE\n    }],\n    isDependentOnSheetStructureChange: true,\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'SHEET': {\n    method: 'sheet',\n    parameters: [{\n      argumentType: ArgumentTypes.STRING\n    }],\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'SHEETS': {\n    method: 'sheets',\n    parameters: [{\n      argumentType: ArgumentTypes.STRING\n    }],\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  }\n};","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/interpreter/plugin/InformationPlugin.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_inherits","subClass","superClass","create","value","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","CellError","ErrorType","FormulaVertex","ErrorMessage","AstNodeType","EmptyValue","isExtendedNumber","SimpleRangeValue","ArgumentTypes","FunctionPlugin","InformationPlugin","_FunctionPlugin","_super","isbinary","ast","state","runFunction","args","metadata","arg","test","iserr","type","NA","iserror","isformula","_this","runFunctionWithReferenceArgument","WrongArgNumber","reference","vertex","dependencyGraph","addressMapping","getCell","isblank","isna","isnumber","islogical","isref","REF","CYCLE","istext","isnontext","column","formulaAddress","col","columns","some","astIt","EMPTY","NUM","EmptyArg","argAst","PARENTHESIS","expression","CELL_RANGE","COLUMN_RANGE","end","start","CELL_REFERENCE","ROW_RANGE","config","maxColumns","val","evaluateAst","width","row","rows","maxRows","height","index","_this2","rangeValue","_a","_b","_c","_d","_e","_f","VALUE","LessThanOne","ValueLarge","data","CellRangeExpected","address","range","getAddress","getScalarValue","na","_ast","_state","sheet","_this3","sheetNumber","sheetMapping","get","undefined","SheetRef","sheets","_this4","numberOfSheets","CellRefExpected","implementedFunctions","method","parameters","argumentType","NOERROR","optional","isDependentOnSheetStructureChange","doesNotNeedArgumentsToBeComputed","vectorizationForbidden","RANGE","STRING","SCALAR","NUMBER","defaultValue"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAY1X,SAASK,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,QAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,IAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,IAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,QAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4BC,IAAAA,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8BI,UAAU,CAACM,GAAzC,EAA8CN,UAA9C;AAA4D;AAAE;;AAE7T,SAASO,YAAT,CAAsBd,WAAtB,EAAmCe,UAAnC,EAA+CC,WAA/C,EAA4D;AAAE,MAAID,UAAJ,EAAgBb,iBAAiB,CAACF,WAAW,CAACH,SAAb,EAAwBkB,UAAxB,CAAjB;AAAsD,MAAIC,WAAJ,EAAiBd,iBAAiB,CAACF,WAAD,EAAcgB,WAAd,CAAjB;AAA6C,SAAOhB,WAAP;AAAqB;;AAEvN,SAASiB,SAAT,CAAmBC,QAAnB,EAA6BC,UAA7B,EAAyC;AAAE,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,KAAK,IAAvD,EAA6D;AAAE,UAAM,IAAIlB,SAAJ,CAAc,oDAAd,CAAN;AAA4E;;AAACiB,EAAAA,QAAQ,CAACrB,SAAT,GAAqBc,MAAM,CAACS,MAAP,CAAcD,UAAU,IAAIA,UAAU,CAACtB,SAAvC,EAAkD;AAAED,IAAAA,WAAW,EAAE;AAAEyB,MAAAA,KAAK,EAAEH,QAAT;AAAmBR,MAAAA,QAAQ,EAAE,IAA7B;AAAmCD,MAAAA,YAAY,EAAE;AAAjD;AAAf,GAAlD,CAArB;AAAkJ,MAAIU,UAAJ,EAAgBG,eAAe,CAACJ,QAAD,EAAWC,UAAX,CAAf;AAAwC;;AAEjY,SAASG,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAAEF,EAAAA,eAAe,GAAGX,MAAM,CAACc,cAAP,IAAyB,SAASH,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAAED,IAAAA,CAAC,CAACG,SAAF,GAAcF,CAAd;AAAiB,WAAOD,CAAP;AAAW,GAAxG;;AAA0G,SAAOD,eAAe,CAACC,CAAD,EAAIC,CAAJ,CAAtB;AAA+B;;AAE1K,SAASG,YAAT,CAAsBC,OAAtB,EAA+B;AAAE,MAAIC,yBAAyB,GAAGC,yBAAyB,EAAzD;;AAA6D,SAAO,SAASC,oBAAT,GAAgC;AAAE,QAAIC,KAAK,GAAGC,eAAe,CAACL,OAAD,CAA3B;AAAA,QAAsCM,MAAtC;;AAA8C,QAAIL,yBAAJ,EAA+B;AAAE,UAAIM,SAAS,GAAGF,eAAe,CAAC,IAAD,CAAf,CAAsBrC,WAAtC;;AAAmDsC,MAAAA,MAAM,GAAGE,OAAO,CAACC,SAAR,CAAkBL,KAAlB,EAAyBM,SAAzB,EAAoCH,SAApC,CAAT;AAA0D,KAA9I,MAAoJ;AAAED,MAAAA,MAAM,GAAGF,KAAK,CAACO,KAAN,CAAY,IAAZ,EAAkBD,SAAlB,CAAT;AAAwC;;AAAC,WAAOE,0BAA0B,CAAC,IAAD,EAAON,MAAP,CAAjC;AAAkD,GAAxU;AAA2U;;AAEza,SAASM,0BAAT,CAAoCC,IAApC,EAA0CC,IAA1C,EAAgD;AAAE,MAAIA,IAAI,KAAKlD,OAAO,CAACkD,IAAD,CAAP,KAAkB,QAAlB,IAA8B,OAAOA,IAAP,KAAgB,UAAnD,CAAR,EAAwE;AAAE,WAAOA,IAAP;AAAc,GAAxF,MAA8F,IAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAE,UAAM,IAAIzC,SAAJ,CAAc,0DAAd,CAAN;AAAkF;;AAAC,SAAO0C,sBAAsB,CAACF,IAAD,CAA7B;AAAsC;;AAEhS,SAASE,sBAAT,CAAgCF,IAAhC,EAAsC;AAAE,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAE,UAAM,IAAIG,cAAJ,CAAmB,2DAAnB,CAAN;AAAwF;;AAAC,SAAOH,IAAP;AAAc;;AAEtK,SAASX,yBAAT,GAAqC;AAAE,MAAI,OAAOM,OAAP,KAAmB,WAAnB,IAAkC,CAACA,OAAO,CAACC,SAA/C,EAA0D,OAAO,KAAP;AAAc,MAAID,OAAO,CAACC,SAAR,CAAkBQ,IAAtB,EAA4B,OAAO,KAAP;AAAc,MAAI,OAAOC,KAAP,KAAiB,UAArB,EAAiC,OAAO,IAAP;;AAAa,MAAI;AAAEC,IAAAA,OAAO,CAAClD,SAAR,CAAkBmD,OAAlB,CAA0BN,IAA1B,CAA+BN,OAAO,CAACC,SAAR,CAAkBU,OAAlB,EAA2B,EAA3B,EAA+B,YAAY,CAAE,CAA7C,CAA/B;AAAgF,WAAO,IAAP;AAAc,GAApG,CAAqG,OAAOE,CAAP,EAAU;AAAE,WAAO,KAAP;AAAe;AAAE;;AAEzU,SAAShB,eAAT,CAAyBV,CAAzB,EAA4B;AAAEU,EAAAA,eAAe,GAAGtB,MAAM,CAACc,cAAP,GAAwBd,MAAM,CAACuC,cAA/B,GAAgD,SAASjB,eAAT,CAAyBV,CAAzB,EAA4B;AAAE,WAAOA,CAAC,CAACG,SAAF,IAAef,MAAM,CAACuC,cAAP,CAAsB3B,CAAtB,CAAtB;AAAiD,GAAjJ;AAAmJ,SAAOU,eAAe,CAACV,CAAD,CAAtB;AAA4B;AAE7M;AACA;AACA;AACA;;;AACA,SAAS4B,SAAT,EAAoBC,SAApB,QAAqC,YAArC;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,qBAA7C;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,kBAA9C;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,iBAAiB,GAAG,aAAa,UAAUC,eAAV,EAA2B;AACrE7C,EAAAA,SAAS,CAAC4C,iBAAD,EAAoBC,eAApB,CAAT;;AAEA,MAAIC,MAAM,GAAGpC,YAAY,CAACkC,iBAAD,CAAzB;;AAEA,WAASA,iBAAT,GAA6B;AAC3B/D,IAAAA,eAAe,CAAC,IAAD,EAAO+D,iBAAP,CAAf;;AAEA,WAAOE,MAAM,CAACxB,KAAP,CAAa,IAAb,EAAmBD,SAAnB,CAAP;AACD;;AAEDxB,EAAAA,YAAY,CAAC+C,iBAAD,EAAoB,CAAC;AAC/BhD,IAAAA,GAAG,EAAE,UAD0B;AAE/BQ,IAAAA,KAAK;AACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,aAAS2C,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC5B,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,UAAd,CAAlC,EAA6D,UAAUC,GAAV,EAAe;AACjF,eAAO,eAAeC,IAAf,CAAoBD,GAApB,CAAP;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAvBmC,GAAD,EAyB7B;AACDzD,IAAAA,GAAG,EAAE,OADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASmD,KAAT,CAAeP,GAAf,EAAoBC,KAApB,EAA2B;AAChC,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,OAAd,CAAlC,EAA0D,UAAUC,GAAV,EAAe;AAC9E,eAAOA,GAAG,YAAYnB,SAAf,IAA4BmB,GAAG,CAACG,IAAJ,KAAarB,SAAS,CAACsB,EAA1D;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAdK,GAzB6B,EAyC7B;AACD7D,IAAAA,GAAG,EAAE,SADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASsD,OAAT,CAAiBV,GAAjB,EAAsBC,KAAtB,EAA6B;AAClC,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,SAAd,CAAlC,EAA4D,UAAUC,GAAV,EAAe;AAChF,eAAOA,GAAG,YAAYnB,SAAtB;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAdK,GAzC6B,EAyD7B;AACDtC,IAAAA,GAAG,EAAE,WADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASuD,SAAT,CAAmBX,GAAnB,EAAwBC,KAAxB,EAA+B;AACpC,UAAIW,KAAK,GAAG,IAAZ;;AAEA,aAAO,KAAKC,gCAAL,CAAsCb,GAAG,CAACG,IAA1C,EAAgDF,KAAhD,EAAuD,KAAKG,QAAL,CAAc,WAAd,CAAvD,EAAmF,YAAY;AACpG,eAAO,IAAIlB,SAAJ,CAAcC,SAAS,CAACsB,EAAxB,EAA4BpB,YAAY,CAACyB,cAAzC,CAAP;AACD,OAFM,EAEJ,UAAUC,SAAV,EAAqB;AACtB,YAAIC,MAAM,GAAGJ,KAAK,CAACK,eAAN,CAAsBC,cAAtB,CAAqCC,OAArC,CAA6CJ,SAA7C,CAAb;;AAEA,eAAOC,MAAM,YAAY5B,aAAzB;AACD,OANM,CAAP;AAOD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AApBK,GAzD6B,EA+E7B;AACDxC,IAAAA,GAAG,EAAE,SADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASgE,OAAT,CAAiBpB,GAAjB,EAAsBC,KAAtB,EAA6B;AAClC,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,SAAd,CAAlC,EAA4D,UAAUC,GAAV,EAAe;AAChF,eAAOA,GAAG,KAAKd,UAAf;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAdK,GA/E6B,EA+F7B;AACD3C,IAAAA,GAAG,EAAE,MADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASiE,IAAT,CAAcrB,GAAd,EAAmBC,KAAnB,EAA0B;AAC/B,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,MAAd,CAAlC,EAAyD,UAAUC,GAAV,EAAe;AAC7E,eAAOA,GAAG,YAAYnB,SAAf,IAA4BmB,GAAG,CAACG,IAAJ,IAAYrB,SAAS,CAACsB,EAAzD;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAdK,GA/F6B,EA+G7B;AACD7D,IAAAA,GAAG,EAAE,UADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASkE,QAAT,CAAkBtB,GAAlB,EAAuBC,KAAvB,EAA8B;AACnC,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,UAAd,CAAlC,EAA6DZ,gBAA7D,CAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAZK,GA/G6B,EA6H7B;AACD5C,IAAAA,GAAG,EAAE,WADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASmE,SAAT,CAAmBvB,GAAnB,EAAwBC,KAAxB,EAA+B;AACpC,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,WAAd,CAAlC,EAA8D,UAAUC,GAAV,EAAe;AAClF,eAAO,OAAOA,GAAP,KAAe,SAAtB;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAdK,GA7H6B,EA6I7B;AACDzD,IAAAA,GAAG,EAAE,OADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASoE,KAAT,CAAexB,GAAf,EAAoBC,KAApB,EAA2B;AAChC,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,OAAd,CAAlC,EAA0D,UAAUC,GAAV,EAAe;AAC9E,eAAOA,GAAG,YAAYnB,SAAf,KAA6BmB,GAAG,CAACG,IAAJ,IAAYrB,SAAS,CAACsC,GAAtB,IAA6BpB,GAAG,CAACG,IAAJ,IAAYrB,SAAS,CAACuC,KAAhF,CAAP;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAdK,GA7I6B,EA6J7B;AACD9E,IAAAA,GAAG,EAAE,QADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASuE,MAAT,CAAgB3B,GAAhB,EAAqBC,KAArB,EAA4B;AACjC,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,QAAd,CAAlC,EAA2D,UAAUC,GAAV,EAAe;AAC/E,eAAO,OAAOA,GAAP,KAAe,QAAtB;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAdK,GA7J6B,EA6K7B;AACDzD,IAAAA,GAAG,EAAE,WADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASwE,SAAT,CAAmB5B,GAAnB,EAAwBC,KAAxB,EAA+B;AACpC,aAAO,KAAKC,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,WAAd,CAAlC,EAA8D,UAAUC,GAAV,EAAe;AAClF,eAAO,EAAE,OAAOA,GAAP,KAAe,QAAjB,CAAP;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAdK,GA7K6B,EA6L7B;AACDzD,IAAAA,GAAG,EAAE,QADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASyE,MAAT,CAAgB7B,GAAhB,EAAqBC,KAArB,EAA4B;AACjC,aAAO,KAAKY,gCAAL,CAAsCb,GAAG,CAACG,IAA1C,EAAgDF,KAAhD,EAAuD,KAAKG,QAAL,CAAc,QAAd,CAAvD,EAAgF,YAAY;AACjG,eAAOH,KAAK,CAAC6B,cAAN,CAAqBC,GAArB,GAA2B,CAAlC;AACD,OAFM,EAEJ,UAAUhB,SAAV,EAAqB;AACtB,eAAOA,SAAS,CAACgB,GAAV,GAAgB,CAAvB;AACD,OAJM,CAAP;AAKD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAhBK,GA7L6B,EA+M7B;AACDnF,IAAAA,GAAG,EAAE,SADJ;AAEDQ,IAAAA,KAAK,EAAE,SAAS4E,OAAT,CAAiBhC,GAAjB,EAAsBC,KAAtB,EAA6B;AAClC,UAAID,GAAG,CAACG,IAAJ,CAAS9D,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAO,IAAI6C,SAAJ,CAAcC,SAAS,CAACsB,EAAxB,EAA4BpB,YAAY,CAACyB,cAAzC,CAAP;AACD;;AAED,UAAId,GAAG,CAACG,IAAJ,CAAS8B,IAAT,CAAc,UAAUC,KAAV,EAAiB;AACjC,eAAOA,KAAK,CAAC1B,IAAN,KAAelB,WAAW,CAAC6C,KAAlC;AACD,OAFG,CAAJ,EAEI;AACF,eAAO,IAAIjD,SAAJ,CAAcC,SAAS,CAACiD,GAAxB,EAA6B/C,YAAY,CAACgD,QAA1C,CAAP;AACD;;AAED,UAAIC,MAAM,GAAGtC,GAAG,CAACG,IAAJ,CAAS,CAAT,CAAb;;AAEA,aAAOmC,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACiD,WAAnC,EAAgD;AAC9CD,QAAAA,MAAM,GAAGA,MAAM,CAACE,UAAhB;AACD;;AAED,UAAIF,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACmD,UAA5B,IAA0CH,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACoD,YAA1E,EAAwF;AACtF,eAAOJ,MAAM,CAACK,GAAP,CAAWZ,GAAX,GAAiBO,MAAM,CAACM,KAAP,CAAab,GAA9B,GAAoC,CAA3C;AACD,OAFD,MAEO,IAAIO,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACuD,cAAhC,EAAgD;AACrD,eAAO,CAAP;AACD,OAFM,MAEA,IAAIP,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACwD,SAAhC,EAA2C;AAChD,eAAO,KAAKC,MAAL,CAAYC,UAAnB;AACD,OAFM,MAEA;AACL,YAAIC,GAAG,GAAG,KAAKC,WAAL,CAAiBZ,MAAjB,EAAyBrC,KAAzB,CAAV;;AAEA,YAAIgD,GAAG,YAAYxD,gBAAnB,EAAqC;AACnC,iBAAOwD,GAAG,CAACE,KAAJ,EAAP;AACD,SAFD,MAEO,IAAIF,GAAG,YAAY/D,SAAnB,EAA8B;AACnC,iBAAO+D,GAAP;AACD,SAFM,MAEA;AACL,iBAAO,CAAP;AACD;AACF;AACF;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AA5CK,GA/M6B,EA6P7B;AACDrG,IAAAA,GAAG,EAAE,KADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASgG,GAAT,CAAapD,GAAb,EAAkBC,KAAlB,EAAyB;AAC9B,aAAO,KAAKY,gCAAL,CAAsCb,GAAG,CAACG,IAA1C,EAAgDF,KAAhD,EAAuD,KAAKG,QAAL,CAAc,KAAd,CAAvD,EAA6E,YAAY;AAC9F,eAAOH,KAAK,CAAC6B,cAAN,CAAqBsB,GAArB,GAA2B,CAAlC;AACD,OAFM,EAEJ,UAAUrC,SAAV,EAAqB;AACtB,eAAOA,SAAS,CAACqC,GAAV,GAAgB,CAAvB;AACD,OAJM,CAAP;AAKD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAhBK,GA7P6B,EA+Q7B;AACDxG,IAAAA,GAAG,EAAE,MADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASiG,IAAT,CAAcrD,GAAd,EAAmBC,KAAnB,EAA0B;AAC/B,UAAID,GAAG,CAACG,IAAJ,CAAS9D,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAO,IAAI6C,SAAJ,CAAcC,SAAS,CAACsB,EAAxB,EAA4BpB,YAAY,CAACyB,cAAzC,CAAP;AACD;;AAED,UAAId,GAAG,CAACG,IAAJ,CAAS8B,IAAT,CAAc,UAAUC,KAAV,EAAiB;AACjC,eAAOA,KAAK,CAAC1B,IAAN,KAAelB,WAAW,CAAC6C,KAAlC;AACD,OAFG,CAAJ,EAEI;AACF,eAAO,IAAIjD,SAAJ,CAAcC,SAAS,CAACiD,GAAxB,EAA6B/C,YAAY,CAACgD,QAA1C,CAAP;AACD;;AAED,UAAIC,MAAM,GAAGtC,GAAG,CAACG,IAAJ,CAAS,CAAT,CAAb;;AAEA,aAAOmC,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACiD,WAAnC,EAAgD;AAC9CD,QAAAA,MAAM,GAAGA,MAAM,CAACE,UAAhB;AACD;;AAED,UAAIF,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACmD,UAA5B,IAA0CH,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACwD,SAA1E,EAAqF;AACnF,eAAOR,MAAM,CAACK,GAAP,CAAWS,GAAX,GAAiBd,MAAM,CAACM,KAAP,CAAaQ,GAA9B,GAAoC,CAA3C;AACD,OAFD,MAEO,IAAId,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACuD,cAAhC,EAAgD;AACrD,eAAO,CAAP;AACD,OAFM,MAEA,IAAIP,MAAM,CAAC9B,IAAP,KAAgBlB,WAAW,CAACoD,YAAhC,EAA8C;AACnD,eAAO,KAAKK,MAAL,CAAYO,OAAnB;AACD,OAFM,MAEA;AACL,YAAIL,GAAG,GAAG,KAAKC,WAAL,CAAiBZ,MAAjB,EAAyBrC,KAAzB,CAAV;;AAEA,YAAIgD,GAAG,YAAYxD,gBAAnB,EAAqC;AACnC,iBAAOwD,GAAG,CAACM,MAAJ,EAAP;AACD,SAFD,MAEO,IAAIN,GAAG,YAAY/D,SAAnB,EAA8B;AACnC,iBAAO+D,GAAP;AACD,SAFM,MAEA;AACL,iBAAO,CAAP;AACD;AACF;AACF;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AA5CK,GA/Q6B,EA6T7B;AACDrG,IAAAA,GAAG,EAAE,OADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASoG,KAAT,CAAexD,GAAf,EAAoBC,KAApB,EAA2B;AAChC,UAAIwD,MAAM,GAAG,IAAb;;AAEA,aAAO,KAAKvD,WAAL,CAAiBF,GAAG,CAACG,IAArB,EAA2BF,KAA3B,EAAkC,KAAKG,QAAL,CAAc,OAAd,CAAlC,EAA0D,UAAUsD,UAAV,EAAsBN,GAAtB,EAA2BrB,GAA3B,EAAgC;AAC/F,YAAI4B,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB;;AAEA,YAAIjC,GAAG,GAAG,CAAN,IAAWqB,GAAG,GAAG,CAArB,EAAwB;AACtB,iBAAO,IAAIlE,SAAJ,CAAcC,SAAS,CAAC8E,KAAxB,EAA+B5E,YAAY,CAAC6E,WAA5C,CAAP;AACD;;AAED,YAAInC,GAAG,GAAG2B,UAAU,CAACP,KAAX,EAAN,IAA4BC,GAAG,GAAGM,UAAU,CAACH,MAAX,EAAtC,EAA2D;AACzD,iBAAO,IAAIrE,SAAJ,CAAcC,SAAS,CAACiD,GAAxB,EAA6B/C,YAAY,CAAC8E,UAA1C,CAAP;AACD;;AAED,eAAO,CAACH,EAAE,GAAG,CAACH,EAAE,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAGD,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACU,IAAzE,MAAmF,IAAnF,IAA2FT,EAAE,KAAK,KAAK,CAAvG,GAA2G,KAAK,CAAhH,GAAoHA,EAAE,CAACP,GAAG,GAAG,CAAP,CAA5H,MAA2I,IAA3I,IAAmJQ,EAAE,KAAK,KAAK,CAA/J,GAAmK,KAAK,CAAxK,GAA4KA,EAAE,CAAC7B,GAAG,GAAG,CAAP,CAApL,MAAmM,IAAnM,IAA2M8B,EAAE,KAAK,KAAK,CAAvN,GAA2NA,EAA3N,GAAgO,CAACE,EAAE,GAAG,CAACD,EAAE,GAAGJ,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACU,IAAzE,MAAmF,IAAnF,IAA2FN,EAAE,KAAK,KAAK,CAAvG,GAA2G,KAAK,CAAhH,GAAoHA,EAAE,CAAC,CAAD,CAA5H,MAAqI,IAArI,IAA6IC,EAAE,KAAK,KAAK,CAAzJ,GAA6J,KAAK,CAAlK,GAAsKA,EAAE,CAAC,CAAD,CAA9Y,MAAuZ,IAAvZ,IAA+ZC,EAAE,KAAK,KAAK,CAA3a,GAA+aA,EAA/a,GAAob,IAAI9E,SAAJ,CAAcC,SAAS,CAAC8E,KAAxB,EAA+B5E,YAAY,CAACgF,iBAA5C,CAA3b;AACA,YAAIC,OAAO,GAAGZ,UAAU,CAACa,KAAX,CAAiBC,UAAjB,CAA4BzC,GAAG,GAAG,CAAlC,EAAqCqB,GAAG,GAAG,CAA3C,CAAd;AACA,eAAOK,MAAM,CAACxC,eAAP,CAAuBwD,cAAvB,CAAsCH,OAAtC,CAAP;AACD,OAdM,CAAP;AAeD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AA5BK,GA7T6B,EA2V7B;AACD1H,IAAAA,GAAG,EAAE,IADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASsH,EAAT,CAAYC,IAAZ,EAAkBC,MAAlB,EAA0B;AAC/B,aAAO,IAAI1F,SAAJ,CAAcC,SAAS,CAACsB,EAAxB,CAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAZK,GA3V6B,EAyW7B;AACD7D,IAAAA,GAAG,EAAE,OADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASyH,KAAT,CAAe7E,GAAf,EAAoBC,KAApB,EAA2B;AAChC,UAAI6E,MAAM,GAAG,IAAb;;AAEA,aAAO,KAAKjE,gCAAL,CAAsCb,GAAG,CAACG,IAA1C,EAAgDF,KAAhD,EAAuD,KAAKG,QAAL,CAAc,OAAd,CAAvD,EAA+E,YAAY;AAChG,eAAOH,KAAK,CAAC6B,cAAN,CAAqB+C,KAArB,GAA6B,CAApC;AACD,OAFM,EAEJ,UAAU9D,SAAV,EAAqB;AACtB,eAAOA,SAAS,CAAC8D,KAAV,GAAkB,CAAzB;AACD,OAJM,EAIJ,UAAUzH,KAAV,EAAiB;AAClB,YAAI2H,WAAW,GAAGD,MAAM,CAAC7D,eAAP,CAAuB+D,YAAvB,CAAoCC,GAApC,CAAwC7H,KAAxC,CAAlB;;AAEA,YAAI2H,WAAW,KAAKG,SAApB,EAA+B;AAC7B,iBAAOH,WAAW,GAAG,CAArB;AACD,SAFD,MAEO;AACL,iBAAO,IAAI7F,SAAJ,CAAcC,SAAS,CAACsB,EAAxB,EAA4BpB,YAAY,CAAC8F,QAAzC,CAAP;AACD;AACF,OAZM,CAAP;AAaD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3BK,GAzW6B,EAsY7B;AACDvI,IAAAA,GAAG,EAAE,QADJ;AAEDQ,IAAAA,KAAK,EAAE,SAASgI,MAAT,CAAgBpF,GAAhB,EAAqBC,KAArB,EAA4B;AACjC,UAAIoF,MAAM,GAAG,IAAb;;AAEA,aAAO,KAAKxE,gCAAL,CAAsCb,GAAG,CAACG,IAA1C,EAAgDF,KAAhD,EAAuD,KAAKG,QAAL,CAAc,QAAd,CAAvD,EAAgF,YAAY;AACjG,eAAOiF,MAAM,CAACpE,eAAP,CAAuB+D,YAAvB,CAAoCM,cAApC,EAAP;AACD,OAFM,EAEJ;AACH,kBAAY;AACV,eAAO,CAAP;AACD,OALM,EAKJ;AACH,kBAAY;AACV,eAAO,IAAIpG,SAAJ,CAAcC,SAAS,CAAC8E,KAAxB,EAA+B5E,YAAY,CAACkG,eAA5C,CAAP;AACD,OARM,CAQL;AARK,OAAP;AAUD;AAfA,GAtY6B,CAApB,CAAZ;;AAwZA,SAAO3F,iBAAP;AACD,CApa2C,CAoa1CD,cApa0C,CAArC;AAqaPC,iBAAiB,CAAC4F,oBAAlB,GAAyC;AACvC,YAAU;AACRC,IAAAA,MAAM,EAAE,QADA;AAERC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACkG,OADjB;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAD,CAFJ;AAMRC,IAAAA,iCAAiC,EAAE,IAN3B;AAORC,IAAAA,gCAAgC,EAAE,IAP1B;AAQRC,IAAAA,sBAAsB,EAAE;AARhB,GAD6B;AAWvC,aAAW;AACTP,IAAAA,MAAM,EAAE,SADC;AAETC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACuG;AADjB,KAAD,CAFH;AAKTH,IAAAA,iCAAiC,EAAE,IAL1B;AAMTC,IAAAA,gCAAgC,EAAE,IANzB;AAOTC,IAAAA,sBAAsB,EAAE;AAPf,GAX4B;AAoBvC,cAAY;AACVP,IAAAA,MAAM,EAAE,UADE;AAEVC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACwG;AADjB,KAAD;AAFF,GApB2B;AA0BvC,WAAS;AACPT,IAAAA,MAAM,EAAE,OADD;AAEPC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACyG;AADjB,KAAD;AAFL,GA1B8B;AAgCvC,eAAa;AACXV,IAAAA,MAAM,EAAE,WADG;AAEXC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACkG;AADjB,KAAD,CAFD;AAKXG,IAAAA,gCAAgC,EAAE,IALvB;AAMXC,IAAAA,sBAAsB,EAAE;AANb,GAhC0B;AAwCvC,UAAQ;AACNP,IAAAA,MAAM,EAAE,MADF;AAENC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACyG;AADjB,KAAD;AAFN,GAxC+B;AA8CvC,WAAS;AACPV,IAAAA,MAAM,EAAE,OADD;AAEPC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACyG;AADjB,KAAD,CAFL;AAKPH,IAAAA,sBAAsB,EAAE;AALjB,GA9C8B;AAqDvC,aAAW;AACTP,IAAAA,MAAM,EAAE,SADC;AAETC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACyG;AADjB,KAAD;AAFH,GArD4B;AA2DvC,aAAW;AACTV,IAAAA,MAAM,EAAE,SADC;AAETC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACyG;AADjB,KAAD;AAFH,GA3D4B;AAiEvC,cAAY;AACVV,IAAAA,MAAM,EAAE,UADE;AAEVC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACyG;AADjB,KAAD;AAFF,GAjE2B;AAuEvC,eAAa;AACXV,IAAAA,MAAM,EAAE,WADG;AAEXC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACyG;AADjB,KAAD;AAFD,GAvE0B;AA6EvC,YAAU;AACRV,IAAAA,MAAM,EAAE,QADA;AAERC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACyG;AADjB,KAAD;AAFJ,GA7E6B;AAmFvC,eAAa;AACXV,IAAAA,MAAM,EAAE,WADG;AAEXC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACyG;AADjB,KAAD;AAFD,GAnF0B;AAyFvC,WAAS;AACPV,IAAAA,MAAM,EAAE,OADD;AAEPC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACuG;AADjB,KAAD,EAET;AACDN,MAAAA,YAAY,EAAEjG,aAAa,CAAC0G;AAD3B,KAFS,EAIT;AACDT,MAAAA,YAAY,EAAEjG,aAAa,CAAC0G,MAD3B;AAEDC,MAAAA,YAAY,EAAE;AAFb,KAJS;AAFL,GAzF8B;AAoGvC,QAAM;AACJZ,IAAAA,MAAM,EAAE,IADJ;AAEJC,IAAAA,UAAU,EAAE;AAFR,GApGiC;AAwGvC,SAAO;AACLD,IAAAA,MAAM,EAAE,KADH;AAELC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACkG,OADjB;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAD,CAFP;AAMLC,IAAAA,iCAAiC,EAAE,IAN9B;AAOLC,IAAAA,gCAAgC,EAAE,IAP7B;AAQLC,IAAAA,sBAAsB,EAAE;AARnB,GAxGgC;AAkHvC,UAAQ;AACNP,IAAAA,MAAM,EAAE,MADF;AAENC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACuG;AADjB,KAAD,CAFN;AAKNH,IAAAA,iCAAiC,EAAE,IAL7B;AAMNC,IAAAA,gCAAgC,EAAE,IAN5B;AAONC,IAAAA,sBAAsB,EAAE;AAPlB,GAlH+B;AA2HvC,WAAS;AACPP,IAAAA,MAAM,EAAE,OADD;AAEPC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACwG;AADjB,KAAD,CAFL;AAKPH,IAAAA,gCAAgC,EAAE,IAL3B;AAMPC,IAAAA,sBAAsB,EAAE;AANjB,GA3H8B;AAmIvC,YAAU;AACRP,IAAAA,MAAM,EAAE,QADA;AAERC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,YAAY,EAAEjG,aAAa,CAACwG;AADjB,KAAD,CAFJ;AAKRH,IAAAA,gCAAgC,EAAE,IAL1B;AAMRC,IAAAA,sBAAsB,EAAE;AANhB;AAnI6B,CAAzC","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { CellError, ErrorType } from '../../Cell';\nimport { FormulaVertex } from '../../DependencyGraph/FormulaCellVertex';\nimport { ErrorMessage } from '../../error-message';\nimport { AstNodeType } from '../../parser';\nimport { EmptyValue, isExtendedNumber } from '../InterpreterValue';\nimport { SimpleRangeValue } from '../SimpleRangeValue';\nimport { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';\n/**\n * Interpreter plugin containing information functions\n */\n\nexport var InformationPlugin = /*#__PURE__*/function (_FunctionPlugin) {\n  _inherits(InformationPlugin, _FunctionPlugin);\n\n  var _super = _createSuper(InformationPlugin);\n\n  function InformationPlugin() {\n    _classCallCheck(this, InformationPlugin);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(InformationPlugin, [{\n    key: \"isbinary\",\n    value:\n    /**\n     * Corresponds to ISBINARY(value)\n     *\n     * Returns true if provided value is a valid binary number\n     *\n     * @param ast\n     * @param state\n     */\n    function isbinary(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISBINARY'), function (arg) {\n        return /^[01]{1,10}$/.test(arg);\n      });\n    }\n    /**\n     * Corresponds to ISERR(value)\n     *\n     * Returns true if provided value is an error except #N/A!\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"iserr\",\n    value: function iserr(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISERR'), function (arg) {\n        return arg instanceof CellError && arg.type !== ErrorType.NA;\n      });\n    }\n    /**\n     * Corresponds to ISERROR(value)\n     *\n     * Checks whether provided value is an error\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"iserror\",\n    value: function iserror(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISERROR'), function (arg) {\n        return arg instanceof CellError;\n      });\n    }\n    /**\n     * Corresponds to ISFORMULA(value)\n     *\n     * Checks whether referenced cell is a formula\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isformula\",\n    value: function isformula(ast, state) {\n      var _this = this;\n\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('ISFORMULA'), function () {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }, function (reference) {\n        var vertex = _this.dependencyGraph.addressMapping.getCell(reference);\n\n        return vertex instanceof FormulaVertex;\n      });\n    }\n    /**\n     * Corresponds to ISBLANK(value)\n     *\n     * Checks whether provided cell reference is empty\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isblank\",\n    value: function isblank(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISBLANK'), function (arg) {\n        return arg === EmptyValue;\n      });\n    }\n    /**\n     * Corresponds to ISNA(value)\n     *\n     * Returns true if provided value is #N/A! error\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isna\",\n    value: function isna(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISNA'), function (arg) {\n        return arg instanceof CellError && arg.type == ErrorType.NA;\n      });\n    }\n    /**\n     * Corresponds to ISNUMBER(value)\n     *\n     * Checks whether provided cell reference is a number\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isnumber\",\n    value: function isnumber(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISNUMBER'), isExtendedNumber);\n    }\n    /**\n     * Corresponds to ISLOGICAL(value)\n     *\n     * Checks whether provided cell reference is of logical type\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"islogical\",\n    value: function islogical(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISLOGICAL'), function (arg) {\n        return typeof arg === 'boolean';\n      });\n    }\n    /**\n     * Corresponds to ISREF(value)\n     *\n     * Returns true if provided value is #REF! error\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isref\",\n    value: function isref(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISREF'), function (arg) {\n        return arg instanceof CellError && (arg.type == ErrorType.REF || arg.type == ErrorType.CYCLE);\n      });\n    }\n    /**\n     * Corresponds to ISTEXT(value)\n     *\n     * Checks whether provided cell reference is of logical type\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"istext\",\n    value: function istext(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISTEXT'), function (arg) {\n        return typeof arg === 'string';\n      });\n    }\n    /**\n     * Corresponds to ISNONTEXT(value)\n     *\n     * Checks whether provided cell reference is of logical type\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"isnontext\",\n    value: function isnontext(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('ISNONTEXT'), function (arg) {\n        return !(typeof arg === 'string');\n      });\n    }\n    /**\n     * Corresponds to COLUMN(reference)\n     *\n     * Returns column number of a reference or a formula cell if reference not provided\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"column\",\n    value: function column(ast, state) {\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('COLUMN'), function () {\n        return state.formulaAddress.col + 1;\n      }, function (reference) {\n        return reference.col + 1;\n      });\n    }\n    /**\n     * Corresponds to COLUMNS(range)\n     *\n     * Returns number of columns in provided range of cells\n     *\n     * @param ast\n     * @param _state\n     */\n\n  }, {\n    key: \"columns\",\n    value: function columns(ast, state) {\n      if (ast.args.length !== 1) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      if (ast.args.some(function (astIt) {\n        return astIt.type === AstNodeType.EMPTY;\n      })) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EmptyArg);\n      }\n\n      var argAst = ast.args[0];\n\n      while (argAst.type === AstNodeType.PARENTHESIS) {\n        argAst = argAst.expression;\n      }\n\n      if (argAst.type === AstNodeType.CELL_RANGE || argAst.type === AstNodeType.COLUMN_RANGE) {\n        return argAst.end.col - argAst.start.col + 1;\n      } else if (argAst.type === AstNodeType.CELL_REFERENCE) {\n        return 1;\n      } else if (argAst.type === AstNodeType.ROW_RANGE) {\n        return this.config.maxColumns;\n      } else {\n        var val = this.evaluateAst(argAst, state);\n\n        if (val instanceof SimpleRangeValue) {\n          return val.width();\n        } else if (val instanceof CellError) {\n          return val;\n        } else {\n          return 1;\n        }\n      }\n    }\n    /**\n     * Corresponds to ROW(reference)\n     *\n     * Returns row number of a reference or a formula cell if reference not provided\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"row\",\n    value: function row(ast, state) {\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('ROW'), function () {\n        return state.formulaAddress.row + 1;\n      }, function (reference) {\n        return reference.row + 1;\n      });\n    }\n    /**\n     * Corresponds to ROWS(range)\n     *\n     * Returns number of rows in provided range of cells\n     *\n     * @param ast\n     * @param _state\n     */\n\n  }, {\n    key: \"rows\",\n    value: function rows(ast, state) {\n      if (ast.args.length !== 1) {\n        return new CellError(ErrorType.NA, ErrorMessage.WrongArgNumber);\n      }\n\n      if (ast.args.some(function (astIt) {\n        return astIt.type === AstNodeType.EMPTY;\n      })) {\n        return new CellError(ErrorType.NUM, ErrorMessage.EmptyArg);\n      }\n\n      var argAst = ast.args[0];\n\n      while (argAst.type === AstNodeType.PARENTHESIS) {\n        argAst = argAst.expression;\n      }\n\n      if (argAst.type === AstNodeType.CELL_RANGE || argAst.type === AstNodeType.ROW_RANGE) {\n        return argAst.end.row - argAst.start.row + 1;\n      } else if (argAst.type === AstNodeType.CELL_REFERENCE) {\n        return 1;\n      } else if (argAst.type === AstNodeType.COLUMN_RANGE) {\n        return this.config.maxRows;\n      } else {\n        var val = this.evaluateAst(argAst, state);\n\n        if (val instanceof SimpleRangeValue) {\n          return val.height();\n        } else if (val instanceof CellError) {\n          return val;\n        } else {\n          return 1;\n        }\n      }\n    }\n    /**\n     * Corresponds to INDEX(range;)\n     *\n     * Returns specific position in 2d array.\n     *\n     * @param ast\n     * @param state\n     */\n\n  }, {\n    key: \"index\",\n    value: function index(ast, state) {\n      var _this2 = this;\n\n      return this.runFunction(ast.args, state, this.metadata('INDEX'), function (rangeValue, row, col) {\n        var _a, _b, _c, _d, _e, _f;\n\n        if (col < 1 || row < 1) {\n          return new CellError(ErrorType.VALUE, ErrorMessage.LessThanOne);\n        }\n\n        if (col > rangeValue.width() || row > rangeValue.height()) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n        }\n\n        return (_f = (_c = (_b = (_a = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue.data) === null || _a === void 0 ? void 0 : _a[row - 1]) === null || _b === void 0 ? void 0 : _b[col - 1]) !== null && _c !== void 0 ? _c : (_e = (_d = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue.data) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e[0]) !== null && _f !== void 0 ? _f : new CellError(ErrorType.VALUE, ErrorMessage.CellRangeExpected);\n        var address = rangeValue.range.getAddress(col - 1, row - 1);\n        return _this2.dependencyGraph.getScalarValue(address);\n      });\n    }\n    /**\n     * Corresponds to NA()\n     *\n     * Returns #N/A!\n     *\n     * @param _ast\n     * @param _state\n     */\n\n  }, {\n    key: \"na\",\n    value: function na(_ast, _state) {\n      return new CellError(ErrorType.NA);\n    }\n    /**\n     * Corresponds to SHEET(value)\n     *\n     * Returns sheet number of a given value or a formula sheet number if no argument is provided\n     *\n     * @param ast\n     * @param state\n     * */\n\n  }, {\n    key: \"sheet\",\n    value: function sheet(ast, state) {\n      var _this3 = this;\n\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('SHEET'), function () {\n        return state.formulaAddress.sheet + 1;\n      }, function (reference) {\n        return reference.sheet + 1;\n      }, function (value) {\n        var sheetNumber = _this3.dependencyGraph.sheetMapping.get(value);\n\n        if (sheetNumber !== undefined) {\n          return sheetNumber + 1;\n        } else {\n          return new CellError(ErrorType.NA, ErrorMessage.SheetRef);\n        }\n      });\n    }\n    /**\n     * Corresponds to SHEETS(value)\n     *\n     * Returns number of sheet of a given reference or number of all sheets in workbook when no argument is provided.\n     * It returns always 1 for a valid reference as 3D references are not supported.\n     *\n     * @param ast\n     * @param state\n     * */\n\n  }, {\n    key: \"sheets\",\n    value: function sheets(ast, state) {\n      var _this4 = this;\n\n      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('SHEETS'), function () {\n        return _this4.dependencyGraph.sheetMapping.numberOfSheets();\n      }, // return number of sheets if no argument\n      function () {\n        return 1;\n      }, // return 1 for valid reference\n      function () {\n        return new CellError(ErrorType.VALUE, ErrorMessage.CellRefExpected);\n      } // error otherwise\n      );\n    }\n  }]);\n\n  return InformationPlugin;\n}(FunctionPlugin);\nInformationPlugin.implementedFunctions = {\n  'COLUMN': {\n    method: 'column',\n    parameters: [{\n      argumentType: ArgumentTypes.NOERROR,\n      optional: true\n    }],\n    isDependentOnSheetStructureChange: true,\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'COLUMNS': {\n    method: 'columns',\n    parameters: [{\n      argumentType: ArgumentTypes.RANGE\n    }],\n    isDependentOnSheetStructureChange: true,\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'ISBINARY': {\n    method: 'isbinary',\n    parameters: [{\n      argumentType: ArgumentTypes.STRING\n    }]\n  },\n  'ISERR': {\n    method: 'iserr',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISFORMULA': {\n    method: 'isformula',\n    parameters: [{\n      argumentType: ArgumentTypes.NOERROR\n    }],\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'ISNA': {\n    method: 'isna',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISREF': {\n    method: 'isref',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }],\n    vectorizationForbidden: true\n  },\n  'ISERROR': {\n    method: 'iserror',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISBLANK': {\n    method: 'isblank',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISNUMBER': {\n    method: 'isnumber',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISLOGICAL': {\n    method: 'islogical',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISTEXT': {\n    method: 'istext',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'ISNONTEXT': {\n    method: 'isnontext',\n    parameters: [{\n      argumentType: ArgumentTypes.SCALAR\n    }]\n  },\n  'INDEX': {\n    method: 'index',\n    parameters: [{\n      argumentType: ArgumentTypes.RANGE\n    }, {\n      argumentType: ArgumentTypes.NUMBER\n    }, {\n      argumentType: ArgumentTypes.NUMBER,\n      defaultValue: 1\n    }]\n  },\n  'NA': {\n    method: 'na',\n    parameters: []\n  },\n  'ROW': {\n    method: 'row',\n    parameters: [{\n      argumentType: ArgumentTypes.NOERROR,\n      optional: true\n    }],\n    isDependentOnSheetStructureChange: true,\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'ROWS': {\n    method: 'rows',\n    parameters: [{\n      argumentType: ArgumentTypes.RANGE\n    }],\n    isDependentOnSheetStructureChange: true,\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'SHEET': {\n    method: 'sheet',\n    parameters: [{\n      argumentType: ArgumentTypes.STRING\n    }],\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  },\n  'SHEETS': {\n    method: 'sheets',\n    parameters: [{\n      argumentType: ArgumentTypes.STRING\n    }],\n    doesNotNeedArgumentsToBeComputed: true,\n    vectorizationForbidden: true\n  }\n};"]},"metadata":{},"sourceType":"module"}