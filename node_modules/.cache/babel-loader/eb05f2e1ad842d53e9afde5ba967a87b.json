{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { simpleCellAddress } from './Cell';\nimport { AstNodeType } from './parser';\nexport var InternalNamedExpression = /*#__PURE__*/function () {\n  function InternalNamedExpression(displayName, address, added, options) {\n    _classCallCheck(this, InternalNamedExpression);\n\n    this.displayName = displayName;\n    this.address = address;\n    this.added = added;\n    this.options = options;\n  }\n\n  _createClass(InternalNamedExpression, [{\n    key: \"normalizeExpressionName\",\n    value: function normalizeExpressionName() {\n      return this.displayName.toLowerCase();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new InternalNamedExpression(this.displayName, this.address, this.added, this.options);\n    }\n  }]);\n\n  return InternalNamedExpression;\n}();\n\nvar WorkbookStore = /*#__PURE__*/function () {\n  function WorkbookStore() {\n    _classCallCheck(this, WorkbookStore);\n\n    this.mapping = new Map();\n  }\n\n  _createClass(WorkbookStore, [{\n    key: \"has\",\n    value: function has(expressionName) {\n      return this.mapping.has(this.normalizeExpressionName(expressionName));\n    }\n  }, {\n    key: \"isNameAvailable\",\n    value: function isNameAvailable(expressionName) {\n      var normalizedExpressionName = this.normalizeExpressionName(expressionName);\n      var namedExpression = this.mapping.get(normalizedExpressionName);\n      return !(namedExpression && namedExpression.added);\n    }\n  }, {\n    key: \"add\",\n    value: function add(namedExpression) {\n      this.mapping.set(namedExpression.normalizeExpressionName(), namedExpression);\n    }\n  }, {\n    key: \"get\",\n    value: function get(expressionName) {\n      return this.mapping.get(this.normalizeExpressionName(expressionName));\n    }\n  }, {\n    key: \"getExisting\",\n    value: function getExisting(expressionName) {\n      var namedExpression = this.mapping.get(this.normalizeExpressionName(expressionName));\n\n      if (namedExpression && namedExpression.added) {\n        return namedExpression;\n      } else {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(expressionName) {\n      var normalizedExpressionName = this.normalizeExpressionName(expressionName);\n      var namedExpression = this.mapping.get(normalizedExpressionName);\n\n      if (namedExpression) {\n        namedExpression.added = false;\n      }\n    }\n  }, {\n    key: \"getAllNamedExpressions\",\n    value: function getAllNamedExpressions() {\n      return Array.from(this.mapping.values()).filter(function (ne) {\n        return ne.added;\n      });\n    }\n  }, {\n    key: \"normalizeExpressionName\",\n    value: function normalizeExpressionName(expressionName) {\n      return expressionName.toLowerCase();\n    }\n  }]);\n\n  return WorkbookStore;\n}();\n\nvar WorksheetStore = /*#__PURE__*/function () {\n  function WorksheetStore() {\n    _classCallCheck(this, WorksheetStore);\n\n    this.mapping = new Map();\n  }\n\n  _createClass(WorksheetStore, [{\n    key: \"add\",\n    value: function add(namedExpression) {\n      this.mapping.set(this.normalizeExpressionName(namedExpression.displayName), namedExpression);\n    }\n  }, {\n    key: \"get\",\n    value: function get(expressionName) {\n      return this.mapping.get(this.normalizeExpressionName(expressionName));\n    }\n  }, {\n    key: \"has\",\n    value: function has(expressionName) {\n      return this.mapping.has(this.normalizeExpressionName(expressionName));\n    }\n  }, {\n    key: \"getAllNamedExpressions\",\n    value: function getAllNamedExpressions() {\n      return Array.from(this.mapping.values()).filter(function (ne) {\n        return ne.added;\n      });\n    }\n  }, {\n    key: \"normalizeExpressionName\",\n    value: function normalizeExpressionName(expressionName) {\n      return expressionName.toLowerCase();\n    }\n  }, {\n    key: \"isNameAvailable\",\n    value: function isNameAvailable(expressionName) {\n      var normalizedExpressionName = this.normalizeExpressionName(expressionName);\n      return !this.mapping.has(normalizedExpressionName);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(expressionName) {\n      var normalizedExpressionName = this.normalizeExpressionName(expressionName);\n      var namedExpression = this.mapping.get(normalizedExpressionName);\n\n      if (namedExpression) {\n        this.mapping.delete(normalizedExpressionName);\n      }\n    }\n  }]);\n\n  return WorksheetStore;\n}();\n\nexport var NamedExpressions = /*#__PURE__*/function () {\n  function NamedExpressions() {\n    _classCallCheck(this, NamedExpressions);\n\n    this.nextNamedExpressionRow = 0;\n    this.workbookStore = new WorkbookStore();\n    this.worksheetStores = new Map();\n    this.addressCache = new Map();\n  }\n\n  _createClass(NamedExpressions, [{\n    key: \"isNameAvailable\",\n    value: function isNameAvailable(expressionName, sheetId) {\n      var _a, _b;\n\n      if (sheetId === undefined) {\n        return this.workbookStore.isNameAvailable(expressionName);\n      } else {\n        return (_b = (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.isNameAvailable(expressionName)) !== null && _b !== void 0 ? _b : true;\n      }\n    }\n  }, {\n    key: \"namedExpressionInAddress\",\n    value: function namedExpressionInAddress(row) {\n      var namedExpression = this.addressCache.get(row);\n\n      if (namedExpression && namedExpression.added) {\n        return namedExpression;\n      } else {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"namedExpressionForScope\",\n    value: function namedExpressionForScope(expressionName, sheetId) {\n      var _a;\n\n      if (sheetId === undefined) {\n        return this.workbookStore.getExisting(expressionName);\n      } else {\n        return (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.get(expressionName);\n      }\n    }\n  }, {\n    key: \"nearestNamedExpression\",\n    value: function nearestNamedExpression(expressionName, sheetId) {\n      var _a, _b;\n\n      return (_b = (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.get(expressionName)) !== null && _b !== void 0 ? _b : this.workbookStore.getExisting(expressionName);\n    }\n  }, {\n    key: \"isExpressionInScope\",\n    value: function isExpressionInScope(expressionName, sheetId) {\n      var _a, _b;\n\n      return (_b = (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.has(expressionName)) !== null && _b !== void 0 ? _b : false;\n    }\n  }, {\n    key: \"isNameValid\",\n    value: function isNameValid(expressionName) {\n      if (/^[A-Za-z]+[0-9]+$/.test(expressionName)) {\n        return false;\n      }\n\n      return /^[A-Za-z\\u00C0-\\u02AF_][A-Za-z0-9\\u00C0-\\u02AF._]*$/.test(expressionName);\n    }\n  }, {\n    key: \"addNamedExpression\",\n    value: function addNamedExpression(expressionName, sheetId, options) {\n      var store = sheetId === undefined ? this.workbookStore : this.worksheetStoreOrCreate(sheetId);\n      var namedExpression = store.get(expressionName);\n\n      if (namedExpression) {\n        namedExpression.added = true;\n        namedExpression.displayName = expressionName;\n        namedExpression.options = options;\n      } else {\n        namedExpression = new InternalNamedExpression(expressionName, this.nextAddress(), true, options);\n        store.add(namedExpression);\n      }\n\n      this.addressCache.set(namedExpression.address.row, namedExpression);\n      return namedExpression;\n    }\n  }, {\n    key: \"restoreNamedExpression\",\n    value: function restoreNamedExpression(namedExpression, sheetId) {\n      var store = sheetId === undefined ? this.workbookStore : this.worksheetStoreOrCreate(sheetId);\n      namedExpression.added = true;\n      store.add(namedExpression);\n      this.addressCache.set(namedExpression.address.row, namedExpression);\n      return namedExpression;\n    }\n  }, {\n    key: \"worksheetStoreOrCreate\",\n    value: function worksheetStoreOrCreate(sheetId) {\n      var store = this.worksheetStores.get(sheetId);\n\n      if (!store) {\n        store = new WorksheetStore();\n        this.worksheetStores.set(sheetId, store);\n      }\n\n      return store;\n    }\n  }, {\n    key: \"worksheetStore\",\n    value: function worksheetStore(sheetId) {\n      return this.worksheetStores.get(sheetId);\n    }\n  }, {\n    key: \"namedExpressionOrPlaceholder\",\n    value: function namedExpressionOrPlaceholder(expressionName, sheetId) {\n      var _a;\n\n      return (_a = this.worksheetStoreOrCreate(sheetId).get(expressionName)) !== null && _a !== void 0 ? _a : this.workbookNamedExpressionOrPlaceholder(expressionName);\n    }\n  }, {\n    key: \"workbookNamedExpressionOrPlaceholder\",\n    value: function workbookNamedExpressionOrPlaceholder(expressionName) {\n      var namedExpression = this.workbookStore.get(expressionName);\n\n      if (namedExpression === undefined) {\n        namedExpression = new InternalNamedExpression(expressionName, this.nextAddress(), false);\n        this.workbookStore.add(namedExpression);\n      }\n\n      return namedExpression;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(expressionName, sheetId) {\n      var store;\n\n      if (sheetId === undefined) {\n        store = this.workbookStore;\n      } else {\n        store = this.worksheetStore(sheetId);\n      }\n\n      var namedExpression = store === null || store === void 0 ? void 0 : store.get(expressionName);\n\n      if (store === undefined || namedExpression === undefined || !namedExpression.added) {\n        throw 'Named expression does not exist';\n      }\n\n      store.remove(expressionName);\n\n      if (store instanceof WorksheetStore && store.mapping.size === 0) {\n        this.worksheetStores.delete(sheetId);\n      }\n\n      this.addressCache.delete(namedExpression.address.row);\n    }\n  }, {\n    key: \"getAllNamedExpressionsNamesInScope\",\n    value: function getAllNamedExpressionsNamesInScope(sheetId) {\n      return this.getAllNamedExpressions().filter(function (_ref) {\n        var scope = _ref.scope;\n        return scope === sheetId;\n      }).map(function (ne) {\n        return ne.expression.displayName;\n      });\n    }\n  }, {\n    key: \"getAllNamedExpressionsNames\",\n    value: function getAllNamedExpressionsNames() {\n      return this.getAllNamedExpressions().map(function (ne) {\n        return ne.expression.displayName;\n      });\n    }\n  }, {\n    key: \"getAllNamedExpressions\",\n    value: function getAllNamedExpressions() {\n      var storedNamedExpressions = [];\n      this.workbookStore.getAllNamedExpressions().forEach(function (expr) {\n        storedNamedExpressions.push({\n          expression: expr,\n          scope: undefined\n        });\n      });\n      this.worksheetStores.forEach(function (store, sheetNum) {\n        store.getAllNamedExpressions().forEach(function (expr) {\n          storedNamedExpressions.push({\n            expression: expr,\n            scope: sheetNum\n          });\n        });\n      });\n      return storedNamedExpressions;\n    }\n  }, {\n    key: \"getAllNamedExpressionsForScope\",\n    value: function getAllNamedExpressionsForScope(scope) {\n      var _a, _b;\n\n      if (scope === undefined) {\n        return this.workbookStore.getAllNamedExpressions();\n      } else {\n        return (_b = (_a = this.worksheetStores.get(scope)) === null || _a === void 0 ? void 0 : _a.getAllNamedExpressions()) !== null && _b !== void 0 ? _b : [];\n      }\n    }\n  }, {\n    key: \"nextAddress\",\n    value: function nextAddress() {\n      return simpleCellAddress(NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS, 0, this.nextNamedExpressionRow++);\n    }\n  }, {\n    key: \"lookupNextAddress\",\n    value: function lookupNextAddress(expressionName, sheetId) {\n      if (sheetId === undefined) {\n        var namedExpression = this.workbookStore.get(expressionName);\n\n        if (namedExpression) {\n          return namedExpression.address;\n        }\n      }\n\n      return simpleCellAddress(NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS, 0, this.nextNamedExpressionRow);\n    }\n  }]);\n\n  return NamedExpressions;\n}();\nNamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS = -1;\nexport var doesContainRelativeReferences = function doesContainRelativeReferences(ast) {\n  switch (ast.type) {\n    case AstNodeType.EMPTY:\n    case AstNodeType.NUMBER:\n    case AstNodeType.STRING:\n    case AstNodeType.ERROR:\n    case AstNodeType.ERROR_WITH_RAW_INPUT:\n      return false;\n\n    case AstNodeType.CELL_REFERENCE:\n      return !ast.reference.isAbsolute();\n\n    case AstNodeType.CELL_RANGE:\n    case AstNodeType.COLUMN_RANGE:\n    case AstNodeType.ROW_RANGE:\n      return !ast.start.isAbsolute();\n\n    case AstNodeType.NAMED_EXPRESSION:\n      return false;\n\n    case AstNodeType.PERCENT_OP:\n    case AstNodeType.PLUS_UNARY_OP:\n    case AstNodeType.MINUS_UNARY_OP:\n      {\n        return doesContainRelativeReferences(ast.value);\n      }\n\n    case AstNodeType.CONCATENATE_OP:\n    case AstNodeType.EQUALS_OP:\n    case AstNodeType.NOT_EQUAL_OP:\n    case AstNodeType.LESS_THAN_OP:\n    case AstNodeType.GREATER_THAN_OP:\n    case AstNodeType.LESS_THAN_OR_EQUAL_OP:\n    case AstNodeType.GREATER_THAN_OR_EQUAL_OP:\n    case AstNodeType.MINUS_OP:\n    case AstNodeType.PLUS_OP:\n    case AstNodeType.TIMES_OP:\n    case AstNodeType.DIV_OP:\n    case AstNodeType.POWER_OP:\n      return doesContainRelativeReferences(ast.left) || doesContainRelativeReferences(ast.right);\n\n    case AstNodeType.PARENTHESIS:\n      return doesContainRelativeReferences(ast.expression);\n\n    case AstNodeType.FUNCTION_CALL:\n      {\n        return ast.args.some(function (arg) {\n          return doesContainRelativeReferences(arg);\n        });\n      }\n  }\n};","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/NamedExpressions.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","simpleCellAddress","AstNodeType","InternalNamedExpression","displayName","address","added","options","value","normalizeExpressionName","toLowerCase","copy","WorkbookStore","mapping","Map","has","expressionName","isNameAvailable","normalizedExpressionName","namedExpression","get","add","set","getExisting","undefined","remove","getAllNamedExpressions","Array","from","values","filter","ne","WorksheetStore","delete","NamedExpressions","nextNamedExpressionRow","workbookStore","worksheetStores","addressCache","sheetId","_a","_b","worksheetStore","namedExpressionInAddress","row","namedExpressionForScope","nearestNamedExpression","isExpressionInScope","isNameValid","test","addNamedExpression","store","worksheetStoreOrCreate","nextAddress","restoreNamedExpression","namedExpressionOrPlaceholder","workbookNamedExpressionOrPlaceholder","size","getAllNamedExpressionsNamesInScope","_ref","scope","map","expression","getAllNamedExpressionsNames","storedNamedExpressions","forEach","expr","push","sheetNum","getAllNamedExpressionsForScope","SHEET_FOR_WORKBOOK_EXPRESSIONS","lookupNextAddress","doesContainRelativeReferences","ast","type","EMPTY","NUMBER","STRING","ERROR","ERROR_WITH_RAW_INPUT","CELL_REFERENCE","reference","isAbsolute","CELL_RANGE","COLUMN_RANGE","ROW_RANGE","start","NAMED_EXPRESSION","PERCENT_OP","PLUS_UNARY_OP","MINUS_UNARY_OP","CONCATENATE_OP","EQUALS_OP","NOT_EQUAL_OP","LESS_THAN_OP","GREATER_THAN_OP","LESS_THAN_OR_EQUAL_OP","GREATER_THAN_OR_EQUAL_OP","MINUS_OP","PLUS_OP","TIMES_OP","DIV_OP","POWER_OP","left","right","PARENTHESIS","FUNCTION_CALL","args","some","arg"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { simpleCellAddress } from './Cell';\nimport { AstNodeType } from './parser';\nexport var InternalNamedExpression = /*#__PURE__*/function () {\n  function InternalNamedExpression(displayName, address, added, options) {\n    _classCallCheck(this, InternalNamedExpression);\n\n    this.displayName = displayName;\n    this.address = address;\n    this.added = added;\n    this.options = options;\n  }\n\n  _createClass(InternalNamedExpression, [{\n    key: \"normalizeExpressionName\",\n    value: function normalizeExpressionName() {\n      return this.displayName.toLowerCase();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new InternalNamedExpression(this.displayName, this.address, this.added, this.options);\n    }\n  }]);\n\n  return InternalNamedExpression;\n}();\n\nvar WorkbookStore = /*#__PURE__*/function () {\n  function WorkbookStore() {\n    _classCallCheck(this, WorkbookStore);\n\n    this.mapping = new Map();\n  }\n\n  _createClass(WorkbookStore, [{\n    key: \"has\",\n    value: function has(expressionName) {\n      return this.mapping.has(this.normalizeExpressionName(expressionName));\n    }\n  }, {\n    key: \"isNameAvailable\",\n    value: function isNameAvailable(expressionName) {\n      var normalizedExpressionName = this.normalizeExpressionName(expressionName);\n      var namedExpression = this.mapping.get(normalizedExpressionName);\n      return !(namedExpression && namedExpression.added);\n    }\n  }, {\n    key: \"add\",\n    value: function add(namedExpression) {\n      this.mapping.set(namedExpression.normalizeExpressionName(), namedExpression);\n    }\n  }, {\n    key: \"get\",\n    value: function get(expressionName) {\n      return this.mapping.get(this.normalizeExpressionName(expressionName));\n    }\n  }, {\n    key: \"getExisting\",\n    value: function getExisting(expressionName) {\n      var namedExpression = this.mapping.get(this.normalizeExpressionName(expressionName));\n\n      if (namedExpression && namedExpression.added) {\n        return namedExpression;\n      } else {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(expressionName) {\n      var normalizedExpressionName = this.normalizeExpressionName(expressionName);\n      var namedExpression = this.mapping.get(normalizedExpressionName);\n\n      if (namedExpression) {\n        namedExpression.added = false;\n      }\n    }\n  }, {\n    key: \"getAllNamedExpressions\",\n    value: function getAllNamedExpressions() {\n      return Array.from(this.mapping.values()).filter(function (ne) {\n        return ne.added;\n      });\n    }\n  }, {\n    key: \"normalizeExpressionName\",\n    value: function normalizeExpressionName(expressionName) {\n      return expressionName.toLowerCase();\n    }\n  }]);\n\n  return WorkbookStore;\n}();\n\nvar WorksheetStore = /*#__PURE__*/function () {\n  function WorksheetStore() {\n    _classCallCheck(this, WorksheetStore);\n\n    this.mapping = new Map();\n  }\n\n  _createClass(WorksheetStore, [{\n    key: \"add\",\n    value: function add(namedExpression) {\n      this.mapping.set(this.normalizeExpressionName(namedExpression.displayName), namedExpression);\n    }\n  }, {\n    key: \"get\",\n    value: function get(expressionName) {\n      return this.mapping.get(this.normalizeExpressionName(expressionName));\n    }\n  }, {\n    key: \"has\",\n    value: function has(expressionName) {\n      return this.mapping.has(this.normalizeExpressionName(expressionName));\n    }\n  }, {\n    key: \"getAllNamedExpressions\",\n    value: function getAllNamedExpressions() {\n      return Array.from(this.mapping.values()).filter(function (ne) {\n        return ne.added;\n      });\n    }\n  }, {\n    key: \"normalizeExpressionName\",\n    value: function normalizeExpressionName(expressionName) {\n      return expressionName.toLowerCase();\n    }\n  }, {\n    key: \"isNameAvailable\",\n    value: function isNameAvailable(expressionName) {\n      var normalizedExpressionName = this.normalizeExpressionName(expressionName);\n      return !this.mapping.has(normalizedExpressionName);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(expressionName) {\n      var normalizedExpressionName = this.normalizeExpressionName(expressionName);\n      var namedExpression = this.mapping.get(normalizedExpressionName);\n\n      if (namedExpression) {\n        this.mapping.delete(normalizedExpressionName);\n      }\n    }\n  }]);\n\n  return WorksheetStore;\n}();\n\nexport var NamedExpressions = /*#__PURE__*/function () {\n  function NamedExpressions() {\n    _classCallCheck(this, NamedExpressions);\n\n    this.nextNamedExpressionRow = 0;\n    this.workbookStore = new WorkbookStore();\n    this.worksheetStores = new Map();\n    this.addressCache = new Map();\n  }\n\n  _createClass(NamedExpressions, [{\n    key: \"isNameAvailable\",\n    value: function isNameAvailable(expressionName, sheetId) {\n      var _a, _b;\n\n      if (sheetId === undefined) {\n        return this.workbookStore.isNameAvailable(expressionName);\n      } else {\n        return (_b = (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.isNameAvailable(expressionName)) !== null && _b !== void 0 ? _b : true;\n      }\n    }\n  }, {\n    key: \"namedExpressionInAddress\",\n    value: function namedExpressionInAddress(row) {\n      var namedExpression = this.addressCache.get(row);\n\n      if (namedExpression && namedExpression.added) {\n        return namedExpression;\n      } else {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"namedExpressionForScope\",\n    value: function namedExpressionForScope(expressionName, sheetId) {\n      var _a;\n\n      if (sheetId === undefined) {\n        return this.workbookStore.getExisting(expressionName);\n      } else {\n        return (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.get(expressionName);\n      }\n    }\n  }, {\n    key: \"nearestNamedExpression\",\n    value: function nearestNamedExpression(expressionName, sheetId) {\n      var _a, _b;\n\n      return (_b = (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.get(expressionName)) !== null && _b !== void 0 ? _b : this.workbookStore.getExisting(expressionName);\n    }\n  }, {\n    key: \"isExpressionInScope\",\n    value: function isExpressionInScope(expressionName, sheetId) {\n      var _a, _b;\n\n      return (_b = (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.has(expressionName)) !== null && _b !== void 0 ? _b : false;\n    }\n  }, {\n    key: \"isNameValid\",\n    value: function isNameValid(expressionName) {\n      if (/^[A-Za-z]+[0-9]+$/.test(expressionName)) {\n        return false;\n      }\n\n      return /^[A-Za-z\\u00C0-\\u02AF_][A-Za-z0-9\\u00C0-\\u02AF._]*$/.test(expressionName);\n    }\n  }, {\n    key: \"addNamedExpression\",\n    value: function addNamedExpression(expressionName, sheetId, options) {\n      var store = sheetId === undefined ? this.workbookStore : this.worksheetStoreOrCreate(sheetId);\n      var namedExpression = store.get(expressionName);\n\n      if (namedExpression) {\n        namedExpression.added = true;\n        namedExpression.displayName = expressionName;\n        namedExpression.options = options;\n      } else {\n        namedExpression = new InternalNamedExpression(expressionName, this.nextAddress(), true, options);\n        store.add(namedExpression);\n      }\n\n      this.addressCache.set(namedExpression.address.row, namedExpression);\n      return namedExpression;\n    }\n  }, {\n    key: \"restoreNamedExpression\",\n    value: function restoreNamedExpression(namedExpression, sheetId) {\n      var store = sheetId === undefined ? this.workbookStore : this.worksheetStoreOrCreate(sheetId);\n      namedExpression.added = true;\n      store.add(namedExpression);\n      this.addressCache.set(namedExpression.address.row, namedExpression);\n      return namedExpression;\n    }\n  }, {\n    key: \"worksheetStoreOrCreate\",\n    value: function worksheetStoreOrCreate(sheetId) {\n      var store = this.worksheetStores.get(sheetId);\n\n      if (!store) {\n        store = new WorksheetStore();\n        this.worksheetStores.set(sheetId, store);\n      }\n\n      return store;\n    }\n  }, {\n    key: \"worksheetStore\",\n    value: function worksheetStore(sheetId) {\n      return this.worksheetStores.get(sheetId);\n    }\n  }, {\n    key: \"namedExpressionOrPlaceholder\",\n    value: function namedExpressionOrPlaceholder(expressionName, sheetId) {\n      var _a;\n\n      return (_a = this.worksheetStoreOrCreate(sheetId).get(expressionName)) !== null && _a !== void 0 ? _a : this.workbookNamedExpressionOrPlaceholder(expressionName);\n    }\n  }, {\n    key: \"workbookNamedExpressionOrPlaceholder\",\n    value: function workbookNamedExpressionOrPlaceholder(expressionName) {\n      var namedExpression = this.workbookStore.get(expressionName);\n\n      if (namedExpression === undefined) {\n        namedExpression = new InternalNamedExpression(expressionName, this.nextAddress(), false);\n        this.workbookStore.add(namedExpression);\n      }\n\n      return namedExpression;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(expressionName, sheetId) {\n      var store;\n\n      if (sheetId === undefined) {\n        store = this.workbookStore;\n      } else {\n        store = this.worksheetStore(sheetId);\n      }\n\n      var namedExpression = store === null || store === void 0 ? void 0 : store.get(expressionName);\n\n      if (store === undefined || namedExpression === undefined || !namedExpression.added) {\n        throw 'Named expression does not exist';\n      }\n\n      store.remove(expressionName);\n\n      if (store instanceof WorksheetStore && store.mapping.size === 0) {\n        this.worksheetStores.delete(sheetId);\n      }\n\n      this.addressCache.delete(namedExpression.address.row);\n    }\n  }, {\n    key: \"getAllNamedExpressionsNamesInScope\",\n    value: function getAllNamedExpressionsNamesInScope(sheetId) {\n      return this.getAllNamedExpressions().filter(function (_ref) {\n        var scope = _ref.scope;\n        return scope === sheetId;\n      }).map(function (ne) {\n        return ne.expression.displayName;\n      });\n    }\n  }, {\n    key: \"getAllNamedExpressionsNames\",\n    value: function getAllNamedExpressionsNames() {\n      return this.getAllNamedExpressions().map(function (ne) {\n        return ne.expression.displayName;\n      });\n    }\n  }, {\n    key: \"getAllNamedExpressions\",\n    value: function getAllNamedExpressions() {\n      var storedNamedExpressions = [];\n      this.workbookStore.getAllNamedExpressions().forEach(function (expr) {\n        storedNamedExpressions.push({\n          expression: expr,\n          scope: undefined\n        });\n      });\n      this.worksheetStores.forEach(function (store, sheetNum) {\n        store.getAllNamedExpressions().forEach(function (expr) {\n          storedNamedExpressions.push({\n            expression: expr,\n            scope: sheetNum\n          });\n        });\n      });\n      return storedNamedExpressions;\n    }\n  }, {\n    key: \"getAllNamedExpressionsForScope\",\n    value: function getAllNamedExpressionsForScope(scope) {\n      var _a, _b;\n\n      if (scope === undefined) {\n        return this.workbookStore.getAllNamedExpressions();\n      } else {\n        return (_b = (_a = this.worksheetStores.get(scope)) === null || _a === void 0 ? void 0 : _a.getAllNamedExpressions()) !== null && _b !== void 0 ? _b : [];\n      }\n    }\n  }, {\n    key: \"nextAddress\",\n    value: function nextAddress() {\n      return simpleCellAddress(NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS, 0, this.nextNamedExpressionRow++);\n    }\n  }, {\n    key: \"lookupNextAddress\",\n    value: function lookupNextAddress(expressionName, sheetId) {\n      if (sheetId === undefined) {\n        var namedExpression = this.workbookStore.get(expressionName);\n\n        if (namedExpression) {\n          return namedExpression.address;\n        }\n      }\n\n      return simpleCellAddress(NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS, 0, this.nextNamedExpressionRow);\n    }\n  }]);\n\n  return NamedExpressions;\n}();\nNamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS = -1;\nexport var doesContainRelativeReferences = function doesContainRelativeReferences(ast) {\n  switch (ast.type) {\n    case AstNodeType.EMPTY:\n    case AstNodeType.NUMBER:\n    case AstNodeType.STRING:\n    case AstNodeType.ERROR:\n    case AstNodeType.ERROR_WITH_RAW_INPUT:\n      return false;\n\n    case AstNodeType.CELL_REFERENCE:\n      return !ast.reference.isAbsolute();\n\n    case AstNodeType.CELL_RANGE:\n    case AstNodeType.COLUMN_RANGE:\n    case AstNodeType.ROW_RANGE:\n      return !ast.start.isAbsolute();\n\n    case AstNodeType.NAMED_EXPRESSION:\n      return false;\n\n    case AstNodeType.PERCENT_OP:\n    case AstNodeType.PLUS_UNARY_OP:\n    case AstNodeType.MINUS_UNARY_OP:\n      {\n        return doesContainRelativeReferences(ast.value);\n      }\n\n    case AstNodeType.CONCATENATE_OP:\n    case AstNodeType.EQUALS_OP:\n    case AstNodeType.NOT_EQUAL_OP:\n    case AstNodeType.LESS_THAN_OP:\n    case AstNodeType.GREATER_THAN_OP:\n    case AstNodeType.LESS_THAN_OR_EQUAL_OP:\n    case AstNodeType.GREATER_THAN_OR_EQUAL_OP:\n    case AstNodeType.MINUS_OP:\n    case AstNodeType.PLUS_OP:\n    case AstNodeType.TIMES_OP:\n    case AstNodeType.DIV_OP:\n    case AstNodeType.POWER_OP:\n      return doesContainRelativeReferences(ast.left) || doesContainRelativeReferences(ast.right);\n\n    case AstNodeType.PARENTHESIS:\n      return doesContainRelativeReferences(ast.expression);\n\n    case AstNodeType.FUNCTION_CALL:\n      {\n        return ast.args.some(function (arg) {\n          return doesContainRelativeReferences(arg);\n        });\n      }\n  }\n};"]},"metadata":{},"sourceType":"module"}