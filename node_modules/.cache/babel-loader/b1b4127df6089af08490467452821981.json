{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { AbsoluteCellRange, simpleCellRange } from '../AbsoluteCellRange';\nimport { absolutizeDependencies } from '../absolutizeDependencies';\nimport { CellError, ErrorType, isSimpleCellAddress, simpleCellAddress } from '../Cell';\nimport { ContentChanges } from '../ContentChanges';\nimport { ErrorMessage } from '../error-message';\nimport { EmptyValue, getRawValue } from '../interpreter/InterpreterValue';\nimport { SimpleRangeValue } from '../interpreter/SimpleRangeValue';\nimport { collectDependencies, NamedExpressionDependency } from '../parser';\nimport { ColumnsSpan, RowsSpan } from '../Span';\nimport { StatType } from '../statistics';\nimport { ArrayVertex, EmptyCellVertex, FormulaCellVertex, RangeVertex, ValueCellVertex } from './';\nimport { AddressMapping } from './AddressMapping/AddressMapping';\nimport { ArrayMapping } from './ArrayMapping';\nimport { collectAddressesDependentToRange } from './collectAddressesDependentToRange';\nimport { FormulaVertex } from './FormulaCellVertex';\nimport { Graph } from './Graph';\nimport { RangeMapping } from './RangeMapping';\nimport { SheetMapping } from './SheetMapping';\nexport var DependencyGraph = /*#__PURE__*/function () {\n  function DependencyGraph(addressMapping, rangeMapping, sheetMapping, arrayMapping, stats, lazilyTransformingAstService, functionRegistry, namedExpressions) {\n    var _this = this;\n\n    _classCallCheck(this, DependencyGraph);\n\n    this.addressMapping = addressMapping;\n    this.rangeMapping = rangeMapping;\n    this.sheetMapping = sheetMapping;\n    this.arrayMapping = arrayMapping;\n    this.stats = stats;\n    this.lazilyTransformingAstService = lazilyTransformingAstService;\n    this.functionRegistry = functionRegistry;\n    this.namedExpressions = namedExpressions;\n    this.changes = ContentChanges.empty();\n\n    this.dependencyQueryAddresses = function (vertex) {\n      if (vertex instanceof RangeVertex) {\n        return _this.rangeDependencyQuery(vertex).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              address = _ref2[0],\n              _ = _ref2[1];\n\n          return address;\n        });\n      } else {\n        var dependenciesResult = _this.formulaDependencyQuery(vertex);\n\n        if (dependenciesResult !== undefined) {\n          var _dependenciesResult = _slicedToArray(dependenciesResult, 2),\n              address = _dependenciesResult[0],\n              dependencies = _dependenciesResult[1];\n\n          return dependencies.map(function (dependency) {\n            if (dependency instanceof NamedExpressionDependency) {\n              return _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet).address;\n            } else if (isSimpleCellAddress(dependency)) {\n              return dependency;\n            } else {\n              return simpleCellRange(dependency.start, dependency.end);\n            }\n          });\n        } else {\n          return [];\n        }\n      }\n    };\n\n    this.dependencyQueryVertices = function (vertex) {\n      if (vertex instanceof RangeVertex) {\n        return _this.rangeDependencyQuery(vertex).map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              _ = _ref4[0],\n              v = _ref4[1];\n\n          return v;\n        });\n      } else {\n        var dependenciesResult = _this.formulaDependencyQuery(vertex);\n\n        if (dependenciesResult !== undefined) {\n          var _dependenciesResult2 = _slicedToArray(dependenciesResult, 2),\n              address = _dependenciesResult2[0],\n              dependencies = _dependenciesResult2[1];\n\n          return dependencies.map(function (dependency) {\n            if (dependency instanceof AbsoluteCellRange) {\n              return _this.rangeMapping.fetchRange(dependency.start, dependency.end);\n            } else if (dependency instanceof NamedExpressionDependency) {\n              var namedExpression = _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet);\n\n              return _this.addressMapping.fetchCell(namedExpression.address);\n            } else {\n              return _this.addressMapping.fetchCell(dependency);\n            }\n          });\n        } else {\n          return [];\n        }\n      }\n    };\n\n    this.rangeDependencyQuery = function (vertex) {\n      var allDeps = [];\n\n      var _this$rangeMapping$fi = _this.rangeMapping.findSmallerRange(vertex.range),\n          smallerRangeVertex = _this$rangeMapping$fi.smallerRangeVertex,\n          restRange = _this$rangeMapping$fi.restRange; //checking whether this range was splitted by bruteForce or not\n\n\n      var range;\n\n      if (smallerRangeVertex !== undefined && _this.graph.adjacentNodes(smallerRangeVertex).has(vertex)) {\n        range = restRange;\n        allDeps.push([new AbsoluteCellRange(smallerRangeVertex.start, smallerRangeVertex.end), smallerRangeVertex]);\n      } else {\n        //did we ever need to use full range\n        range = vertex.range;\n      }\n\n      var _iterator = _createForOfIteratorHelper(range.addresses(_this)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var address = _step.value;\n\n          var cell = _this.addressMapping.getCell(address);\n\n          if (cell instanceof EmptyCellVertex) {\n            cell.address = address;\n          }\n\n          if (cell !== undefined) {\n            allDeps.push([address, cell]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return allDeps;\n    };\n\n    this.formulaDependencyQuery = function (vertex) {\n      var formula;\n      var address;\n\n      if (vertex instanceof FormulaVertex) {\n        address = vertex.getAddress(_this.lazilyTransformingAstService);\n        formula = vertex.getFormula(_this.lazilyTransformingAstService);\n      } else {\n        return undefined;\n      }\n\n      var deps = collectDependencies(formula, _this.functionRegistry);\n      return [address, absolutizeDependencies(deps, address)];\n    };\n\n    this.graph = new Graph(this.dependencyQueryVertices);\n  }\n  /**\n   * Invariants:\n   * - empty cell has associated EmptyCellVertex if and only if it is a dependency (possibly indirect, through range) to some formula\n   */\n\n\n  _createClass(DependencyGraph, [{\n    key: \"setFormulaToCell\",\n    value: function setFormulaToCell(address, ast, dependencies, size, hasVolatileFunction, hasStructuralChangeFunction) {\n      var newVertex = FormulaVertex.fromAst(ast, address, size, this.lazilyTransformingAstService.version());\n      this.exchangeOrAddFormulaVertex(newVertex);\n      this.processCellDependencies(dependencies, newVertex);\n      this.graph.markNodeAsSpecialRecentlyChanged(newVertex);\n\n      if (hasVolatileFunction) {\n        this.markAsVolatile(newVertex);\n      }\n\n      if (hasStructuralChangeFunction) {\n        this.markAsDependentOnStructureChange(newVertex);\n      }\n\n      this.correctInfiniteRangesDependency(address);\n      return this.getAndClearContentChanges();\n    }\n  }, {\n    key: \"setParsingErrorToCell\",\n    value: function setParsingErrorToCell(address, errorVertex) {\n      var vertex = this.shrinkPossibleArrayAndGetCell(address);\n      this.exchangeOrAddGraphNode(vertex, errorVertex);\n      this.addressMapping.setCell(address, errorVertex);\n      this.graph.markNodeAsSpecialRecentlyChanged(errorVertex);\n      this.correctInfiniteRangesDependency(address);\n      return this.getAndClearContentChanges();\n    }\n  }, {\n    key: \"setValueToCell\",\n    value: function setValueToCell(address, value) {\n      var vertex = this.shrinkPossibleArrayAndGetCell(address);\n\n      if (vertex instanceof ArrayVertex) {\n        this.arrayMapping.removeArray(vertex.getRange());\n      }\n\n      if (vertex instanceof ValueCellVertex) {\n        var oldValues = vertex.getValues();\n\n        if (oldValues.rawValue !== value.rawValue) {\n          vertex.setValues(value);\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } else {\n        var newVertex = new ValueCellVertex(value.parsedValue, value.rawValue);\n        this.exchangeOrAddGraphNode(vertex, newVertex);\n        this.addressMapping.setCell(address, newVertex);\n        this.graph.markNodeAsSpecialRecentlyChanged(newVertex);\n      }\n\n      this.correctInfiniteRangesDependency(address);\n      return this.getAndClearContentChanges();\n    }\n  }, {\n    key: \"setCellEmpty\",\n    value: function setCellEmpty(address) {\n      var vertex = this.shrinkPossibleArrayAndGetCell(address);\n\n      if (vertex === undefined) {\n        return ContentChanges.empty();\n      }\n\n      if (this.graph.adjacentNodes(vertex).size > 0) {\n        var emptyVertex = new EmptyCellVertex(address);\n        this.exchangeGraphNode(vertex, emptyVertex);\n\n        if (this.graph.adjacentNodesCount(emptyVertex) === 0) {\n          this.removeVertex(emptyVertex);\n          this.addressMapping.removeCell(address);\n        } else {\n          this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);\n          this.addressMapping.setCell(address, emptyVertex);\n        }\n      } else {\n        this.removeVertex(vertex);\n        this.addressMapping.removeCell(address);\n      }\n\n      return this.getAndClearContentChanges();\n    }\n  }, {\n    key: \"ensureThatVertexIsNonArrayCellVertex\",\n    value: function ensureThatVertexIsNonArrayCellVertex(vertex) {\n      if (vertex instanceof ArrayVertex) {\n        throw new Error('Illegal operation');\n      }\n    }\n  }, {\n    key: \"clearRecentlyChangedVertices\",\n    value: function clearRecentlyChangedVertices() {\n      this.graph.clearSpecialNodesRecentlyChanged();\n    }\n  }, {\n    key: \"verticesToRecompute\",\n    value: function verticesToRecompute() {\n      return new Set([].concat(_toConsumableArray(this.graph.specialNodesRecentlyChanged), _toConsumableArray(this.volatileVertices())));\n    }\n  }, {\n    key: \"processCellDependencies\",\n    value: function processCellDependencies(cellDependencies, endVertex) {\n      var _this2 = this;\n\n      cellDependencies.forEach(function (dep) {\n        if (dep instanceof AbsoluteCellRange) {\n          var range = dep;\n\n          var rangeVertex = _this2.getRange(range.start, range.end);\n\n          if (rangeVertex === undefined) {\n            rangeVertex = new RangeVertex(range);\n\n            _this2.rangeMapping.setRange(rangeVertex);\n          }\n\n          _this2.graph.addNode(rangeVertex);\n\n          if (!range.isFinite()) {\n            _this2.graph.markNodeAsInfiniteRange(rangeVertex);\n          }\n\n          var _this2$rangeMapping$f = _this2.rangeMapping.findSmallerRange(range),\n              smallerRangeVertex = _this2$rangeMapping$f.smallerRangeVertex,\n              restRange = _this2$rangeMapping$f.restRange;\n\n          if (smallerRangeVertex !== undefined) {\n            _this2.graph.addEdge(smallerRangeVertex, rangeVertex);\n\n            if (rangeVertex.bruteForce) {\n              rangeVertex.bruteForce = false;\n\n              var _iterator2 = _createForOfIteratorHelper(range.addresses(_this2)),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var cellFromRange = _step2.value; //if we ever switch heuristic to processing by sorted sizes, this would be unnecessary\n\n                  _this2.graph.removeEdge(_this2.fetchCell(cellFromRange), rangeVertex);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } else {\n            rangeVertex.bruteForce = true;\n          }\n\n          var array = _this2.arrayMapping.getArray(restRange);\n\n          if (array !== undefined) {\n            _this2.graph.addEdge(array, rangeVertex);\n          } else {\n            var _iterator3 = _createForOfIteratorHelper(restRange.addresses(_this2)),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _cellFromRange = _step3.value;\n\n                _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(_cellFromRange), rangeVertex);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n\n          _this2.graph.addEdge(rangeVertex, endVertex);\n\n          if (range.isFinite()) {\n            _this2.correctInfiniteRangesDependenciesByRangeVertex(rangeVertex);\n          }\n        } else if (dep instanceof NamedExpressionDependency) {\n          var sheetOfVertex = endVertex.getAddress(_this2.lazilyTransformingAstService).sheet;\n\n          var namedExpressionVertex = _this2.fetchNamedExpressionVertex(dep.name, sheetOfVertex);\n\n          _this2.graph.addEdge(namedExpressionVertex, endVertex);\n        } else {\n          _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(dep), endVertex);\n        }\n      });\n    }\n  }, {\n    key: \"fetchNamedExpressionVertex\",\n    value: function fetchNamedExpressionVertex(expressionName, sheetId) {\n      var namedExpression = this.namedExpressions.namedExpressionOrPlaceholder(expressionName, sheetId);\n      return this.fetchCellOrCreateEmpty(namedExpression.address);\n    }\n  }, {\n    key: \"exchangeNode\",\n    value: function exchangeNode(addressFrom, addressTo) {\n      var vertexFrom = this.fetchCellOrCreateEmpty(addressFrom);\n      var vertexTo = this.fetchCellOrCreateEmpty(addressTo);\n      this.addressMapping.removeCell(addressFrom);\n      this.exchangeGraphNode(vertexFrom, vertexTo);\n    }\n  }, {\n    key: \"correctInfiniteRangesDependency\",\n    value: function correctInfiniteRangesDependency(address) {\n      var vertex = undefined;\n\n      var _iterator4 = _createForOfIteratorHelper(this.graph.infiniteRanges),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var range = _step4.value;\n          var infiniteRangeVertex = range;\n\n          if (infiniteRangeVertex.range.addressInRange(address)) {\n            vertex = vertex !== null && vertex !== void 0 ? vertex : this.fetchCellOrCreateEmpty(address);\n            this.graph.addEdge(vertex, infiniteRangeVertex);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"fetchCellOrCreateEmpty\",\n    value: function fetchCellOrCreateEmpty(address) {\n      var vertex = this.addressMapping.getCell(address);\n\n      if (vertex === undefined) {\n        vertex = new EmptyCellVertex(address);\n        this.graph.addNode(vertex);\n        this.addressMapping.setCell(address, vertex);\n      }\n\n      return vertex;\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(removedRows) {\n      var _this3 = this;\n\n      this.stats.measure(StatType.ADJUSTING_GRAPH, function () {\n        var _iterator5 = _createForOfIteratorHelper(_this3.addressMapping.entriesFromRowsSpan(removedRows)),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _step5$value = _slicedToArray(_step5.value, 2),\n                address = _step5$value[0],\n                vertex = _step5$value[1];\n\n            var _iterator6 = _createForOfIteratorHelper(_this3.graph.adjacentNodes(vertex)),\n                _step6;\n\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var adjacentNode = _step6.value;\n\n                _this3.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n\n            if (vertex instanceof ArrayVertex) {\n              if (vertex.isLeftCorner(address)) {\n                _this3.shrinkArrayToCorner(vertex);\n\n                _this3.arrayMapping.removeArray(vertex.getRange());\n              } else {\n                continue;\n              }\n            }\n\n            _this3.removeVertex(vertex);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this3.addressMapping.removeRows(removedRows);\n      });\n      var affectedArrays = this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var affectedRanges = _this3.truncateRanges(removedRows, function (address) {\n          return address.row;\n        });\n\n        return _this3.getArrayVerticesRelatedToRanges(affectedRanges);\n      });\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        _this3.fixArraysAfterRemovingRows(removedRows.sheet, removedRows.rowStart, removedRows.numberOfRows);\n      });\n      this.addStructuralNodesToChangeSet();\n      return {\n        affectedArrays: affectedArrays,\n        contentChanges: this.getAndClearContentChanges()\n      };\n    }\n  }, {\n    key: \"removeSheet\",\n    value: function removeSheet(removedSheetId) {\n      var _this4 = this;\n\n      var arrays = new Set();\n\n      var _iterator7 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(removedSheetId)),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n              adr = _step7$value[0],\n              vertex = _step7$value[1];\n\n          if (vertex instanceof ArrayVertex) {\n            if (arrays.has(vertex)) {\n              continue;\n            } else {\n              arrays.add(vertex);\n            }\n          }\n\n          var _iterator10 = _createForOfIteratorHelper(this.graph.adjacentNodes(vertex)),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var adjacentNode = _step10.value;\n              this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n\n          this.removeVertex(vertex);\n          this.addressMapping.removeCell(adr);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        var _iterator8 = _createForOfIteratorHelper(arrays.values()),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var array = _step8.value;\n\n            _this4.arrayMapping.removeArray(array.getRange());\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var rangesToRemove = _this4.rangeMapping.removeRangesInSheet(removedSheetId);\n\n        var _iterator9 = _createForOfIteratorHelper(rangesToRemove),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var range = _step9.value;\n\n            _this4.removeVertex(range);\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n\n        _this4.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n          _this4.addressMapping.removeSheet(removedSheetId);\n        });\n      });\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"clearSheet\",\n    value: function clearSheet(sheetId) {\n      var arrays = new Set();\n\n      var _iterator11 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(sheetId)),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _step11$value = _slicedToArray(_step11.value, 2),\n              address = _step11$value[0],\n              vertex = _step11$value[1];\n\n          if (vertex instanceof ArrayVertex) {\n            arrays.add(vertex);\n          } else {\n            this.setCellEmpty(address);\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      var _iterator12 = _createForOfIteratorHelper(arrays.values()),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var array = _step12.value;\n          this.setArrayEmpty(array);\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(removedColumns) {\n      var _this5 = this;\n\n      this.stats.measure(StatType.ADJUSTING_GRAPH, function () {\n        var _iterator13 = _createForOfIteratorHelper(_this5.addressMapping.entriesFromColumnsSpan(removedColumns)),\n            _step13;\n\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var _step13$value = _slicedToArray(_step13.value, 2),\n                address = _step13$value[0],\n                vertex = _step13$value[1];\n\n            var _iterator14 = _createForOfIteratorHelper(_this5.graph.adjacentNodes(vertex)),\n                _step14;\n\n            try {\n              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n                var adjacentNode = _step14.value;\n\n                _this5.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n              }\n            } catch (err) {\n              _iterator14.e(err);\n            } finally {\n              _iterator14.f();\n            }\n\n            if (vertex instanceof ArrayVertex) {\n              if (vertex.isLeftCorner(address)) {\n                _this5.shrinkArrayToCorner(vertex);\n\n                _this5.arrayMapping.removeArray(vertex.getRange());\n              } else {\n                continue;\n              }\n            }\n\n            _this5.removeVertex(vertex);\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this5.addressMapping.removeColumns(removedColumns);\n      });\n      var affectedArrays = this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var affectedRanges = _this5.truncateRanges(removedColumns, function (address) {\n          return address.col;\n        });\n\n        return _this5.getArrayVerticesRelatedToRanges(affectedRanges);\n      });\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        return _this5.fixArraysAfterRemovingColumns(removedColumns.sheet, removedColumns.columnStart, removedColumns.numberOfColumns);\n      });\n      this.addStructuralNodesToChangeSet();\n      return {\n        affectedArrays: affectedArrays,\n        contentChanges: this.getAndClearContentChanges()\n      };\n    }\n  }, {\n    key: \"addRows\",\n    value: function addRows(addedRows) {\n      var _this6 = this;\n\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this6.addressMapping.addRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n      var affectedArrays = this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var result = _this6.rangeMapping.moveAllRangesInSheetAfterRowByRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n\n        _this6.fixRangesWhenAddingRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n\n        return _this6.getArrayVerticesRelatedToRanges(result.verticesWithChangedSize);\n      });\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        _this6.fixArraysAfterAddingRow(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n\n      var _iterator15 = _createForOfIteratorHelper(this.addressMapping.verticesFromRowsSpan(addedRows)),\n          _step15;\n\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var vertex = _step15.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n      return {\n        affectedArrays: affectedArrays\n      };\n    }\n  }, {\n    key: \"addColumns\",\n    value: function addColumns(addedColumns) {\n      var _this7 = this;\n\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this7.addressMapping.addColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n      var affectedArrays = this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var result = _this7.rangeMapping.moveAllRangesInSheetAfterColumnByColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n\n        _this7.fixRangesWhenAddingColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n\n        return _this7.getArrayVerticesRelatedToRanges(result.verticesWithChangedSize);\n      });\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        return _this7.fixArraysAfterAddingColumn(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n\n      var _iterator16 = _createForOfIteratorHelper(this.addressMapping.verticesFromColumnsSpan(addedColumns)),\n          _step16;\n\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var vertex = _step16.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n      return {\n        affectedArrays: affectedArrays,\n        contentChanges: this.getAndClearContentChanges()\n      };\n    }\n  }, {\n    key: \"ensureNoArrayInRange\",\n    value: function ensureNoArrayInRange(range) {\n      if (this.arrayMapping.isFormulaArrayInRange(range)) {\n        throw Error('It is not possible to move / replace cells with array');\n      }\n    }\n  }, {\n    key: \"isThereSpaceForArray\",\n    value: function isThereSpaceForArray(arrayVertex) {\n      var _iterator17 = _createForOfIteratorHelper(arrayVertex.getRange().addresses(this)),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var address = _step17.value;\n          var vertexUnderAddress = this.addressMapping.getCell(address);\n\n          if (vertexUnderAddress !== undefined && !(vertexUnderAddress instanceof EmptyCellVertex) && vertexUnderAddress !== arrayVertex) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"moveCells\",\n    value: function moveCells(sourceRange, toRight, toBottom, toSheet) {\n      var _iterator18 = _createForOfIteratorHelper(sourceRange.addressesWithDirection(toRight, toBottom, this)),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var sourceAddress = _step18.value;\n          var targetAddress = simpleCellAddress(toSheet, sourceAddress.col + toRight, sourceAddress.row + toBottom);\n          var sourceVertex = this.addressMapping.getCell(sourceAddress);\n          var targetVertex = this.addressMapping.getCell(targetAddress);\n          this.addressMapping.removeCell(sourceAddress);\n\n          if (sourceVertex !== undefined) {\n            this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);\n            this.addressMapping.setCell(targetAddress, sourceVertex);\n            var emptyVertex = undefined;\n\n            var _iterator20 = _createForOfIteratorHelper(this.graph.adjacentNodes(sourceVertex)),\n                _step20;\n\n            try {\n              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n                var adjacentNode = _step20.value;\n\n                if (adjacentNode instanceof RangeVertex && !sourceRange.containsRange(adjacentNode.range)) {\n                  emptyVertex = emptyVertex !== null && emptyVertex !== void 0 ? emptyVertex : this.fetchCellOrCreateEmpty(sourceAddress);\n                  this.graph.addEdge(emptyVertex, adjacentNode);\n                  this.graph.removeEdge(sourceVertex, adjacentNode);\n                }\n              }\n            } catch (err) {\n              _iterator20.e(err);\n            } finally {\n              _iterator20.f();\n            }\n\n            if (emptyVertex) {\n              this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);\n              this.addressMapping.setCell(sourceAddress, emptyVertex);\n            }\n          }\n\n          if (targetVertex !== undefined) {\n            if (sourceVertex === undefined) {\n              this.addressMapping.removeCell(targetAddress);\n            }\n\n            var _iterator21 = _createForOfIteratorHelper(this.graph.adjacentNodes(targetVertex)),\n                _step21;\n\n            try {\n              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                var _adjacentNode = _step21.value;\n                sourceVertex = sourceVertex !== null && sourceVertex !== void 0 ? sourceVertex : this.fetchCellOrCreateEmpty(targetAddress);\n                this.graph.addEdge(sourceVertex, _adjacentNode);\n                this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);\n              }\n            } catch (err) {\n              _iterator21.e(err);\n            } finally {\n              _iterator21.f();\n            }\n\n            this.removeVertex(targetVertex);\n          }\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n\n      var _iterator19 = _createForOfIteratorHelper(this.rangeMapping.rangeVerticesContainedInRange(sourceRange)),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var rangeVertex = _step19.value;\n\n          var _iterator22 = _createForOfIteratorHelper(this.graph.adjacentNodes(rangeVertex)),\n              _step22;\n\n          try {\n            for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n              var _adjacentNode2 = _step22.value;\n\n              if (_adjacentNode2 instanceof RangeVertex && !sourceRange.containsRange(_adjacentNode2.range)) {\n                this.graph.removeEdge(rangeVertex, _adjacentNode2);\n\n                var _iterator23 = _createForOfIteratorHelper(rangeVertex.range.addresses(this)),\n                    _step23;\n\n                try {\n                  for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n                    var address = _step23.value;\n                    var newEmptyVertex = this.fetchCellOrCreateEmpty(address);\n                    this.graph.addEdge(newEmptyVertex, _adjacentNode2);\n                    this.addressMapping.setCell(address, newEmptyVertex);\n                    this.graph.markNodeAsSpecialRecentlyChanged(newEmptyVertex);\n                  }\n                } catch (err) {\n                  _iterator23.e(err);\n                } finally {\n                  _iterator23.f();\n                }\n              }\n            }\n          } catch (err) {\n            _iterator22.e(err);\n          } finally {\n            _iterator22.f();\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      this.rangeMapping.moveRangesInsideSourceRange(sourceRange, toRight, toBottom, toSheet);\n    }\n  }, {\n    key: \"setArrayEmpty\",\n    value: function setArrayEmpty(arrayVertex) {\n      var arrayRange = AbsoluteCellRange.spanFrom(arrayVertex.getAddress(this.lazilyTransformingAstService), arrayVertex.width, arrayVertex.height);\n      var adjacentNodes = this.graph.adjacentNodes(arrayVertex);\n\n      var _iterator24 = _createForOfIteratorHelper(arrayRange.addresses(this)),\n          _step24;\n\n      try {\n        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n          var address = _step24.value;\n          this.addressMapping.removeCell(address);\n        }\n      } catch (err) {\n        _iterator24.e(err);\n      } finally {\n        _iterator24.f();\n      }\n\n      var _iterator25 = _createForOfIteratorHelper(adjacentNodes.values()),\n          _step25;\n\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var adjacentNode = _step25.value;\n          var nodeDependencies = collectAddressesDependentToRange(this.functionRegistry, adjacentNode, arrayVertex.getRange(), this.lazilyTransformingAstService, this);\n\n          var _iterator26 = _createForOfIteratorHelper(nodeDependencies),\n              _step26;\n\n          try {\n            for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n              var _address = _step26.value;\n              var vertex = this.fetchCellOrCreateEmpty(_address);\n              this.graph.addEdge(vertex, adjacentNode);\n            }\n          } catch (err) {\n            _iterator26.e(err);\n          } finally {\n            _iterator26.f();\n          }\n\n          if (nodeDependencies.length > 0) {\n            this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n          }\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n\n      this.removeVertex(arrayVertex);\n      this.arrayMapping.removeArray(arrayVertex.getRange());\n    }\n  }, {\n    key: \"addVertex\",\n    value: function addVertex(address, vertex) {\n      this.graph.addNode(vertex);\n      this.addressMapping.setCell(address, vertex);\n    }\n  }, {\n    key: \"addArrayVertex\",\n    value: function addArrayVertex(address, vertex) {\n      this.graph.addNode(vertex);\n      this.setAddressMappingForArrayVertex(vertex, address);\n    }\n  }, {\n    key: \"arrayFormulaNodes\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function arrayFormulaNodes() {\n      var _iterator27, _step27, vertex;\n\n      return _regeneratorRuntime.wrap(function arrayFormulaNodes$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator27 = _createForOfIteratorHelper(this.graph.nodes);\n              _context.prev = 1;\n\n              _iterator27.s();\n\n            case 3:\n              if ((_step27 = _iterator27.n()).done) {\n                _context.next = 10;\n                break;\n              }\n\n              vertex = _step27.value;\n\n              if (!(vertex instanceof ArrayVertex)) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 8;\n              return vertex;\n\n            case 8:\n              _context.next = 3;\n              break;\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator27.e(_context.t0);\n\n            case 15:\n              _context.prev = 15;\n\n              _iterator27.f();\n\n              return _context.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, arrayFormulaNodes, this, [[1, 12, 15, 18]]);\n    })\n  }, {\n    key: \"entriesFromRowsSpan\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entriesFromRowsSpan(rowsSpan) {\n      return _regeneratorRuntime.wrap(function entriesFromRowsSpan$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.delegateYield(this.addressMapping.entriesFromRowsSpan(rowsSpan), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, entriesFromRowsSpan, this);\n    })\n  }, {\n    key: \"entriesFromColumnsSpan\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entriesFromColumnsSpan(columnsSpan) {\n      return _regeneratorRuntime.wrap(function entriesFromColumnsSpan$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.delegateYield(this.addressMapping.entriesFromColumnsSpan(columnsSpan), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, entriesFromColumnsSpan, this);\n    })\n  }, {\n    key: \"existsVertex\",\n    value: function existsVertex(address) {\n      return this.addressMapping.has(address);\n    }\n  }, {\n    key: \"fetchCell\",\n    value: function fetchCell(address) {\n      return this.addressMapping.fetchCell(address);\n    }\n  }, {\n    key: \"getCell\",\n    value: function getCell(address) {\n      return this.addressMapping.getCell(address);\n    }\n  }, {\n    key: \"getCellValue\",\n    value: function getCellValue(address) {\n      return this.addressMapping.getCellValue(address);\n    }\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue(address) {\n      return this.addressMapping.getRawValue(address);\n    }\n  }, {\n    key: \"getScalarValue\",\n    value: function getScalarValue(address) {\n      var value = this.addressMapping.getCellValue(address);\n\n      if (value instanceof SimpleRangeValue) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ScalarExpected);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"existsEdge\",\n    value: function existsEdge(fromNode, toNode) {\n      return this.graph.existsEdge(fromNode, toNode);\n    }\n  }, {\n    key: \"getSheetId\",\n    value: function getSheetId(sheetName) {\n      return this.sheetMapping.fetch(sheetName);\n    }\n  }, {\n    key: \"getSheetHeight\",\n    value: function getSheetHeight(sheet) {\n      return this.addressMapping.getHeight(sheet);\n    }\n  }, {\n    key: \"getSheetWidth\",\n    value: function getSheetWidth(sheet) {\n      return this.addressMapping.getWidth(sheet);\n    }\n  }, {\n    key: \"getArray\",\n    value: function getArray(range) {\n      return this.arrayMapping.getArray(range);\n    }\n  }, {\n    key: \"setArray\",\n    value: function setArray(range, vertex) {\n      this.arrayMapping.setArray(range, vertex);\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(start, end) {\n      return this.rangeMapping.getRange(start, end);\n    }\n  }, {\n    key: \"topSortWithScc\",\n    value: function topSortWithScc() {\n      return this.graph.topSortWithScc();\n    }\n  }, {\n    key: \"markAsVolatile\",\n    value: function markAsVolatile(vertex) {\n      this.graph.markNodeAsSpecial(vertex);\n    }\n  }, {\n    key: \"markAsDependentOnStructureChange\",\n    value: function markAsDependentOnStructureChange(vertex) {\n      this.graph.markNodeAsChangingWithStructure(vertex);\n    }\n  }, {\n    key: \"forceApplyPostponedTransformations\",\n    value: function forceApplyPostponedTransformations() {\n      var _iterator28 = _createForOfIteratorHelper(this.graph.nodes.values()),\n          _step28;\n\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var vertex = _step28.value;\n\n          if (vertex instanceof FormulaCellVertex) {\n            vertex.ensureRecentData(this.lazilyTransformingAstService);\n          }\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n    }\n  }, {\n    key: \"volatileVertices\",\n    value: function volatileVertices() {\n      return this.graph.specialNodes;\n    }\n  }, {\n    key: \"getArrayVerticesRelatedToRanges\",\n    value: function getArrayVerticesRelatedToRanges(ranges) {\n      var _this8 = this;\n\n      var arrayVertices = ranges.map(function (range) {\n        if (_this8.graph.hasNode(range)) {\n          return Array.from(_this8.graph.adjacentNodes(range)).filter(function (node) {\n            return node instanceof ArrayVertex;\n          });\n        } else {\n          return [];\n        }\n      });\n      return _construct(Set, _toConsumableArray(arrayVertices));\n    }\n  }, {\n    key: \"rawValuesFromRange\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function rawValuesFromRange(range) {\n      var _iterator29, _step29, address, value;\n\n      return _regeneratorRuntime.wrap(function rawValuesFromRange$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iterator29 = _createForOfIteratorHelper(range.addresses(this));\n              _context4.prev = 1;\n\n              _iterator29.s();\n\n            case 3:\n              if ((_step29 = _iterator29.n()).done) {\n                _context4.next = 11;\n                break;\n              }\n\n              address = _step29.value;\n              value = this.getScalarValue(address);\n\n              if (!(value !== EmptyValue)) {\n                _context4.next = 9;\n                break;\n              }\n\n              _context4.next = 9;\n              return [getRawValue(value), address];\n\n            case 9:\n              _context4.next = 3;\n              break;\n\n            case 11:\n              _context4.next = 16;\n              break;\n\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](1);\n\n              _iterator29.e(_context4.t0);\n\n            case 16:\n              _context4.prev = 16;\n\n              _iterator29.f();\n\n              return _context4.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, rawValuesFromRange, this, [[1, 13, 16, 19]]);\n    })\n  }, {\n    key: \"entriesFromRange\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entriesFromRange(range) {\n      var _iterator30, _step30, address;\n\n      return _regeneratorRuntime.wrap(function entriesFromRange$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _iterator30 = _createForOfIteratorHelper(range.addresses(this));\n              _context5.prev = 1;\n\n              _iterator30.s();\n\n            case 3:\n              if ((_step30 = _iterator30.n()).done) {\n                _context5.next = 9;\n                break;\n              }\n\n              address = _step30.value;\n              _context5.next = 7;\n              return [address, this.getCell(address)];\n\n            case 7:\n              _context5.next = 3;\n              break;\n\n            case 9:\n              _context5.next = 14;\n              break;\n\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](1);\n\n              _iterator30.e(_context5.t0);\n\n            case 14:\n              _context5.prev = 14;\n\n              _iterator30.f();\n\n              return _context5.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, entriesFromRange, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"exchangeGraphNode\",\n    value: function exchangeGraphNode(oldNode, newNode) {\n      var _this9 = this;\n\n      this.graph.addNode(newNode);\n      var adjNodesStored = this.graph.adjacentNodes(oldNode);\n      this.removeVertex(oldNode);\n      adjNodesStored.forEach(function (adjacentNode) {\n        if (_this9.graph.hasNode(adjacentNode)) {\n          _this9.graph.addEdge(newNode, adjacentNode);\n        }\n      });\n    }\n  }, {\n    key: \"exchangeOrAddGraphNode\",\n    value: function exchangeOrAddGraphNode(oldNode, newNode) {\n      if (oldNode) {\n        this.exchangeGraphNode(oldNode, newNode);\n      } else {\n        this.graph.addNode(newNode);\n      }\n    }\n  }, {\n    key: \"computeListOfValuesInRange\",\n    value: function computeListOfValuesInRange(range) {\n      var values = [];\n\n      var _iterator31 = _createForOfIteratorHelper(range.addresses(this)),\n          _step31;\n\n      try {\n        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n          var cellFromRange = _step31.value;\n          var value = this.getScalarValue(cellFromRange);\n          values.push(value);\n        }\n      } catch (err) {\n        _iterator31.e(err);\n      } finally {\n        _iterator31.f();\n      }\n\n      return values;\n    }\n  }, {\n    key: \"shrinkArrayToCorner\",\n    value: function shrinkArrayToCorner(array) {\n      this.cleanAddressMappingUnderArray(array);\n\n      var _iterator32 = _createForOfIteratorHelper(this.adjacentArrayVertices(array)),\n          _step32;\n\n      try {\n        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n          var adjacentVertex = _step32.value;\n          var relevantDependencies = void 0;\n\n          if (adjacentVertex instanceof FormulaVertex) {\n            relevantDependencies = this.formulaDirectDependenciesToArray(adjacentVertex, array);\n          } else {\n            relevantDependencies = this.rangeDirectDependenciesToArray(adjacentVertex, array);\n          }\n\n          var dependentToCorner = false;\n\n          var _iterator33 = _createForOfIteratorHelper(relevantDependencies),\n              _step33;\n\n          try {\n            for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n              var _step33$value = _slicedToArray(_step33.value, 2),\n                  address = _step33$value[0],\n                  vertex = _step33$value[1];\n\n              if (array.isLeftCorner(address)) {\n                dependentToCorner = true;\n              }\n\n              this.graph.addEdge(vertex, adjacentVertex);\n              this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n            }\n          } catch (err) {\n            _iterator33.e(err);\n          } finally {\n            _iterator33.f();\n          }\n\n          if (!dependentToCorner) {\n            this.graph.removeEdge(array, adjacentVertex);\n          }\n        }\n      } catch (err) {\n        _iterator32.e(err);\n      } finally {\n        _iterator32.f();\n      }\n\n      this.graph.markNodeAsSpecialRecentlyChanged(array);\n    }\n  }, {\n    key: \"isArrayInternalCell\",\n    value: function isArrayInternalCell(address) {\n      var vertex = this.getCell(address);\n      return vertex instanceof ArrayVertex && !vertex.isLeftCorner(address);\n    }\n  }, {\n    key: \"getAndClearContentChanges\",\n    value: function getAndClearContentChanges() {\n      var changes = this.changes;\n      this.changes = ContentChanges.empty();\n      return changes;\n    }\n  }, {\n    key: \"getAdjacentNodesAddresses\",\n    value: function getAdjacentNodesAddresses(inputVertex) {\n      var _this10 = this;\n\n      var deps = this.graph.adjacentNodes(inputVertex);\n      var ret = [];\n      deps.forEach(function (vertex) {\n        var castVertex = vertex;\n\n        if (castVertex instanceof RangeVertex) {\n          ret.push(simpleCellRange(castVertex.start, castVertex.end));\n        } else {\n          ret.push(castVertex.getAddress(_this10.lazilyTransformingAstService));\n        }\n      });\n      return ret;\n    }\n  }, {\n    key: \"correctInfiniteRangesDependenciesByRangeVertex\",\n    value: function correctInfiniteRangesDependenciesByRangeVertex(vertex) {\n      var _iterator34 = _createForOfIteratorHelper(this.graph.infiniteRanges),\n          _step34;\n\n      try {\n        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n          var range = _step34.value;\n          var infiniteRangeVertex = range;\n          var intersection = vertex.range.intersectionWith(infiniteRangeVertex.range);\n\n          if (intersection === undefined) {\n            continue;\n          }\n\n          var _iterator35 = _createForOfIteratorHelper(intersection.addresses(this)),\n              _step35;\n\n          try {\n            for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n              var address = _step35.value;\n              this.graph.addEdge(this.fetchCellOrCreateEmpty(address), range);\n            }\n          } catch (err) {\n            _iterator35.e(err);\n          } finally {\n            _iterator35.f();\n          }\n        }\n      } catch (err) {\n        _iterator34.e(err);\n      } finally {\n        _iterator34.f();\n      }\n    }\n  }, {\n    key: \"cleanAddressMappingUnderArray\",\n    value: function cleanAddressMappingUnderArray(vertex) {\n      var arrayRange = vertex.getRange();\n\n      var _iterator36 = _createForOfIteratorHelper(arrayRange.addresses(this)),\n          _step36;\n\n      try {\n        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n          var address = _step36.value;\n          var oldValue = vertex.getArrayCellValue(address);\n\n          if (this.getCell(address) === vertex) {\n            if (vertex.isLeftCorner(address)) {\n              this.changes.addChange(new CellError(ErrorType.REF), address, oldValue);\n            } else {\n              this.addressMapping.removeCell(address);\n              this.changes.addChange(EmptyValue, address, oldValue);\n            }\n          } else {\n            this.changes.addChange(EmptyValue, address, oldValue);\n          }\n        }\n      } catch (err) {\n        _iterator36.e(err);\n      } finally {\n        _iterator36.f();\n      }\n    }\n  }, {\n    key: \"formulaDirectDependenciesToArray\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function formulaDirectDependenciesToArray(vertex, array) {\n      var _a, _ref5, _ref6, formulaDependencies, _iterator37, _step37, dependency, _vertex;\n\n      return _regeneratorRuntime.wrap(function formulaDirectDependenciesToArray$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _ref5 = (_a = this.formulaDependencyQuery(vertex)) !== null && _a !== void 0 ? _a : [], _ref6 = _slicedToArray(_ref5, 2), formulaDependencies = _ref6[1];\n\n              if (!(formulaDependencies === undefined)) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 3:\n              _iterator37 = _createForOfIteratorHelper(formulaDependencies);\n              _context6.prev = 4;\n\n              _iterator37.s();\n\n            case 6:\n              if ((_step37 = _iterator37.n()).done) {\n                _context6.next = 16;\n                break;\n              }\n\n              dependency = _step37.value;\n\n              if (!(dependency instanceof NamedExpressionDependency || dependency instanceof AbsoluteCellRange)) {\n                _context6.next = 10;\n                break;\n              }\n\n              return _context6.abrupt(\"continue\", 14);\n\n            case 10:\n              if (!array.getRange().addressInRange(dependency)) {\n                _context6.next = 14;\n                break;\n              }\n\n              _vertex = this.fetchCellOrCreateEmpty(dependency);\n              _context6.next = 14;\n              return [dependency, _vertex];\n\n            case 14:\n              _context6.next = 6;\n              break;\n\n            case 16:\n              _context6.next = 21;\n              break;\n\n            case 18:\n              _context6.prev = 18;\n              _context6.t0 = _context6[\"catch\"](4);\n\n              _iterator37.e(_context6.t0);\n\n            case 21:\n              _context6.prev = 21;\n\n              _iterator37.f();\n\n              return _context6.finish(21);\n\n            case 24:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, formulaDirectDependenciesToArray, this, [[4, 18, 21, 24]]);\n    })\n  }, {\n    key: \"rangeDirectDependenciesToArray\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function rangeDirectDependenciesToArray(vertex, array) {\n      var _this$rangeMapping$fi2, range, _iterator38, _step38, address, cell;\n\n      return _regeneratorRuntime.wrap(function rangeDirectDependenciesToArray$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _this$rangeMapping$fi2 = this.rangeMapping.findSmallerRange(vertex.range), range = _this$rangeMapping$fi2.restRange;\n              _iterator38 = _createForOfIteratorHelper(range.addresses(this));\n              _context7.prev = 2;\n\n              _iterator38.s();\n\n            case 4:\n              if ((_step38 = _iterator38.n()).done) {\n                _context7.next = 12;\n                break;\n              }\n\n              address = _step38.value;\n\n              if (!array.getRange().addressInRange(address)) {\n                _context7.next = 10;\n                break;\n              }\n\n              cell = this.fetchCellOrCreateEmpty(address);\n              _context7.next = 10;\n              return [address, cell];\n\n            case 10:\n              _context7.next = 4;\n              break;\n\n            case 12:\n              _context7.next = 17;\n              break;\n\n            case 14:\n              _context7.prev = 14;\n              _context7.t0 = _context7[\"catch\"](2);\n\n              _iterator38.e(_context7.t0);\n\n            case 17:\n              _context7.prev = 17;\n\n              _iterator38.f();\n\n              return _context7.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, rangeDirectDependenciesToArray, this, [[2, 14, 17, 20]]);\n    })\n  }, {\n    key: \"adjacentArrayVertices\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function adjacentArrayVertices(vertex) {\n      var adjacentNodes, _iterator39, _step39, item;\n\n      return _regeneratorRuntime.wrap(function adjacentArrayVertices$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              adjacentNodes = this.graph.adjacentNodes(vertex);\n              _iterator39 = _createForOfIteratorHelper(adjacentNodes);\n              _context8.prev = 2;\n\n              _iterator39.s();\n\n            case 4:\n              if ((_step39 = _iterator39.n()).done) {\n                _context8.next = 11;\n                break;\n              }\n\n              item = _step39.value;\n\n              if (!(item instanceof FormulaVertex || item instanceof RangeVertex)) {\n                _context8.next = 9;\n                break;\n              }\n\n              _context8.next = 9;\n              return item;\n\n            case 9:\n              _context8.next = 4;\n              break;\n\n            case 11:\n              _context8.next = 16;\n              break;\n\n            case 13:\n              _context8.prev = 13;\n              _context8.t0 = _context8[\"catch\"](2);\n\n              _iterator39.e(_context8.t0);\n\n            case 16:\n              _context8.prev = 16;\n\n              _iterator39.f();\n\n              return _context8.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, adjacentArrayVertices, this, [[2, 13, 16, 19]]);\n    })\n  }, {\n    key: \"addStructuralNodesToChangeSet\",\n    value: function addStructuralNodesToChangeSet() {\n      var _iterator40 = _createForOfIteratorHelper(this.graph.specialNodesStructuralChanges),\n          _step40;\n\n      try {\n        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n          var vertex = _step40.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator40.e(err);\n      } finally {\n        _iterator40.f();\n      }\n    }\n  }, {\n    key: \"fixRangesWhenAddingRows\",\n    value: function fixRangesWhenAddingRows(sheet, row, numberOfRows) {\n      var originalValues = Array.from(this.rangeMapping.rangesInSheet(sheet));\n\n      for (var _i2 = 0, _originalValues = originalValues; _i2 < _originalValues.length; _i2++) {\n        var rangeVertex = _originalValues[_i2];\n\n        if (rangeVertex.range.includesRow(row + numberOfRows)) {\n          if (rangeVertex.bruteForce) {\n            var addedSubrangeInThatRange = rangeVertex.range.rangeWithSameWidth(row, numberOfRows);\n\n            var _iterator41 = _createForOfIteratorHelper(addedSubrangeInThatRange.addresses(this)),\n                _step41;\n\n            try {\n              for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n                var address = _step41.value;\n                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);\n              }\n            } catch (err) {\n              _iterator41.e(err);\n            } finally {\n              _iterator41.f();\n            }\n          } else {\n            var currentRangeVertex = rangeVertex;\n            var find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);\n\n            if (find.smallerRangeVertex !== undefined) {\n              continue;\n            }\n\n            while (find.smallerRangeVertex === undefined) {\n              var newRangeVertex = new RangeVertex(AbsoluteCellRange.spanFrom(currentRangeVertex.range.start, currentRangeVertex.range.width(), currentRangeVertex.range.height() - 1));\n              this.rangeMapping.setRange(newRangeVertex);\n              this.graph.addNode(newRangeVertex);\n              var restRange = new AbsoluteCellRange(simpleCellAddress(currentRangeVertex.range.start.sheet, currentRangeVertex.range.start.col, currentRangeVertex.range.end.row), currentRangeVertex.range.end);\n              this.addAllFromRange(restRange, currentRangeVertex);\n              this.graph.addEdge(newRangeVertex, currentRangeVertex);\n              currentRangeVertex = newRangeVertex;\n              find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);\n            }\n\n            this.graph.addEdge(find.smallerRangeVertex, currentRangeVertex);\n            this.addAllFromRange(find.restRange, currentRangeVertex);\n            this.graph.removeEdge(find.smallerRangeVertex, rangeVertex);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"addAllFromRange\",\n    value: function addAllFromRange(range, vertex) {\n      var _iterator42 = _createForOfIteratorHelper(range.addresses(this)),\n          _step42;\n\n      try {\n        for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {\n          var address = _step42.value;\n          this.graph.addEdge(this.fetchCellOrCreateEmpty(address), vertex);\n        }\n      } catch (err) {\n        _iterator42.e(err);\n      } finally {\n        _iterator42.f();\n      }\n    }\n  }, {\n    key: \"fixRangesWhenAddingColumns\",\n    value: function fixRangesWhenAddingColumns(sheet, column, numberOfColumns) {\n      var _iterator43 = _createForOfIteratorHelper(this.rangeMapping.rangesInSheet(sheet)),\n          _step43;\n\n      try {\n        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n          var rangeVertex = _step43.value;\n\n          if (rangeVertex.range.includesColumn(column + numberOfColumns)) {\n            var subrange = void 0;\n\n            if (rangeVertex.bruteForce) {\n              subrange = rangeVertex.range.rangeWithSameHeight(column, numberOfColumns);\n            } else {\n              subrange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheet, column, rangeVertex.range.end.row), numberOfColumns, 1);\n            }\n\n            var _iterator44 = _createForOfIteratorHelper(subrange.addresses(this)),\n                _step44;\n\n            try {\n              for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {\n                var address = _step44.value;\n                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);\n              }\n            } catch (err) {\n              _iterator44.e(err);\n            } finally {\n              _iterator44.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator43.e(err);\n      } finally {\n        _iterator43.f();\n      }\n    }\n  }, {\n    key: \"exchangeOrAddFormulaVertex\",\n    value: function exchangeOrAddFormulaVertex(vertex) {\n      var address = vertex.getAddress(this.lazilyTransformingAstService);\n      var range = AbsoluteCellRange.spanFrom(address, vertex.width, vertex.height);\n      var oldNode = this.shrinkPossibleArrayAndGetCell(address);\n\n      if (vertex instanceof ArrayVertex) {\n        this.setArray(range, vertex);\n      }\n\n      this.exchangeOrAddGraphNode(oldNode, vertex);\n      this.addressMapping.setCell(address, vertex);\n\n      if (vertex instanceof ArrayVertex) {\n        if (!this.isThereSpaceForArray(vertex)) {\n          return;\n        }\n\n        var _iterator45 = _createForOfIteratorHelper(range.addresses(this)),\n            _step45;\n\n        try {\n          for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n            var cellAddress = _step45.value;\n\n            if (vertex.isLeftCorner(cellAddress)) {\n              continue;\n            }\n\n            var old = this.getCell(cellAddress);\n            this.exchangeOrAddGraphNode(old, vertex);\n          }\n        } catch (err) {\n          _iterator45.e(err);\n        } finally {\n          _iterator45.f();\n        }\n      }\n\n      var _iterator46 = _createForOfIteratorHelper(range.addresses(this)),\n          _step46;\n\n      try {\n        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n          var _cellAddress = _step46.value;\n          this.addressMapping.setCell(_cellAddress, vertex);\n        }\n      } catch (err) {\n        _iterator46.e(err);\n      } finally {\n        _iterator46.f();\n      }\n    }\n  }, {\n    key: \"setAddressMappingForArrayVertex\",\n    value: function setAddressMappingForArrayVertex(vertex, formulaAddress) {\n      this.addressMapping.setCell(formulaAddress, vertex);\n\n      if (!(vertex instanceof ArrayVertex)) {\n        return;\n      }\n\n      var range = AbsoluteCellRange.spanFrom(formulaAddress, vertex.width, vertex.height);\n      this.setArray(range, vertex);\n\n      if (!this.isThereSpaceForArray(vertex)) {\n        return;\n      }\n\n      var _iterator47 = _createForOfIteratorHelper(range.addresses(this)),\n          _step47;\n\n      try {\n        for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n          var address = _step47.value;\n          this.addressMapping.setCell(address, vertex);\n        }\n      } catch (err) {\n        _iterator47.e(err);\n      } finally {\n        _iterator47.f();\n      }\n    }\n  }, {\n    key: \"truncateRanges\",\n    value: function truncateRanges(span, coordinate) {\n      var _this$rangeMapping$tr = this.rangeMapping.truncateRanges(span, coordinate),\n          verticesToRemove = _this$rangeMapping$tr.verticesToRemove,\n          verticesToMerge = _this$rangeMapping$tr.verticesToMerge,\n          verticesWithChangedSize = _this$rangeMapping$tr.verticesWithChangedSize;\n\n      var _iterator48 = _createForOfIteratorHelper(verticesToMerge),\n          _step48;\n\n      try {\n        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n          var _step48$value = _slicedToArray(_step48.value, 2),\n              existingVertex = _step48$value[0],\n              mergedVertex = _step48$value[1];\n\n          this.mergeRangeVertices(existingVertex, mergedVertex);\n        }\n      } catch (err) {\n        _iterator48.e(err);\n      } finally {\n        _iterator48.f();\n      }\n\n      var _iterator49 = _createForOfIteratorHelper(verticesToRemove),\n          _step49;\n\n      try {\n        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n          var rangeVertex = _step49.value;\n          this.removeVertexAndCleanupDependencies(rangeVertex);\n        }\n      } catch (err) {\n        _iterator49.e(err);\n      } finally {\n        _iterator49.f();\n      }\n\n      return verticesWithChangedSize;\n    }\n  }, {\n    key: \"fixArraysAfterAddingRow\",\n    value: function fixArraysAfterAddingRow(sheet, rowStart, numberOfRows) {\n      this.arrayMapping.moveArrayVerticesAfterRowByRows(sheet, rowStart, numberOfRows);\n\n      if (rowStart <= 0) {\n        return;\n      }\n\n      var _iterator50 = _createForOfIteratorHelper(this.arrayMapping.arraysInRows(RowsSpan.fromRowStartAndEnd(sheet, rowStart - 1, rowStart - 1))),\n          _step50;\n\n      try {\n        for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {\n          var _step50$value = _slicedToArray(_step50.value, 2),\n              array = _step50$value[1];\n\n          var arrayRange = array.getRange();\n\n          for (var col = arrayRange.start.col; col <= arrayRange.end.col; ++col) {\n            for (var row = rowStart; row <= arrayRange.end.row; ++row) {\n              var destination = simpleCellAddress(sheet, col, row);\n              var source = simpleCellAddress(sheet, col, row + numberOfRows);\n              var value = array.getArrayCellValue(destination);\n              this.addressMapping.moveCell(source, destination);\n              this.changes.addChange(EmptyValue, source, value);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator50.e(err);\n      } finally {\n        _iterator50.f();\n      }\n    }\n  }, {\n    key: \"fixArraysAfterRemovingRows\",\n    value: function fixArraysAfterRemovingRows(sheet, rowStart, numberOfRows) {\n      this.arrayMapping.moveArrayVerticesAfterRowByRows(sheet, rowStart, -numberOfRows);\n\n      if (rowStart <= 0) {\n        return;\n      }\n\n      var _iterator51 = _createForOfIteratorHelper(this.arrayMapping.arraysInRows(RowsSpan.fromRowStartAndEnd(sheet, rowStart - 1, rowStart - 1))),\n          _step51;\n\n      try {\n        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {\n          var _step51$value = _slicedToArray(_step51.value, 2),\n              array = _step51$value[1];\n\n          if (this.isThereSpaceForArray(array)) {\n            var _iterator52 = _createForOfIteratorHelper(array.getRange().addresses(this)),\n                _step52;\n\n            try {\n              for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {\n                var address = _step52.value;\n                this.addressMapping.setCell(address, array);\n              }\n            } catch (err) {\n              _iterator52.e(err);\n            } finally {\n              _iterator52.f();\n            }\n          } else {\n            this.setNoSpaceIfArray(array);\n          }\n        }\n      } catch (err) {\n        _iterator51.e(err);\n      } finally {\n        _iterator51.f();\n      }\n    }\n  }, {\n    key: \"fixArraysAfterAddingColumn\",\n    value: function fixArraysAfterAddingColumn(sheet, columnStart, numberOfColumns) {\n      this.arrayMapping.moveArrayVerticesAfterColumnByColumns(sheet, columnStart, numberOfColumns);\n\n      if (columnStart <= 0) {\n        return;\n      }\n\n      var _iterator53 = _createForOfIteratorHelper(this.arrayMapping.arraysInCols(ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart - 1, columnStart - 1))),\n          _step53;\n\n      try {\n        for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {\n          var _step53$value = _slicedToArray(_step53.value, 2),\n              array = _step53$value[1];\n\n          var arrayRange = array.getRange();\n\n          for (var row = arrayRange.start.row; row <= arrayRange.end.row; ++row) {\n            for (var col = columnStart; col <= arrayRange.end.col; ++col) {\n              var destination = simpleCellAddress(sheet, col, row);\n              var source = simpleCellAddress(sheet, col + numberOfColumns, row);\n              var value = array.getArrayCellValue(destination);\n              this.addressMapping.moveCell(source, destination);\n              this.changes.addChange(EmptyValue, source, value);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator53.e(err);\n      } finally {\n        _iterator53.f();\n      }\n    }\n  }, {\n    key: \"fixArraysAfterRemovingColumns\",\n    value: function fixArraysAfterRemovingColumns(sheet, columnStart, numberOfColumns) {\n      this.arrayMapping.moveArrayVerticesAfterColumnByColumns(sheet, columnStart, -numberOfColumns);\n\n      if (columnStart <= 0) {\n        return;\n      }\n\n      var _iterator54 = _createForOfIteratorHelper(this.arrayMapping.arraysInCols(ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart - 1, columnStart - 1))),\n          _step54;\n\n      try {\n        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {\n          var _step54$value = _slicedToArray(_step54.value, 2),\n              array = _step54$value[1];\n\n          if (this.isThereSpaceForArray(array)) {\n            var _iterator55 = _createForOfIteratorHelper(array.getRange().addresses(this)),\n                _step55;\n\n            try {\n              for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {\n                var address = _step55.value;\n                this.addressMapping.setCell(address, array);\n              }\n            } catch (err) {\n              _iterator55.e(err);\n            } finally {\n              _iterator55.f();\n            }\n          } else {\n            this.setNoSpaceIfArray(array);\n          }\n        }\n      } catch (err) {\n        _iterator54.e(err);\n      } finally {\n        _iterator54.f();\n      }\n    }\n  }, {\n    key: \"shrinkPossibleArrayAndGetCell\",\n    value: function shrinkPossibleArrayAndGetCell(address) {\n      var vertex = this.getCell(address);\n\n      if (!(vertex instanceof ArrayVertex)) {\n        return vertex;\n      }\n\n      this.setNoSpaceIfArray(vertex);\n      return this.getCell(address);\n    }\n  }, {\n    key: \"setNoSpaceIfArray\",\n    value: function setNoSpaceIfArray(vertex) {\n      if (vertex instanceof ArrayVertex) {\n        this.shrinkArrayToCorner(vertex);\n        vertex.setNoSpace();\n      }\n    }\n  }, {\n    key: \"removeVertex\",\n    value: function removeVertex(vertex) {\n      this.removeVertexAndCleanupDependencies(vertex);\n\n      if (vertex instanceof RangeVertex) {\n        this.rangeMapping.removeRange(vertex);\n      }\n    }\n  }, {\n    key: \"mergeRangeVertices\",\n    value: function mergeRangeVertices(existingVertex, newVertex) {\n      var _this11 = this;\n\n      var adjNodesStored = this.graph.adjacentNodes(newVertex);\n      this.removeVertexAndCleanupDependencies(newVertex);\n      this.graph.softRemoveEdge(existingVertex, newVertex);\n      adjNodesStored.forEach(function (adjacentNode) {\n        if (_this11.graph.hasNode(adjacentNode)) {\n          _this11.graph.addEdge(existingVertex, adjacentNode);\n        }\n      });\n    }\n  }, {\n    key: \"removeVertexAndCleanupDependencies\",\n    value: function removeVertexAndCleanupDependencies(inputVertex) {\n      var dependencies = new Set(this.graph.removeNode(inputVertex));\n\n      while (dependencies.size > 0) {\n        var vertex = dependencies.values().next().value;\n        dependencies.delete(vertex);\n\n        if (this.graph.hasNode(vertex) && this.graph.adjacentNodesCount(vertex) === 0) {\n          if (vertex instanceof RangeVertex || vertex instanceof EmptyCellVertex) {\n            this.graph.removeNode(vertex).forEach(function (candidate) {\n              return dependencies.add(candidate);\n            });\n          }\n\n          if (vertex instanceof RangeVertex) {\n            this.rangeMapping.removeRange(vertex);\n          } else if (vertex instanceof EmptyCellVertex) {\n            this.addressMapping.removeCell(vertex.address);\n          }\n        }\n      }\n    }\n  }], [{\n    key: \"buildEmpty\",\n    value: function buildEmpty(lazilyTransformingAstService, config, functionRegistry, namedExpressions, stats) {\n      return new DependencyGraph(new AddressMapping(config.chooseAddressMappingPolicy), new RangeMapping(), new SheetMapping(config.translationPackage), new ArrayMapping(), stats, lazilyTransformingAstService, functionRegistry, namedExpressions);\n    }\n  }]);\n\n  return DependencyGraph;\n}();","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/DependencyGraph/DependencyGraph.js"],"names":["_construct","Parent","args","Class","_isNativeReflectConstruct","Reflect","construct","a","push","apply","Constructor","Function","bind","instance","_setPrototypeOf","prototype","arguments","sham","Proxy","Boolean","valueOf","call","e","o","p","Object","setPrototypeOf","__proto__","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Array","from","isArray","_arrayLikeToArray","_createForOfIteratorHelper","allowArrayLike","it","length","i","F","s","n","done","value","_e2","f","normalCompletion","didErr","err","step","next","_e3","return","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","minLen","toString","slice","constructor","name","test","len","arr2","_i","_arr","_n","_d","_s","_e","_classCallCheck","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","AbsoluteCellRange","simpleCellRange","absolutizeDependencies","CellError","ErrorType","isSimpleCellAddress","simpleCellAddress","ContentChanges","ErrorMessage","EmptyValue","getRawValue","SimpleRangeValue","collectDependencies","NamedExpressionDependency","ColumnsSpan","RowsSpan","StatType","ArrayVertex","EmptyCellVertex","FormulaCellVertex","RangeVertex","ValueCellVertex","AddressMapping","ArrayMapping","collectAddressesDependentToRange","FormulaVertex","Graph","RangeMapping","SheetMapping","DependencyGraph","addressMapping","rangeMapping","sheetMapping","arrayMapping","stats","lazilyTransformingAstService","functionRegistry","namedExpressions","_this","changes","empty","dependencyQueryAddresses","vertex","rangeDependencyQuery","map","_ref","_ref2","address","_","dependenciesResult","formulaDependencyQuery","undefined","_dependenciesResult","dependencies","dependency","namedExpressionOrPlaceholder","sheet","start","end","dependencyQueryVertices","_ref3","_ref4","v","_dependenciesResult2","fetchRange","namedExpression","fetchCell","allDeps","_this$rangeMapping$fi","findSmallerRange","range","smallerRangeVertex","restRange","graph","adjacentNodes","has","_iterator","addresses","_step","cell","getCell","formula","getAddress","getFormula","deps","setFormulaToCell","ast","size","hasVolatileFunction","hasStructuralChangeFunction","newVertex","fromAst","version","exchangeOrAddFormulaVertex","processCellDependencies","markNodeAsSpecialRecentlyChanged","markAsVolatile","markAsDependentOnStructureChange","correctInfiniteRangesDependency","getAndClearContentChanges","setParsingErrorToCell","errorVertex","shrinkPossibleArrayAndGetCell","exchangeOrAddGraphNode","setCell","setValueToCell","removeArray","getRange","oldValues","getValues","rawValue","setValues","parsedValue","setCellEmpty","emptyVertex","exchangeGraphNode","adjacentNodesCount","removeVertex","removeCell","ensureThatVertexIsNonArrayCellVertex","Error","clearRecentlyChangedVertices","clearSpecialNodesRecentlyChanged","verticesToRecompute","Set","concat","specialNodesRecentlyChanged","volatileVertices","cellDependencies","endVertex","_this2","forEach","dep","rangeVertex","setRange","addNode","isFinite","markNodeAsInfiniteRange","_this2$rangeMapping$f","addEdge","bruteForce","_iterator2","_step2","cellFromRange","removeEdge","array","getArray","_iterator3","_step3","_cellFromRange","fetchCellOrCreateEmpty","correctInfiniteRangesDependenciesByRangeVertex","sheetOfVertex","namedExpressionVertex","fetchNamedExpressionVertex","expressionName","sheetId","exchangeNode","addressFrom","addressTo","vertexFrom","vertexTo","_iterator4","infiniteRanges","_step4","infiniteRangeVertex","addressInRange","removeRows","removedRows","_this3","measure","ADJUSTING_GRAPH","_iterator5","entriesFromRowsSpan","_step5","_step5$value","_iterator6","_step6","adjacentNode","isLeftCorner","shrinkArrayToCorner","ADJUSTING_ADDRESS_MAPPING","affectedArrays","ADJUSTING_RANGES","affectedRanges","truncateRanges","row","getArrayVerticesRelatedToRanges","ADJUSTING_ARRAY_MAPPING","fixArraysAfterRemovingRows","rowStart","numberOfRows","addStructuralNodesToChangeSet","contentChanges","removeSheet","removedSheetId","_this4","arrays","_iterator7","sheetEntries","_step7","_step7$value","adr","add","_iterator10","_step10","_iterator8","values","_step8","rangesToRemove","removeRangesInSheet","_iterator9","_step9","clearSheet","_iterator11","_step11","_step11$value","_iterator12","_step12","setArrayEmpty","removeColumns","removedColumns","_this5","_iterator13","entriesFromColumnsSpan","_step13","_step13$value","_iterator14","_step14","col","fixArraysAfterRemovingColumns","columnStart","numberOfColumns","addRows","addedRows","_this6","result","moveAllRangesInSheetAfterRowByRows","fixRangesWhenAddingRows","verticesWithChangedSize","fixArraysAfterAddingRow","_iterator15","verticesFromRowsSpan","_step15","addColumns","addedColumns","_this7","moveAllRangesInSheetAfterColumnByColumns","fixRangesWhenAddingColumns","fixArraysAfterAddingColumn","_iterator16","verticesFromColumnsSpan","_step16","ensureNoArrayInRange","isFormulaArrayInRange","isThereSpaceForArray","arrayVertex","_iterator17","_step17","vertexUnderAddress","moveCells","sourceRange","toRight","toBottom","toSheet","_iterator18","addressesWithDirection","_step18","sourceAddress","targetAddress","sourceVertex","targetVertex","_iterator20","_step20","containsRange","_iterator21","_step21","_adjacentNode","_iterator19","rangeVerticesContainedInRange","_step19","_iterator22","_step22","_adjacentNode2","_iterator23","_step23","newEmptyVertex","moveRangesInsideSourceRange","arrayRange","spanFrom","width","height","_iterator24","_step24","_iterator25","_step25","nodeDependencies","_iterator26","_step26","_address","addVertex","addArrayVertex","setAddressMappingForArrayVertex","mark","arrayFormulaNodes","_iterator27","_step27","wrap","arrayFormulaNodes$","_context","prev","nodes","t0","finish","stop","rowsSpan","entriesFromRowsSpan$","_context2","delegateYield","columnsSpan","entriesFromColumnsSpan$","_context3","existsVertex","getCellValue","getScalarValue","VALUE","ScalarExpected","existsEdge","fromNode","toNode","getSheetId","sheetName","fetch","getSheetHeight","getHeight","getSheetWidth","getWidth","setArray","topSortWithScc","markNodeAsSpecial","markNodeAsChangingWithStructure","forceApplyPostponedTransformations","_iterator28","_step28","ensureRecentData","specialNodes","ranges","_this8","arrayVertices","hasNode","filter","node","rawValuesFromRange","_iterator29","_step29","rawValuesFromRange$","_context4","entriesFromRange","_iterator30","_step30","entriesFromRange$","_context5","oldNode","newNode","_this9","adjNodesStored","computeListOfValuesInRange","_iterator31","_step31","cleanAddressMappingUnderArray","_iterator32","adjacentArrayVertices","_step32","adjacentVertex","relevantDependencies","formulaDirectDependenciesToArray","rangeDirectDependenciesToArray","dependentToCorner","_iterator33","_step33","_step33$value","isArrayInternalCell","getAdjacentNodesAddresses","inputVertex","_this10","ret","castVertex","_iterator34","_step34","intersection","intersectionWith","_iterator35","_step35","_iterator36","_step36","oldValue","getArrayCellValue","addChange","REF","_a","_ref5","_ref6","formulaDependencies","_iterator37","_step37","_vertex","formulaDirectDependenciesToArray$","_context6","abrupt","_this$rangeMapping$fi2","_iterator38","_step38","rangeDirectDependenciesToArray$","_context7","_iterator39","_step39","item","adjacentArrayVertices$","_context8","_iterator40","specialNodesStructuralChanges","_step40","originalValues","rangesInSheet","_i2","_originalValues","includesRow","addedSubrangeInThatRange","rangeWithSameWidth","_iterator41","_step41","currentRangeVertex","find","newRangeVertex","addAllFromRange","_iterator42","_step42","column","_iterator43","_step43","includesColumn","subrange","rangeWithSameHeight","_iterator44","_step44","_iterator45","_step45","cellAddress","old","_iterator46","_step46","_cellAddress","formulaAddress","_iterator47","_step47","span","coordinate","_this$rangeMapping$tr","verticesToRemove","verticesToMerge","_iterator48","_step48","_step48$value","existingVertex","mergedVertex","mergeRangeVertices","_iterator49","_step49","removeVertexAndCleanupDependencies","moveArrayVerticesAfterRowByRows","_iterator50","arraysInRows","fromRowStartAndEnd","_step50","_step50$value","destination","source","moveCell","_iterator51","_step51","_step51$value","_iterator52","_step52","setNoSpaceIfArray","moveArrayVerticesAfterColumnByColumns","_iterator53","arraysInCols","fromColumnStartAndEnd","_step53","_step53$value","_iterator54","_step54","_step54$value","_iterator55","_step55","setNoSpace","removeRange","_this11","softRemoveEdge","removeNode","delete","candidate","buildEmpty","config","chooseAddressMappingPolicy","translationPackage"],"mappings":"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","sourcesContent":["function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { AbsoluteCellRange, simpleCellRange } from '../AbsoluteCellRange';\nimport { absolutizeDependencies } from '../absolutizeDependencies';\nimport { CellError, ErrorType, isSimpleCellAddress, simpleCellAddress } from '../Cell';\nimport { ContentChanges } from '../ContentChanges';\nimport { ErrorMessage } from '../error-message';\nimport { EmptyValue, getRawValue } from '../interpreter/InterpreterValue';\nimport { SimpleRangeValue } from '../interpreter/SimpleRangeValue';\nimport { collectDependencies, NamedExpressionDependency } from '../parser';\nimport { ColumnsSpan, RowsSpan } from '../Span';\nimport { StatType } from '../statistics';\nimport { ArrayVertex, EmptyCellVertex, FormulaCellVertex, RangeVertex, ValueCellVertex } from './';\nimport { AddressMapping } from './AddressMapping/AddressMapping';\nimport { ArrayMapping } from './ArrayMapping';\nimport { collectAddressesDependentToRange } from './collectAddressesDependentToRange';\nimport { FormulaVertex } from './FormulaCellVertex';\nimport { Graph } from './Graph';\nimport { RangeMapping } from './RangeMapping';\nimport { SheetMapping } from './SheetMapping';\nexport var DependencyGraph = /*#__PURE__*/function () {\n  function DependencyGraph(addressMapping, rangeMapping, sheetMapping, arrayMapping, stats, lazilyTransformingAstService, functionRegistry, namedExpressions) {\n    var _this = this;\n\n    _classCallCheck(this, DependencyGraph);\n\n    this.addressMapping = addressMapping;\n    this.rangeMapping = rangeMapping;\n    this.sheetMapping = sheetMapping;\n    this.arrayMapping = arrayMapping;\n    this.stats = stats;\n    this.lazilyTransformingAstService = lazilyTransformingAstService;\n    this.functionRegistry = functionRegistry;\n    this.namedExpressions = namedExpressions;\n    this.changes = ContentChanges.empty();\n\n    this.dependencyQueryAddresses = function (vertex) {\n      if (vertex instanceof RangeVertex) {\n        return _this.rangeDependencyQuery(vertex).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              address = _ref2[0],\n              _ = _ref2[1];\n\n          return address;\n        });\n      } else {\n        var dependenciesResult = _this.formulaDependencyQuery(vertex);\n\n        if (dependenciesResult !== undefined) {\n          var _dependenciesResult = _slicedToArray(dependenciesResult, 2),\n              address = _dependenciesResult[0],\n              dependencies = _dependenciesResult[1];\n\n          return dependencies.map(function (dependency) {\n            if (dependency instanceof NamedExpressionDependency) {\n              return _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet).address;\n            } else if (isSimpleCellAddress(dependency)) {\n              return dependency;\n            } else {\n              return simpleCellRange(dependency.start, dependency.end);\n            }\n          });\n        } else {\n          return [];\n        }\n      }\n    };\n\n    this.dependencyQueryVertices = function (vertex) {\n      if (vertex instanceof RangeVertex) {\n        return _this.rangeDependencyQuery(vertex).map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              _ = _ref4[0],\n              v = _ref4[1];\n\n          return v;\n        });\n      } else {\n        var dependenciesResult = _this.formulaDependencyQuery(vertex);\n\n        if (dependenciesResult !== undefined) {\n          var _dependenciesResult2 = _slicedToArray(dependenciesResult, 2),\n              address = _dependenciesResult2[0],\n              dependencies = _dependenciesResult2[1];\n\n          return dependencies.map(function (dependency) {\n            if (dependency instanceof AbsoluteCellRange) {\n              return _this.rangeMapping.fetchRange(dependency.start, dependency.end);\n            } else if (dependency instanceof NamedExpressionDependency) {\n              var namedExpression = _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet);\n\n              return _this.addressMapping.fetchCell(namedExpression.address);\n            } else {\n              return _this.addressMapping.fetchCell(dependency);\n            }\n          });\n        } else {\n          return [];\n        }\n      }\n    };\n\n    this.rangeDependencyQuery = function (vertex) {\n      var allDeps = [];\n\n      var _this$rangeMapping$fi = _this.rangeMapping.findSmallerRange(vertex.range),\n          smallerRangeVertex = _this$rangeMapping$fi.smallerRangeVertex,\n          restRange = _this$rangeMapping$fi.restRange; //checking whether this range was splitted by bruteForce or not\n\n\n      var range;\n\n      if (smallerRangeVertex !== undefined && _this.graph.adjacentNodes(smallerRangeVertex).has(vertex)) {\n        range = restRange;\n        allDeps.push([new AbsoluteCellRange(smallerRangeVertex.start, smallerRangeVertex.end), smallerRangeVertex]);\n      } else {\n        //did we ever need to use full range\n        range = vertex.range;\n      }\n\n      var _iterator = _createForOfIteratorHelper(range.addresses(_this)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var address = _step.value;\n\n          var cell = _this.addressMapping.getCell(address);\n\n          if (cell instanceof EmptyCellVertex) {\n            cell.address = address;\n          }\n\n          if (cell !== undefined) {\n            allDeps.push([address, cell]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return allDeps;\n    };\n\n    this.formulaDependencyQuery = function (vertex) {\n      var formula;\n      var address;\n\n      if (vertex instanceof FormulaVertex) {\n        address = vertex.getAddress(_this.lazilyTransformingAstService);\n        formula = vertex.getFormula(_this.lazilyTransformingAstService);\n      } else {\n        return undefined;\n      }\n\n      var deps = collectDependencies(formula, _this.functionRegistry);\n      return [address, absolutizeDependencies(deps, address)];\n    };\n\n    this.graph = new Graph(this.dependencyQueryVertices);\n  }\n  /**\n   * Invariants:\n   * - empty cell has associated EmptyCellVertex if and only if it is a dependency (possibly indirect, through range) to some formula\n   */\n\n\n  _createClass(DependencyGraph, [{\n    key: \"setFormulaToCell\",\n    value: function setFormulaToCell(address, ast, dependencies, size, hasVolatileFunction, hasStructuralChangeFunction) {\n      var newVertex = FormulaVertex.fromAst(ast, address, size, this.lazilyTransformingAstService.version());\n      this.exchangeOrAddFormulaVertex(newVertex);\n      this.processCellDependencies(dependencies, newVertex);\n      this.graph.markNodeAsSpecialRecentlyChanged(newVertex);\n\n      if (hasVolatileFunction) {\n        this.markAsVolatile(newVertex);\n      }\n\n      if (hasStructuralChangeFunction) {\n        this.markAsDependentOnStructureChange(newVertex);\n      }\n\n      this.correctInfiniteRangesDependency(address);\n      return this.getAndClearContentChanges();\n    }\n  }, {\n    key: \"setParsingErrorToCell\",\n    value: function setParsingErrorToCell(address, errorVertex) {\n      var vertex = this.shrinkPossibleArrayAndGetCell(address);\n      this.exchangeOrAddGraphNode(vertex, errorVertex);\n      this.addressMapping.setCell(address, errorVertex);\n      this.graph.markNodeAsSpecialRecentlyChanged(errorVertex);\n      this.correctInfiniteRangesDependency(address);\n      return this.getAndClearContentChanges();\n    }\n  }, {\n    key: \"setValueToCell\",\n    value: function setValueToCell(address, value) {\n      var vertex = this.shrinkPossibleArrayAndGetCell(address);\n\n      if (vertex instanceof ArrayVertex) {\n        this.arrayMapping.removeArray(vertex.getRange());\n      }\n\n      if (vertex instanceof ValueCellVertex) {\n        var oldValues = vertex.getValues();\n\n        if (oldValues.rawValue !== value.rawValue) {\n          vertex.setValues(value);\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } else {\n        var newVertex = new ValueCellVertex(value.parsedValue, value.rawValue);\n        this.exchangeOrAddGraphNode(vertex, newVertex);\n        this.addressMapping.setCell(address, newVertex);\n        this.graph.markNodeAsSpecialRecentlyChanged(newVertex);\n      }\n\n      this.correctInfiniteRangesDependency(address);\n      return this.getAndClearContentChanges();\n    }\n  }, {\n    key: \"setCellEmpty\",\n    value: function setCellEmpty(address) {\n      var vertex = this.shrinkPossibleArrayAndGetCell(address);\n\n      if (vertex === undefined) {\n        return ContentChanges.empty();\n      }\n\n      if (this.graph.adjacentNodes(vertex).size > 0) {\n        var emptyVertex = new EmptyCellVertex(address);\n        this.exchangeGraphNode(vertex, emptyVertex);\n\n        if (this.graph.adjacentNodesCount(emptyVertex) === 0) {\n          this.removeVertex(emptyVertex);\n          this.addressMapping.removeCell(address);\n        } else {\n          this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);\n          this.addressMapping.setCell(address, emptyVertex);\n        }\n      } else {\n        this.removeVertex(vertex);\n        this.addressMapping.removeCell(address);\n      }\n\n      return this.getAndClearContentChanges();\n    }\n  }, {\n    key: \"ensureThatVertexIsNonArrayCellVertex\",\n    value: function ensureThatVertexIsNonArrayCellVertex(vertex) {\n      if (vertex instanceof ArrayVertex) {\n        throw new Error('Illegal operation');\n      }\n    }\n  }, {\n    key: \"clearRecentlyChangedVertices\",\n    value: function clearRecentlyChangedVertices() {\n      this.graph.clearSpecialNodesRecentlyChanged();\n    }\n  }, {\n    key: \"verticesToRecompute\",\n    value: function verticesToRecompute() {\n      return new Set([].concat(_toConsumableArray(this.graph.specialNodesRecentlyChanged), _toConsumableArray(this.volatileVertices())));\n    }\n  }, {\n    key: \"processCellDependencies\",\n    value: function processCellDependencies(cellDependencies, endVertex) {\n      var _this2 = this;\n\n      cellDependencies.forEach(function (dep) {\n        if (dep instanceof AbsoluteCellRange) {\n          var range = dep;\n\n          var rangeVertex = _this2.getRange(range.start, range.end);\n\n          if (rangeVertex === undefined) {\n            rangeVertex = new RangeVertex(range);\n\n            _this2.rangeMapping.setRange(rangeVertex);\n          }\n\n          _this2.graph.addNode(rangeVertex);\n\n          if (!range.isFinite()) {\n            _this2.graph.markNodeAsInfiniteRange(rangeVertex);\n          }\n\n          var _this2$rangeMapping$f = _this2.rangeMapping.findSmallerRange(range),\n              smallerRangeVertex = _this2$rangeMapping$f.smallerRangeVertex,\n              restRange = _this2$rangeMapping$f.restRange;\n\n          if (smallerRangeVertex !== undefined) {\n            _this2.graph.addEdge(smallerRangeVertex, rangeVertex);\n\n            if (rangeVertex.bruteForce) {\n              rangeVertex.bruteForce = false;\n\n              var _iterator2 = _createForOfIteratorHelper(range.addresses(_this2)),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var cellFromRange = _step2.value;\n\n                  //if we ever switch heuristic to processing by sorted sizes, this would be unnecessary\n                  _this2.graph.removeEdge(_this2.fetchCell(cellFromRange), rangeVertex);\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } else {\n            rangeVertex.bruteForce = true;\n          }\n\n          var array = _this2.arrayMapping.getArray(restRange);\n\n          if (array !== undefined) {\n            _this2.graph.addEdge(array, rangeVertex);\n          } else {\n            var _iterator3 = _createForOfIteratorHelper(restRange.addresses(_this2)),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _cellFromRange = _step3.value;\n\n                _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(_cellFromRange), rangeVertex);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n\n          _this2.graph.addEdge(rangeVertex, endVertex);\n\n          if (range.isFinite()) {\n            _this2.correctInfiniteRangesDependenciesByRangeVertex(rangeVertex);\n          }\n        } else if (dep instanceof NamedExpressionDependency) {\n          var sheetOfVertex = endVertex.getAddress(_this2.lazilyTransformingAstService).sheet;\n\n          var namedExpressionVertex = _this2.fetchNamedExpressionVertex(dep.name, sheetOfVertex);\n\n          _this2.graph.addEdge(namedExpressionVertex, endVertex);\n        } else {\n          _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(dep), endVertex);\n        }\n      });\n    }\n  }, {\n    key: \"fetchNamedExpressionVertex\",\n    value: function fetchNamedExpressionVertex(expressionName, sheetId) {\n      var namedExpression = this.namedExpressions.namedExpressionOrPlaceholder(expressionName, sheetId);\n      return this.fetchCellOrCreateEmpty(namedExpression.address);\n    }\n  }, {\n    key: \"exchangeNode\",\n    value: function exchangeNode(addressFrom, addressTo) {\n      var vertexFrom = this.fetchCellOrCreateEmpty(addressFrom);\n      var vertexTo = this.fetchCellOrCreateEmpty(addressTo);\n      this.addressMapping.removeCell(addressFrom);\n      this.exchangeGraphNode(vertexFrom, vertexTo);\n    }\n  }, {\n    key: \"correctInfiniteRangesDependency\",\n    value: function correctInfiniteRangesDependency(address) {\n      var vertex = undefined;\n\n      var _iterator4 = _createForOfIteratorHelper(this.graph.infiniteRanges),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var range = _step4.value;\n          var infiniteRangeVertex = range;\n\n          if (infiniteRangeVertex.range.addressInRange(address)) {\n            vertex = vertex !== null && vertex !== void 0 ? vertex : this.fetchCellOrCreateEmpty(address);\n            this.graph.addEdge(vertex, infiniteRangeVertex);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"fetchCellOrCreateEmpty\",\n    value: function fetchCellOrCreateEmpty(address) {\n      var vertex = this.addressMapping.getCell(address);\n\n      if (vertex === undefined) {\n        vertex = new EmptyCellVertex(address);\n        this.graph.addNode(vertex);\n        this.addressMapping.setCell(address, vertex);\n      }\n\n      return vertex;\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(removedRows) {\n      var _this3 = this;\n\n      this.stats.measure(StatType.ADJUSTING_GRAPH, function () {\n        var _iterator5 = _createForOfIteratorHelper(_this3.addressMapping.entriesFromRowsSpan(removedRows)),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _step5$value = _slicedToArray(_step5.value, 2),\n                address = _step5$value[0],\n                vertex = _step5$value[1];\n\n            var _iterator6 = _createForOfIteratorHelper(_this3.graph.adjacentNodes(vertex)),\n                _step6;\n\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var adjacentNode = _step6.value;\n\n                _this3.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n\n            if (vertex instanceof ArrayVertex) {\n              if (vertex.isLeftCorner(address)) {\n                _this3.shrinkArrayToCorner(vertex);\n\n                _this3.arrayMapping.removeArray(vertex.getRange());\n              } else {\n                continue;\n              }\n            }\n\n            _this3.removeVertex(vertex);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this3.addressMapping.removeRows(removedRows);\n      });\n      var affectedArrays = this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var affectedRanges = _this3.truncateRanges(removedRows, function (address) {\n          return address.row;\n        });\n\n        return _this3.getArrayVerticesRelatedToRanges(affectedRanges);\n      });\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        _this3.fixArraysAfterRemovingRows(removedRows.sheet, removedRows.rowStart, removedRows.numberOfRows);\n      });\n      this.addStructuralNodesToChangeSet();\n      return {\n        affectedArrays: affectedArrays,\n        contentChanges: this.getAndClearContentChanges()\n      };\n    }\n  }, {\n    key: \"removeSheet\",\n    value: function removeSheet(removedSheetId) {\n      var _this4 = this;\n\n      var arrays = new Set();\n\n      var _iterator7 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(removedSheetId)),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n              adr = _step7$value[0],\n              vertex = _step7$value[1];\n\n          if (vertex instanceof ArrayVertex) {\n            if (arrays.has(vertex)) {\n              continue;\n            } else {\n              arrays.add(vertex);\n            }\n          }\n\n          var _iterator10 = _createForOfIteratorHelper(this.graph.adjacentNodes(vertex)),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var adjacentNode = _step10.value;\n              this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n\n          this.removeVertex(vertex);\n          this.addressMapping.removeCell(adr);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        var _iterator8 = _createForOfIteratorHelper(arrays.values()),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var array = _step8.value;\n\n            _this4.arrayMapping.removeArray(array.getRange());\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var rangesToRemove = _this4.rangeMapping.removeRangesInSheet(removedSheetId);\n\n        var _iterator9 = _createForOfIteratorHelper(rangesToRemove),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var range = _step9.value;\n\n            _this4.removeVertex(range);\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n\n        _this4.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n          _this4.addressMapping.removeSheet(removedSheetId);\n        });\n      });\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"clearSheet\",\n    value: function clearSheet(sheetId) {\n      var arrays = new Set();\n\n      var _iterator11 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(sheetId)),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _step11$value = _slicedToArray(_step11.value, 2),\n              address = _step11$value[0],\n              vertex = _step11$value[1];\n\n          if (vertex instanceof ArrayVertex) {\n            arrays.add(vertex);\n          } else {\n            this.setCellEmpty(address);\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      var _iterator12 = _createForOfIteratorHelper(arrays.values()),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var array = _step12.value;\n          this.setArrayEmpty(array);\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(removedColumns) {\n      var _this5 = this;\n\n      this.stats.measure(StatType.ADJUSTING_GRAPH, function () {\n        var _iterator13 = _createForOfIteratorHelper(_this5.addressMapping.entriesFromColumnsSpan(removedColumns)),\n            _step13;\n\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var _step13$value = _slicedToArray(_step13.value, 2),\n                address = _step13$value[0],\n                vertex = _step13$value[1];\n\n            var _iterator14 = _createForOfIteratorHelper(_this5.graph.adjacentNodes(vertex)),\n                _step14;\n\n            try {\n              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n                var adjacentNode = _step14.value;\n\n                _this5.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n              }\n            } catch (err) {\n              _iterator14.e(err);\n            } finally {\n              _iterator14.f();\n            }\n\n            if (vertex instanceof ArrayVertex) {\n              if (vertex.isLeftCorner(address)) {\n                _this5.shrinkArrayToCorner(vertex);\n\n                _this5.arrayMapping.removeArray(vertex.getRange());\n              } else {\n                continue;\n              }\n            }\n\n            _this5.removeVertex(vertex);\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n      });\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this5.addressMapping.removeColumns(removedColumns);\n      });\n      var affectedArrays = this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var affectedRanges = _this5.truncateRanges(removedColumns, function (address) {\n          return address.col;\n        });\n\n        return _this5.getArrayVerticesRelatedToRanges(affectedRanges);\n      });\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        return _this5.fixArraysAfterRemovingColumns(removedColumns.sheet, removedColumns.columnStart, removedColumns.numberOfColumns);\n      });\n      this.addStructuralNodesToChangeSet();\n      return {\n        affectedArrays: affectedArrays,\n        contentChanges: this.getAndClearContentChanges()\n      };\n    }\n  }, {\n    key: \"addRows\",\n    value: function addRows(addedRows) {\n      var _this6 = this;\n\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this6.addressMapping.addRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n      var affectedArrays = this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var result = _this6.rangeMapping.moveAllRangesInSheetAfterRowByRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n\n        _this6.fixRangesWhenAddingRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n\n        return _this6.getArrayVerticesRelatedToRanges(result.verticesWithChangedSize);\n      });\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        _this6.fixArraysAfterAddingRow(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);\n      });\n\n      var _iterator15 = _createForOfIteratorHelper(this.addressMapping.verticesFromRowsSpan(addedRows)),\n          _step15;\n\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var vertex = _step15.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n      return {\n        affectedArrays: affectedArrays\n      };\n    }\n  }, {\n    key: \"addColumns\",\n    value: function addColumns(addedColumns) {\n      var _this7 = this;\n\n      this.stats.measure(StatType.ADJUSTING_ADDRESS_MAPPING, function () {\n        _this7.addressMapping.addColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n      var affectedArrays = this.stats.measure(StatType.ADJUSTING_RANGES, function () {\n        var result = _this7.rangeMapping.moveAllRangesInSheetAfterColumnByColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n\n        _this7.fixRangesWhenAddingColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n\n        return _this7.getArrayVerticesRelatedToRanges(result.verticesWithChangedSize);\n      });\n      this.stats.measure(StatType.ADJUSTING_ARRAY_MAPPING, function () {\n        return _this7.fixArraysAfterAddingColumn(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);\n      });\n\n      var _iterator16 = _createForOfIteratorHelper(this.addressMapping.verticesFromColumnsSpan(addedColumns)),\n          _step16;\n\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var vertex = _step16.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n\n      this.addStructuralNodesToChangeSet();\n      return {\n        affectedArrays: affectedArrays,\n        contentChanges: this.getAndClearContentChanges()\n      };\n    }\n  }, {\n    key: \"ensureNoArrayInRange\",\n    value: function ensureNoArrayInRange(range) {\n      if (this.arrayMapping.isFormulaArrayInRange(range)) {\n        throw Error('It is not possible to move / replace cells with array');\n      }\n    }\n  }, {\n    key: \"isThereSpaceForArray\",\n    value: function isThereSpaceForArray(arrayVertex) {\n      var _iterator17 = _createForOfIteratorHelper(arrayVertex.getRange().addresses(this)),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var address = _step17.value;\n          var vertexUnderAddress = this.addressMapping.getCell(address);\n\n          if (vertexUnderAddress !== undefined && !(vertexUnderAddress instanceof EmptyCellVertex) && vertexUnderAddress !== arrayVertex) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"moveCells\",\n    value: function moveCells(sourceRange, toRight, toBottom, toSheet) {\n      var _iterator18 = _createForOfIteratorHelper(sourceRange.addressesWithDirection(toRight, toBottom, this)),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var sourceAddress = _step18.value;\n          var targetAddress = simpleCellAddress(toSheet, sourceAddress.col + toRight, sourceAddress.row + toBottom);\n          var sourceVertex = this.addressMapping.getCell(sourceAddress);\n          var targetVertex = this.addressMapping.getCell(targetAddress);\n          this.addressMapping.removeCell(sourceAddress);\n\n          if (sourceVertex !== undefined) {\n            this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);\n            this.addressMapping.setCell(targetAddress, sourceVertex);\n            var emptyVertex = undefined;\n\n            var _iterator20 = _createForOfIteratorHelper(this.graph.adjacentNodes(sourceVertex)),\n                _step20;\n\n            try {\n              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n                var adjacentNode = _step20.value;\n\n                if (adjacentNode instanceof RangeVertex && !sourceRange.containsRange(adjacentNode.range)) {\n                  emptyVertex = emptyVertex !== null && emptyVertex !== void 0 ? emptyVertex : this.fetchCellOrCreateEmpty(sourceAddress);\n                  this.graph.addEdge(emptyVertex, adjacentNode);\n                  this.graph.removeEdge(sourceVertex, adjacentNode);\n                }\n              }\n            } catch (err) {\n              _iterator20.e(err);\n            } finally {\n              _iterator20.f();\n            }\n\n            if (emptyVertex) {\n              this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);\n              this.addressMapping.setCell(sourceAddress, emptyVertex);\n            }\n          }\n\n          if (targetVertex !== undefined) {\n            if (sourceVertex === undefined) {\n              this.addressMapping.removeCell(targetAddress);\n            }\n\n            var _iterator21 = _createForOfIteratorHelper(this.graph.adjacentNodes(targetVertex)),\n                _step21;\n\n            try {\n              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                var _adjacentNode = _step21.value;\n                sourceVertex = sourceVertex !== null && sourceVertex !== void 0 ? sourceVertex : this.fetchCellOrCreateEmpty(targetAddress);\n                this.graph.addEdge(sourceVertex, _adjacentNode);\n                this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);\n              }\n            } catch (err) {\n              _iterator21.e(err);\n            } finally {\n              _iterator21.f();\n            }\n\n            this.removeVertex(targetVertex);\n          }\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n\n      var _iterator19 = _createForOfIteratorHelper(this.rangeMapping.rangeVerticesContainedInRange(sourceRange)),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var rangeVertex = _step19.value;\n\n          var _iterator22 = _createForOfIteratorHelper(this.graph.adjacentNodes(rangeVertex)),\n              _step22;\n\n          try {\n            for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n              var _adjacentNode2 = _step22.value;\n\n              if (_adjacentNode2 instanceof RangeVertex && !sourceRange.containsRange(_adjacentNode2.range)) {\n                this.graph.removeEdge(rangeVertex, _adjacentNode2);\n\n                var _iterator23 = _createForOfIteratorHelper(rangeVertex.range.addresses(this)),\n                    _step23;\n\n                try {\n                  for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n                    var address = _step23.value;\n                    var newEmptyVertex = this.fetchCellOrCreateEmpty(address);\n                    this.graph.addEdge(newEmptyVertex, _adjacentNode2);\n                    this.addressMapping.setCell(address, newEmptyVertex);\n                    this.graph.markNodeAsSpecialRecentlyChanged(newEmptyVertex);\n                  }\n                } catch (err) {\n                  _iterator23.e(err);\n                } finally {\n                  _iterator23.f();\n                }\n              }\n            }\n          } catch (err) {\n            _iterator22.e(err);\n          } finally {\n            _iterator22.f();\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      this.rangeMapping.moveRangesInsideSourceRange(sourceRange, toRight, toBottom, toSheet);\n    }\n  }, {\n    key: \"setArrayEmpty\",\n    value: function setArrayEmpty(arrayVertex) {\n      var arrayRange = AbsoluteCellRange.spanFrom(arrayVertex.getAddress(this.lazilyTransformingAstService), arrayVertex.width, arrayVertex.height);\n      var adjacentNodes = this.graph.adjacentNodes(arrayVertex);\n\n      var _iterator24 = _createForOfIteratorHelper(arrayRange.addresses(this)),\n          _step24;\n\n      try {\n        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n          var address = _step24.value;\n          this.addressMapping.removeCell(address);\n        }\n      } catch (err) {\n        _iterator24.e(err);\n      } finally {\n        _iterator24.f();\n      }\n\n      var _iterator25 = _createForOfIteratorHelper(adjacentNodes.values()),\n          _step25;\n\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var adjacentNode = _step25.value;\n          var nodeDependencies = collectAddressesDependentToRange(this.functionRegistry, adjacentNode, arrayVertex.getRange(), this.lazilyTransformingAstService, this);\n\n          var _iterator26 = _createForOfIteratorHelper(nodeDependencies),\n              _step26;\n\n          try {\n            for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n              var _address = _step26.value;\n              var vertex = this.fetchCellOrCreateEmpty(_address);\n              this.graph.addEdge(vertex, adjacentNode);\n            }\n          } catch (err) {\n            _iterator26.e(err);\n          } finally {\n            _iterator26.f();\n          }\n\n          if (nodeDependencies.length > 0) {\n            this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);\n          }\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n\n      this.removeVertex(arrayVertex);\n      this.arrayMapping.removeArray(arrayVertex.getRange());\n    }\n  }, {\n    key: \"addVertex\",\n    value: function addVertex(address, vertex) {\n      this.graph.addNode(vertex);\n      this.addressMapping.setCell(address, vertex);\n    }\n  }, {\n    key: \"addArrayVertex\",\n    value: function addArrayVertex(address, vertex) {\n      this.graph.addNode(vertex);\n      this.setAddressMappingForArrayVertex(vertex, address);\n    }\n  }, {\n    key: \"arrayFormulaNodes\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function arrayFormulaNodes() {\n      var _iterator27, _step27, vertex;\n\n      return regeneratorRuntime.wrap(function arrayFormulaNodes$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator27 = _createForOfIteratorHelper(this.graph.nodes);\n              _context.prev = 1;\n\n              _iterator27.s();\n\n            case 3:\n              if ((_step27 = _iterator27.n()).done) {\n                _context.next = 10;\n                break;\n              }\n\n              vertex = _step27.value;\n\n              if (!(vertex instanceof ArrayVertex)) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 8;\n              return vertex;\n\n            case 8:\n              _context.next = 3;\n              break;\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator27.e(_context.t0);\n\n            case 15:\n              _context.prev = 15;\n\n              _iterator27.f();\n\n              return _context.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, arrayFormulaNodes, this, [[1, 12, 15, 18]]);\n    })\n  }, {\n    key: \"entriesFromRowsSpan\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromRowsSpan(rowsSpan) {\n      return regeneratorRuntime.wrap(function entriesFromRowsSpan$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.delegateYield(this.addressMapping.entriesFromRowsSpan(rowsSpan), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, entriesFromRowsSpan, this);\n    })\n  }, {\n    key: \"entriesFromColumnsSpan\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromColumnsSpan(columnsSpan) {\n      return regeneratorRuntime.wrap(function entriesFromColumnsSpan$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.delegateYield(this.addressMapping.entriesFromColumnsSpan(columnsSpan), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, entriesFromColumnsSpan, this);\n    })\n  }, {\n    key: \"existsVertex\",\n    value: function existsVertex(address) {\n      return this.addressMapping.has(address);\n    }\n  }, {\n    key: \"fetchCell\",\n    value: function fetchCell(address) {\n      return this.addressMapping.fetchCell(address);\n    }\n  }, {\n    key: \"getCell\",\n    value: function getCell(address) {\n      return this.addressMapping.getCell(address);\n    }\n  }, {\n    key: \"getCellValue\",\n    value: function getCellValue(address) {\n      return this.addressMapping.getCellValue(address);\n    }\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue(address) {\n      return this.addressMapping.getRawValue(address);\n    }\n  }, {\n    key: \"getScalarValue\",\n    value: function getScalarValue(address) {\n      var value = this.addressMapping.getCellValue(address);\n\n      if (value instanceof SimpleRangeValue) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.ScalarExpected);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"existsEdge\",\n    value: function existsEdge(fromNode, toNode) {\n      return this.graph.existsEdge(fromNode, toNode);\n    }\n  }, {\n    key: \"getSheetId\",\n    value: function getSheetId(sheetName) {\n      return this.sheetMapping.fetch(sheetName);\n    }\n  }, {\n    key: \"getSheetHeight\",\n    value: function getSheetHeight(sheet) {\n      return this.addressMapping.getHeight(sheet);\n    }\n  }, {\n    key: \"getSheetWidth\",\n    value: function getSheetWidth(sheet) {\n      return this.addressMapping.getWidth(sheet);\n    }\n  }, {\n    key: \"getArray\",\n    value: function getArray(range) {\n      return this.arrayMapping.getArray(range);\n    }\n  }, {\n    key: \"setArray\",\n    value: function setArray(range, vertex) {\n      this.arrayMapping.setArray(range, vertex);\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(start, end) {\n      return this.rangeMapping.getRange(start, end);\n    }\n  }, {\n    key: \"topSortWithScc\",\n    value: function topSortWithScc() {\n      return this.graph.topSortWithScc();\n    }\n  }, {\n    key: \"markAsVolatile\",\n    value: function markAsVolatile(vertex) {\n      this.graph.markNodeAsSpecial(vertex);\n    }\n  }, {\n    key: \"markAsDependentOnStructureChange\",\n    value: function markAsDependentOnStructureChange(vertex) {\n      this.graph.markNodeAsChangingWithStructure(vertex);\n    }\n  }, {\n    key: \"forceApplyPostponedTransformations\",\n    value: function forceApplyPostponedTransformations() {\n      var _iterator28 = _createForOfIteratorHelper(this.graph.nodes.values()),\n          _step28;\n\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var vertex = _step28.value;\n\n          if (vertex instanceof FormulaCellVertex) {\n            vertex.ensureRecentData(this.lazilyTransformingAstService);\n          }\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n    }\n  }, {\n    key: \"volatileVertices\",\n    value: function volatileVertices() {\n      return this.graph.specialNodes;\n    }\n  }, {\n    key: \"getArrayVerticesRelatedToRanges\",\n    value: function getArrayVerticesRelatedToRanges(ranges) {\n      var _this8 = this;\n\n      var arrayVertices = ranges.map(function (range) {\n        if (_this8.graph.hasNode(range)) {\n          return Array.from(_this8.graph.adjacentNodes(range)).filter(function (node) {\n            return node instanceof ArrayVertex;\n          });\n        } else {\n          return [];\n        }\n      });\n      return _construct(Set, _toConsumableArray(arrayVertices));\n    }\n  }, {\n    key: \"rawValuesFromRange\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function rawValuesFromRange(range) {\n      var _iterator29, _step29, address, value;\n\n      return regeneratorRuntime.wrap(function rawValuesFromRange$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iterator29 = _createForOfIteratorHelper(range.addresses(this));\n              _context4.prev = 1;\n\n              _iterator29.s();\n\n            case 3:\n              if ((_step29 = _iterator29.n()).done) {\n                _context4.next = 11;\n                break;\n              }\n\n              address = _step29.value;\n              value = this.getScalarValue(address);\n\n              if (!(value !== EmptyValue)) {\n                _context4.next = 9;\n                break;\n              }\n\n              _context4.next = 9;\n              return [getRawValue(value), address];\n\n            case 9:\n              _context4.next = 3;\n              break;\n\n            case 11:\n              _context4.next = 16;\n              break;\n\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](1);\n\n              _iterator29.e(_context4.t0);\n\n            case 16:\n              _context4.prev = 16;\n\n              _iterator29.f();\n\n              return _context4.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, rawValuesFromRange, this, [[1, 13, 16, 19]]);\n    })\n  }, {\n    key: \"entriesFromRange\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromRange(range) {\n      var _iterator30, _step30, address;\n\n      return regeneratorRuntime.wrap(function entriesFromRange$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _iterator30 = _createForOfIteratorHelper(range.addresses(this));\n              _context5.prev = 1;\n\n              _iterator30.s();\n\n            case 3:\n              if ((_step30 = _iterator30.n()).done) {\n                _context5.next = 9;\n                break;\n              }\n\n              address = _step30.value;\n              _context5.next = 7;\n              return [address, this.getCell(address)];\n\n            case 7:\n              _context5.next = 3;\n              break;\n\n            case 9:\n              _context5.next = 14;\n              break;\n\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](1);\n\n              _iterator30.e(_context5.t0);\n\n            case 14:\n              _context5.prev = 14;\n\n              _iterator30.f();\n\n              return _context5.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, entriesFromRange, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"exchangeGraphNode\",\n    value: function exchangeGraphNode(oldNode, newNode) {\n      var _this9 = this;\n\n      this.graph.addNode(newNode);\n      var adjNodesStored = this.graph.adjacentNodes(oldNode);\n      this.removeVertex(oldNode);\n      adjNodesStored.forEach(function (adjacentNode) {\n        if (_this9.graph.hasNode(adjacentNode)) {\n          _this9.graph.addEdge(newNode, adjacentNode);\n        }\n      });\n    }\n  }, {\n    key: \"exchangeOrAddGraphNode\",\n    value: function exchangeOrAddGraphNode(oldNode, newNode) {\n      if (oldNode) {\n        this.exchangeGraphNode(oldNode, newNode);\n      } else {\n        this.graph.addNode(newNode);\n      }\n    }\n  }, {\n    key: \"computeListOfValuesInRange\",\n    value: function computeListOfValuesInRange(range) {\n      var values = [];\n\n      var _iterator31 = _createForOfIteratorHelper(range.addresses(this)),\n          _step31;\n\n      try {\n        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n          var cellFromRange = _step31.value;\n          var value = this.getScalarValue(cellFromRange);\n          values.push(value);\n        }\n      } catch (err) {\n        _iterator31.e(err);\n      } finally {\n        _iterator31.f();\n      }\n\n      return values;\n    }\n  }, {\n    key: \"shrinkArrayToCorner\",\n    value: function shrinkArrayToCorner(array) {\n      this.cleanAddressMappingUnderArray(array);\n\n      var _iterator32 = _createForOfIteratorHelper(this.adjacentArrayVertices(array)),\n          _step32;\n\n      try {\n        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n          var adjacentVertex = _step32.value;\n          var relevantDependencies = void 0;\n\n          if (adjacentVertex instanceof FormulaVertex) {\n            relevantDependencies = this.formulaDirectDependenciesToArray(adjacentVertex, array);\n          } else {\n            relevantDependencies = this.rangeDirectDependenciesToArray(adjacentVertex, array);\n          }\n\n          var dependentToCorner = false;\n\n          var _iterator33 = _createForOfIteratorHelper(relevantDependencies),\n              _step33;\n\n          try {\n            for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n              var _step33$value = _slicedToArray(_step33.value, 2),\n                  address = _step33$value[0],\n                  vertex = _step33$value[1];\n\n              if (array.isLeftCorner(address)) {\n                dependentToCorner = true;\n              }\n\n              this.graph.addEdge(vertex, adjacentVertex);\n              this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n            }\n          } catch (err) {\n            _iterator33.e(err);\n          } finally {\n            _iterator33.f();\n          }\n\n          if (!dependentToCorner) {\n            this.graph.removeEdge(array, adjacentVertex);\n          }\n        }\n      } catch (err) {\n        _iterator32.e(err);\n      } finally {\n        _iterator32.f();\n      }\n\n      this.graph.markNodeAsSpecialRecentlyChanged(array);\n    }\n  }, {\n    key: \"isArrayInternalCell\",\n    value: function isArrayInternalCell(address) {\n      var vertex = this.getCell(address);\n      return vertex instanceof ArrayVertex && !vertex.isLeftCorner(address);\n    }\n  }, {\n    key: \"getAndClearContentChanges\",\n    value: function getAndClearContentChanges() {\n      var changes = this.changes;\n      this.changes = ContentChanges.empty();\n      return changes;\n    }\n  }, {\n    key: \"getAdjacentNodesAddresses\",\n    value: function getAdjacentNodesAddresses(inputVertex) {\n      var _this10 = this;\n\n      var deps = this.graph.adjacentNodes(inputVertex);\n      var ret = [];\n      deps.forEach(function (vertex) {\n        var castVertex = vertex;\n\n        if (castVertex instanceof RangeVertex) {\n          ret.push(simpleCellRange(castVertex.start, castVertex.end));\n        } else {\n          ret.push(castVertex.getAddress(_this10.lazilyTransformingAstService));\n        }\n      });\n      return ret;\n    }\n  }, {\n    key: \"correctInfiniteRangesDependenciesByRangeVertex\",\n    value: function correctInfiniteRangesDependenciesByRangeVertex(vertex) {\n      var _iterator34 = _createForOfIteratorHelper(this.graph.infiniteRanges),\n          _step34;\n\n      try {\n        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n          var range = _step34.value;\n          var infiniteRangeVertex = range;\n          var intersection = vertex.range.intersectionWith(infiniteRangeVertex.range);\n\n          if (intersection === undefined) {\n            continue;\n          }\n\n          var _iterator35 = _createForOfIteratorHelper(intersection.addresses(this)),\n              _step35;\n\n          try {\n            for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n              var address = _step35.value;\n              this.graph.addEdge(this.fetchCellOrCreateEmpty(address), range);\n            }\n          } catch (err) {\n            _iterator35.e(err);\n          } finally {\n            _iterator35.f();\n          }\n        }\n      } catch (err) {\n        _iterator34.e(err);\n      } finally {\n        _iterator34.f();\n      }\n    }\n  }, {\n    key: \"cleanAddressMappingUnderArray\",\n    value: function cleanAddressMappingUnderArray(vertex) {\n      var arrayRange = vertex.getRange();\n\n      var _iterator36 = _createForOfIteratorHelper(arrayRange.addresses(this)),\n          _step36;\n\n      try {\n        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n          var address = _step36.value;\n          var oldValue = vertex.getArrayCellValue(address);\n\n          if (this.getCell(address) === vertex) {\n            if (vertex.isLeftCorner(address)) {\n              this.changes.addChange(new CellError(ErrorType.REF), address, oldValue);\n            } else {\n              this.addressMapping.removeCell(address);\n              this.changes.addChange(EmptyValue, address, oldValue);\n            }\n          } else {\n            this.changes.addChange(EmptyValue, address, oldValue);\n          }\n        }\n      } catch (err) {\n        _iterator36.e(err);\n      } finally {\n        _iterator36.f();\n      }\n    }\n  }, {\n    key: \"formulaDirectDependenciesToArray\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function formulaDirectDependenciesToArray(vertex, array) {\n      var _a, _ref5, _ref6, formulaDependencies, _iterator37, _step37, dependency, _vertex;\n\n      return regeneratorRuntime.wrap(function formulaDirectDependenciesToArray$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _ref5 = (_a = this.formulaDependencyQuery(vertex)) !== null && _a !== void 0 ? _a : [], _ref6 = _slicedToArray(_ref5, 2), formulaDependencies = _ref6[1];\n\n              if (!(formulaDependencies === undefined)) {\n                _context6.next = 3;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 3:\n              _iterator37 = _createForOfIteratorHelper(formulaDependencies);\n              _context6.prev = 4;\n\n              _iterator37.s();\n\n            case 6:\n              if ((_step37 = _iterator37.n()).done) {\n                _context6.next = 16;\n                break;\n              }\n\n              dependency = _step37.value;\n\n              if (!(dependency instanceof NamedExpressionDependency || dependency instanceof AbsoluteCellRange)) {\n                _context6.next = 10;\n                break;\n              }\n\n              return _context6.abrupt(\"continue\", 14);\n\n            case 10:\n              if (!array.getRange().addressInRange(dependency)) {\n                _context6.next = 14;\n                break;\n              }\n\n              _vertex = this.fetchCellOrCreateEmpty(dependency);\n              _context6.next = 14;\n              return [dependency, _vertex];\n\n            case 14:\n              _context6.next = 6;\n              break;\n\n            case 16:\n              _context6.next = 21;\n              break;\n\n            case 18:\n              _context6.prev = 18;\n              _context6.t0 = _context6[\"catch\"](4);\n\n              _iterator37.e(_context6.t0);\n\n            case 21:\n              _context6.prev = 21;\n\n              _iterator37.f();\n\n              return _context6.finish(21);\n\n            case 24:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, formulaDirectDependenciesToArray, this, [[4, 18, 21, 24]]);\n    })\n  }, {\n    key: \"rangeDirectDependenciesToArray\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function rangeDirectDependenciesToArray(vertex, array) {\n      var _this$rangeMapping$fi2, range, _iterator38, _step38, address, cell;\n\n      return regeneratorRuntime.wrap(function rangeDirectDependenciesToArray$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _this$rangeMapping$fi2 = this.rangeMapping.findSmallerRange(vertex.range), range = _this$rangeMapping$fi2.restRange;\n              _iterator38 = _createForOfIteratorHelper(range.addresses(this));\n              _context7.prev = 2;\n\n              _iterator38.s();\n\n            case 4:\n              if ((_step38 = _iterator38.n()).done) {\n                _context7.next = 12;\n                break;\n              }\n\n              address = _step38.value;\n\n              if (!array.getRange().addressInRange(address)) {\n                _context7.next = 10;\n                break;\n              }\n\n              cell = this.fetchCellOrCreateEmpty(address);\n              _context7.next = 10;\n              return [address, cell];\n\n            case 10:\n              _context7.next = 4;\n              break;\n\n            case 12:\n              _context7.next = 17;\n              break;\n\n            case 14:\n              _context7.prev = 14;\n              _context7.t0 = _context7[\"catch\"](2);\n\n              _iterator38.e(_context7.t0);\n\n            case 17:\n              _context7.prev = 17;\n\n              _iterator38.f();\n\n              return _context7.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, rangeDirectDependenciesToArray, this, [[2, 14, 17, 20]]);\n    })\n  }, {\n    key: \"adjacentArrayVertices\",\n    value: /*#__PURE__*/regeneratorRuntime.mark(function adjacentArrayVertices(vertex) {\n      var adjacentNodes, _iterator39, _step39, item;\n\n      return regeneratorRuntime.wrap(function adjacentArrayVertices$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              adjacentNodes = this.graph.adjacentNodes(vertex);\n              _iterator39 = _createForOfIteratorHelper(adjacentNodes);\n              _context8.prev = 2;\n\n              _iterator39.s();\n\n            case 4:\n              if ((_step39 = _iterator39.n()).done) {\n                _context8.next = 11;\n                break;\n              }\n\n              item = _step39.value;\n\n              if (!(item instanceof FormulaVertex || item instanceof RangeVertex)) {\n                _context8.next = 9;\n                break;\n              }\n\n              _context8.next = 9;\n              return item;\n\n            case 9:\n              _context8.next = 4;\n              break;\n\n            case 11:\n              _context8.next = 16;\n              break;\n\n            case 13:\n              _context8.prev = 13;\n              _context8.t0 = _context8[\"catch\"](2);\n\n              _iterator39.e(_context8.t0);\n\n            case 16:\n              _context8.prev = 16;\n\n              _iterator39.f();\n\n              return _context8.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, adjacentArrayVertices, this, [[2, 13, 16, 19]]);\n    })\n  }, {\n    key: \"addStructuralNodesToChangeSet\",\n    value: function addStructuralNodesToChangeSet() {\n      var _iterator40 = _createForOfIteratorHelper(this.graph.specialNodesStructuralChanges),\n          _step40;\n\n      try {\n        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n          var vertex = _step40.value;\n          this.graph.markNodeAsSpecialRecentlyChanged(vertex);\n        }\n      } catch (err) {\n        _iterator40.e(err);\n      } finally {\n        _iterator40.f();\n      }\n    }\n  }, {\n    key: \"fixRangesWhenAddingRows\",\n    value: function fixRangesWhenAddingRows(sheet, row, numberOfRows) {\n      var originalValues = Array.from(this.rangeMapping.rangesInSheet(sheet));\n\n      for (var _i2 = 0, _originalValues = originalValues; _i2 < _originalValues.length; _i2++) {\n        var rangeVertex = _originalValues[_i2];\n\n        if (rangeVertex.range.includesRow(row + numberOfRows)) {\n          if (rangeVertex.bruteForce) {\n            var addedSubrangeInThatRange = rangeVertex.range.rangeWithSameWidth(row, numberOfRows);\n\n            var _iterator41 = _createForOfIteratorHelper(addedSubrangeInThatRange.addresses(this)),\n                _step41;\n\n            try {\n              for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n                var address = _step41.value;\n                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);\n              }\n            } catch (err) {\n              _iterator41.e(err);\n            } finally {\n              _iterator41.f();\n            }\n          } else {\n            var currentRangeVertex = rangeVertex;\n            var find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);\n\n            if (find.smallerRangeVertex !== undefined) {\n              continue;\n            }\n\n            while (find.smallerRangeVertex === undefined) {\n              var newRangeVertex = new RangeVertex(AbsoluteCellRange.spanFrom(currentRangeVertex.range.start, currentRangeVertex.range.width(), currentRangeVertex.range.height() - 1));\n              this.rangeMapping.setRange(newRangeVertex);\n              this.graph.addNode(newRangeVertex);\n              var restRange = new AbsoluteCellRange(simpleCellAddress(currentRangeVertex.range.start.sheet, currentRangeVertex.range.start.col, currentRangeVertex.range.end.row), currentRangeVertex.range.end);\n              this.addAllFromRange(restRange, currentRangeVertex);\n              this.graph.addEdge(newRangeVertex, currentRangeVertex);\n              currentRangeVertex = newRangeVertex;\n              find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);\n            }\n\n            this.graph.addEdge(find.smallerRangeVertex, currentRangeVertex);\n            this.addAllFromRange(find.restRange, currentRangeVertex);\n            this.graph.removeEdge(find.smallerRangeVertex, rangeVertex);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"addAllFromRange\",\n    value: function addAllFromRange(range, vertex) {\n      var _iterator42 = _createForOfIteratorHelper(range.addresses(this)),\n          _step42;\n\n      try {\n        for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {\n          var address = _step42.value;\n          this.graph.addEdge(this.fetchCellOrCreateEmpty(address), vertex);\n        }\n      } catch (err) {\n        _iterator42.e(err);\n      } finally {\n        _iterator42.f();\n      }\n    }\n  }, {\n    key: \"fixRangesWhenAddingColumns\",\n    value: function fixRangesWhenAddingColumns(sheet, column, numberOfColumns) {\n      var _iterator43 = _createForOfIteratorHelper(this.rangeMapping.rangesInSheet(sheet)),\n          _step43;\n\n      try {\n        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n          var rangeVertex = _step43.value;\n\n          if (rangeVertex.range.includesColumn(column + numberOfColumns)) {\n            var subrange = void 0;\n\n            if (rangeVertex.bruteForce) {\n              subrange = rangeVertex.range.rangeWithSameHeight(column, numberOfColumns);\n            } else {\n              subrange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheet, column, rangeVertex.range.end.row), numberOfColumns, 1);\n            }\n\n            var _iterator44 = _createForOfIteratorHelper(subrange.addresses(this)),\n                _step44;\n\n            try {\n              for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {\n                var address = _step44.value;\n                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);\n              }\n            } catch (err) {\n              _iterator44.e(err);\n            } finally {\n              _iterator44.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator43.e(err);\n      } finally {\n        _iterator43.f();\n      }\n    }\n  }, {\n    key: \"exchangeOrAddFormulaVertex\",\n    value: function exchangeOrAddFormulaVertex(vertex) {\n      var address = vertex.getAddress(this.lazilyTransformingAstService);\n      var range = AbsoluteCellRange.spanFrom(address, vertex.width, vertex.height);\n      var oldNode = this.shrinkPossibleArrayAndGetCell(address);\n\n      if (vertex instanceof ArrayVertex) {\n        this.setArray(range, vertex);\n      }\n\n      this.exchangeOrAddGraphNode(oldNode, vertex);\n      this.addressMapping.setCell(address, vertex);\n\n      if (vertex instanceof ArrayVertex) {\n        if (!this.isThereSpaceForArray(vertex)) {\n          return;\n        }\n\n        var _iterator45 = _createForOfIteratorHelper(range.addresses(this)),\n            _step45;\n\n        try {\n          for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n            var cellAddress = _step45.value;\n\n            if (vertex.isLeftCorner(cellAddress)) {\n              continue;\n            }\n\n            var old = this.getCell(cellAddress);\n            this.exchangeOrAddGraphNode(old, vertex);\n          }\n        } catch (err) {\n          _iterator45.e(err);\n        } finally {\n          _iterator45.f();\n        }\n      }\n\n      var _iterator46 = _createForOfIteratorHelper(range.addresses(this)),\n          _step46;\n\n      try {\n        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n          var _cellAddress = _step46.value;\n          this.addressMapping.setCell(_cellAddress, vertex);\n        }\n      } catch (err) {\n        _iterator46.e(err);\n      } finally {\n        _iterator46.f();\n      }\n    }\n  }, {\n    key: \"setAddressMappingForArrayVertex\",\n    value: function setAddressMappingForArrayVertex(vertex, formulaAddress) {\n      this.addressMapping.setCell(formulaAddress, vertex);\n\n      if (!(vertex instanceof ArrayVertex)) {\n        return;\n      }\n\n      var range = AbsoluteCellRange.spanFrom(formulaAddress, vertex.width, vertex.height);\n      this.setArray(range, vertex);\n\n      if (!this.isThereSpaceForArray(vertex)) {\n        return;\n      }\n\n      var _iterator47 = _createForOfIteratorHelper(range.addresses(this)),\n          _step47;\n\n      try {\n        for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n          var address = _step47.value;\n          this.addressMapping.setCell(address, vertex);\n        }\n      } catch (err) {\n        _iterator47.e(err);\n      } finally {\n        _iterator47.f();\n      }\n    }\n  }, {\n    key: \"truncateRanges\",\n    value: function truncateRanges(span, coordinate) {\n      var _this$rangeMapping$tr = this.rangeMapping.truncateRanges(span, coordinate),\n          verticesToRemove = _this$rangeMapping$tr.verticesToRemove,\n          verticesToMerge = _this$rangeMapping$tr.verticesToMerge,\n          verticesWithChangedSize = _this$rangeMapping$tr.verticesWithChangedSize;\n\n      var _iterator48 = _createForOfIteratorHelper(verticesToMerge),\n          _step48;\n\n      try {\n        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n          var _step48$value = _slicedToArray(_step48.value, 2),\n              existingVertex = _step48$value[0],\n              mergedVertex = _step48$value[1];\n\n          this.mergeRangeVertices(existingVertex, mergedVertex);\n        }\n      } catch (err) {\n        _iterator48.e(err);\n      } finally {\n        _iterator48.f();\n      }\n\n      var _iterator49 = _createForOfIteratorHelper(verticesToRemove),\n          _step49;\n\n      try {\n        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n          var rangeVertex = _step49.value;\n          this.removeVertexAndCleanupDependencies(rangeVertex);\n        }\n      } catch (err) {\n        _iterator49.e(err);\n      } finally {\n        _iterator49.f();\n      }\n\n      return verticesWithChangedSize;\n    }\n  }, {\n    key: \"fixArraysAfterAddingRow\",\n    value: function fixArraysAfterAddingRow(sheet, rowStart, numberOfRows) {\n      this.arrayMapping.moveArrayVerticesAfterRowByRows(sheet, rowStart, numberOfRows);\n\n      if (rowStart <= 0) {\n        return;\n      }\n\n      var _iterator50 = _createForOfIteratorHelper(this.arrayMapping.arraysInRows(RowsSpan.fromRowStartAndEnd(sheet, rowStart - 1, rowStart - 1))),\n          _step50;\n\n      try {\n        for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {\n          var _step50$value = _slicedToArray(_step50.value, 2),\n              array = _step50$value[1];\n\n          var arrayRange = array.getRange();\n\n          for (var col = arrayRange.start.col; col <= arrayRange.end.col; ++col) {\n            for (var row = rowStart; row <= arrayRange.end.row; ++row) {\n              var destination = simpleCellAddress(sheet, col, row);\n              var source = simpleCellAddress(sheet, col, row + numberOfRows);\n              var value = array.getArrayCellValue(destination);\n              this.addressMapping.moveCell(source, destination);\n              this.changes.addChange(EmptyValue, source, value);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator50.e(err);\n      } finally {\n        _iterator50.f();\n      }\n    }\n  }, {\n    key: \"fixArraysAfterRemovingRows\",\n    value: function fixArraysAfterRemovingRows(sheet, rowStart, numberOfRows) {\n      this.arrayMapping.moveArrayVerticesAfterRowByRows(sheet, rowStart, -numberOfRows);\n\n      if (rowStart <= 0) {\n        return;\n      }\n\n      var _iterator51 = _createForOfIteratorHelper(this.arrayMapping.arraysInRows(RowsSpan.fromRowStartAndEnd(sheet, rowStart - 1, rowStart - 1))),\n          _step51;\n\n      try {\n        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {\n          var _step51$value = _slicedToArray(_step51.value, 2),\n              array = _step51$value[1];\n\n          if (this.isThereSpaceForArray(array)) {\n            var _iterator52 = _createForOfIteratorHelper(array.getRange().addresses(this)),\n                _step52;\n\n            try {\n              for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {\n                var address = _step52.value;\n                this.addressMapping.setCell(address, array);\n              }\n            } catch (err) {\n              _iterator52.e(err);\n            } finally {\n              _iterator52.f();\n            }\n          } else {\n            this.setNoSpaceIfArray(array);\n          }\n        }\n      } catch (err) {\n        _iterator51.e(err);\n      } finally {\n        _iterator51.f();\n      }\n    }\n  }, {\n    key: \"fixArraysAfterAddingColumn\",\n    value: function fixArraysAfterAddingColumn(sheet, columnStart, numberOfColumns) {\n      this.arrayMapping.moveArrayVerticesAfterColumnByColumns(sheet, columnStart, numberOfColumns);\n\n      if (columnStart <= 0) {\n        return;\n      }\n\n      var _iterator53 = _createForOfIteratorHelper(this.arrayMapping.arraysInCols(ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart - 1, columnStart - 1))),\n          _step53;\n\n      try {\n        for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {\n          var _step53$value = _slicedToArray(_step53.value, 2),\n              array = _step53$value[1];\n\n          var arrayRange = array.getRange();\n\n          for (var row = arrayRange.start.row; row <= arrayRange.end.row; ++row) {\n            for (var col = columnStart; col <= arrayRange.end.col; ++col) {\n              var destination = simpleCellAddress(sheet, col, row);\n              var source = simpleCellAddress(sheet, col + numberOfColumns, row);\n              var value = array.getArrayCellValue(destination);\n              this.addressMapping.moveCell(source, destination);\n              this.changes.addChange(EmptyValue, source, value);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator53.e(err);\n      } finally {\n        _iterator53.f();\n      }\n    }\n  }, {\n    key: \"fixArraysAfterRemovingColumns\",\n    value: function fixArraysAfterRemovingColumns(sheet, columnStart, numberOfColumns) {\n      this.arrayMapping.moveArrayVerticesAfterColumnByColumns(sheet, columnStart, -numberOfColumns);\n\n      if (columnStart <= 0) {\n        return;\n      }\n\n      var _iterator54 = _createForOfIteratorHelper(this.arrayMapping.arraysInCols(ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart - 1, columnStart - 1))),\n          _step54;\n\n      try {\n        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {\n          var _step54$value = _slicedToArray(_step54.value, 2),\n              array = _step54$value[1];\n\n          if (this.isThereSpaceForArray(array)) {\n            var _iterator55 = _createForOfIteratorHelper(array.getRange().addresses(this)),\n                _step55;\n\n            try {\n              for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {\n                var address = _step55.value;\n                this.addressMapping.setCell(address, array);\n              }\n            } catch (err) {\n              _iterator55.e(err);\n            } finally {\n              _iterator55.f();\n            }\n          } else {\n            this.setNoSpaceIfArray(array);\n          }\n        }\n      } catch (err) {\n        _iterator54.e(err);\n      } finally {\n        _iterator54.f();\n      }\n    }\n  }, {\n    key: \"shrinkPossibleArrayAndGetCell\",\n    value: function shrinkPossibleArrayAndGetCell(address) {\n      var vertex = this.getCell(address);\n\n      if (!(vertex instanceof ArrayVertex)) {\n        return vertex;\n      }\n\n      this.setNoSpaceIfArray(vertex);\n      return this.getCell(address);\n    }\n  }, {\n    key: \"setNoSpaceIfArray\",\n    value: function setNoSpaceIfArray(vertex) {\n      if (vertex instanceof ArrayVertex) {\n        this.shrinkArrayToCorner(vertex);\n        vertex.setNoSpace();\n      }\n    }\n  }, {\n    key: \"removeVertex\",\n    value: function removeVertex(vertex) {\n      this.removeVertexAndCleanupDependencies(vertex);\n\n      if (vertex instanceof RangeVertex) {\n        this.rangeMapping.removeRange(vertex);\n      }\n    }\n  }, {\n    key: \"mergeRangeVertices\",\n    value: function mergeRangeVertices(existingVertex, newVertex) {\n      var _this11 = this;\n\n      var adjNodesStored = this.graph.adjacentNodes(newVertex);\n      this.removeVertexAndCleanupDependencies(newVertex);\n      this.graph.softRemoveEdge(existingVertex, newVertex);\n      adjNodesStored.forEach(function (adjacentNode) {\n        if (_this11.graph.hasNode(adjacentNode)) {\n          _this11.graph.addEdge(existingVertex, adjacentNode);\n        }\n      });\n    }\n  }, {\n    key: \"removeVertexAndCleanupDependencies\",\n    value: function removeVertexAndCleanupDependencies(inputVertex) {\n      var dependencies = new Set(this.graph.removeNode(inputVertex));\n\n      while (dependencies.size > 0) {\n        var vertex = dependencies.values().next().value;\n        dependencies.delete(vertex);\n\n        if (this.graph.hasNode(vertex) && this.graph.adjacentNodesCount(vertex) === 0) {\n          if (vertex instanceof RangeVertex || vertex instanceof EmptyCellVertex) {\n            this.graph.removeNode(vertex).forEach(function (candidate) {\n              return dependencies.add(candidate);\n            });\n          }\n\n          if (vertex instanceof RangeVertex) {\n            this.rangeMapping.removeRange(vertex);\n          } else if (vertex instanceof EmptyCellVertex) {\n            this.addressMapping.removeCell(vertex.address);\n          }\n        }\n      }\n    }\n  }], [{\n    key: \"buildEmpty\",\n    value: function buildEmpty(lazilyTransformingAstService, config, functionRegistry, namedExpressions, stats) {\n      return new DependencyGraph(new AddressMapping(config.chooseAddressMappingPolicy), new RangeMapping(), new SheetMapping(config.translationPackage), new ArrayMapping(), stats, lazilyTransformingAstService, functionRegistry, namedExpressions);\n    }\n  }]);\n\n  return DependencyGraph;\n}();"]},"metadata":{},"sourceType":"module"}