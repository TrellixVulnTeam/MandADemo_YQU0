{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { absoluteSheetReference, invalidSimpleCellAddress, simpleCellAddress, simpleColumnAddress, simpleRowAddress } from '../Cell';\nimport { columnIndexToLabel } from './addressRepresentationConverters';\n/** Possible kinds of cell references */\n\nexport var CellReferenceType;\n\n(function (CellReferenceType) {\n  /** Cell reference with both row and column relative. */\n  CellReferenceType[\"CELL_REFERENCE_RELATIVE\"] = \"CELL_REFERENCE\";\n  /** Cell reference with both row and column absolute. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE\"] = \"CELL_REFERENCE_ABSOLUTE\";\n  /** Cell reference with absolute column and relative row. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE_COL\"] = \"CELL_REFERENCE_ABSOLUTE_COL\";\n  /** Cell reference with relative column and absolute row. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE_ROW\"] = \"CELL_REFERENCE_ABSOLUTE_ROW\";\n})(CellReferenceType || (CellReferenceType = {}));\n\nexport var CellAddress = /*#__PURE__*/function () {\n  function CellAddress(sheet, col, row, type) {\n    _classCallCheck(this, CellAddress);\n\n    this.sheet = sheet;\n    this.col = col;\n    this.row = row;\n    this.type = type;\n  }\n\n  _createClass(CellAddress, [{\n    key: \"toSimpleCellAddress\",\n    value:\n    /**\n     * Converts R0C0 representation of cell address to simple object representation.\n     *\n     * @param baseAddress - base address for R0C0 shifts\n     */\n    function toSimpleCellAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n\n      if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE) {\n        return simpleCellAddress(sheet, this.col, this.row);\n      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW) {\n        return simpleCellAddress(sheet, baseAddress.col + this.col, this.row);\n      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL) {\n        return simpleCellAddress(sheet, this.col, baseAddress.row + this.row);\n      } else {\n        return simpleCellAddress(sheet, baseAddress.col + this.col, baseAddress.row + this.row);\n      }\n    }\n  }, {\n    key: \"toSimpleColumnAddress\",\n    value: function toSimpleColumnAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n      var column = this.col;\n\n      if (this.isColumnRelative()) {\n        column += baseAddress.col;\n      }\n\n      return simpleColumnAddress(sheet, column);\n    }\n  }, {\n    key: \"toSimpleRowAddress\",\n    value: function toSimpleRowAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n      var row = this.row;\n\n      if (this.isRowRelative()) {\n        row += baseAddress.row;\n      }\n\n      return simpleRowAddress(sheet, row);\n    }\n  }, {\n    key: \"isRowAbsolute\",\n    value: function isRowAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;\n    }\n  }, {\n    key: \"isColumnAbsolute\",\n    value: function isColumnAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;\n    }\n  }, {\n    key: \"isColumnRelative\",\n    value: function isColumnRelative() {\n      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;\n    }\n  }, {\n    key: \"isRowRelative\",\n    value: function isRowRelative() {\n      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;\n    }\n  }, {\n    key: \"isAbsolute\",\n    value: function isAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE && this.sheet !== null;\n    }\n  }, {\n    key: \"shiftedByRows\",\n    value: function shiftedByRows(numberOfRows) {\n      return new CellAddress(this.sheet, this.col, this.row + numberOfRows, this.type);\n    }\n  }, {\n    key: \"shiftedByColumns\",\n    value: function shiftedByColumns(numberOfColumns) {\n      return new CellAddress(this.sheet, this.col + numberOfColumns, this.row, this.type);\n    }\n  }, {\n    key: \"moved\",\n    value: function moved(toSheet, toRight, toBottom) {\n      var newSheet = this.sheet === null ? null : toSheet;\n      return new CellAddress(newSheet, this.col + toRight, this.row + toBottom, this.type);\n    }\n  }, {\n    key: \"withAbsoluteSheet\",\n    value: function withAbsoluteSheet(sheet) {\n      return new CellAddress(sheet, this.col, this.row, this.type);\n    }\n  }, {\n    key: \"isInvalid\",\n    value: function isInvalid(baseAddress) {\n      return invalidSimpleCellAddress(this.toSimpleCellAddress(baseAddress));\n    }\n  }, {\n    key: \"shiftRelativeDimensions\",\n    value: function shiftRelativeDimensions(toRight, toBottom) {\n      var col = this.isColumnAbsolute() ? this.col : this.col + toRight;\n      var row = this.isRowAbsolute() ? this.row : this.row + toBottom;\n      return new CellAddress(this.sheet, col, row, this.type);\n    }\n  }, {\n    key: \"shiftAbsoluteDimensions\",\n    value: function shiftAbsoluteDimensions(toRight, toBottom) {\n      var col = this.isColumnRelative() ? this.col : this.col + toRight;\n      var row = this.isRowRelative() ? this.row : this.row + toBottom;\n      return new CellAddress(this.sheet, col, row, this.type);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(withSheet) {\n      var sheetPart = withSheet && this.sheet !== null ? \"#\".concat(this.sheet) : '';\n\n      switch (this.type) {\n        case CellReferenceType.CELL_REFERENCE_RELATIVE:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"R\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"A\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"AC\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"AR\").concat(this.col);\n          }\n      }\n    }\n  }, {\n    key: \"unparse\",\n    value: function unparse(baseAddress) {\n      var simpleAddress = this.toSimpleCellAddress(baseAddress);\n\n      if (invalidSimpleCellAddress(simpleAddress)) {\n        return undefined;\n      }\n\n      var column = columnIndexToLabel(simpleAddress.col);\n      var rowDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW ? '$' : '';\n      var colDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL ? '$' : '';\n      return \"\".concat(colDollar).concat(column).concat(rowDollar).concat(simpleAddress.row + 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {\n      return this.row >= maxRows || this.col >= maxColumns;\n    }\n  }], [{\n    key: \"relative\",\n    value: function relative(sheet, col, row) {\n      return new CellAddress(sheet, col, row, CellReferenceType.CELL_REFERENCE_RELATIVE);\n    }\n  }, {\n    key: \"absolute\",\n    value: function absolute(sheet, col, row) {\n      return new CellAddress(sheet, col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE);\n    }\n  }, {\n    key: \"absoluteCol\",\n    value: function absoluteCol(sheet, col, row) {\n      return new CellAddress(sheet, col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL);\n    }\n  }, {\n    key: \"absoluteRow\",\n    value: function absoluteRow(sheet, col, row) {\n      return new CellAddress(sheet, col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW);\n    }\n  }]);\n\n  return CellAddress;\n}();","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/parser/CellAddress.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","absoluteSheetReference","invalidSimpleCellAddress","simpleCellAddress","simpleColumnAddress","simpleRowAddress","columnIndexToLabel","CellReferenceType","CellAddress","sheet","col","row","type","value","toSimpleCellAddress","baseAddress","CELL_REFERENCE_ABSOLUTE","CELL_REFERENCE_ABSOLUTE_ROW","CELL_REFERENCE_ABSOLUTE_COL","toSimpleColumnAddress","column","isColumnRelative","toSimpleRowAddress","isRowRelative","isRowAbsolute","isColumnAbsolute","CELL_REFERENCE_RELATIVE","isAbsolute","shiftedByRows","numberOfRows","shiftedByColumns","numberOfColumns","moved","toSheet","toRight","toBottom","newSheet","withAbsoluteSheet","isInvalid","shiftRelativeDimensions","shiftAbsoluteDimensions","hash","withSheet","sheetPart","concat","unparse","simpleAddress","undefined","rowDollar","colDollar","exceedsSheetSizeLimits","maxColumns","maxRows","relative","absolute","absoluteCol","absoluteRow"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { absoluteSheetReference, invalidSimpleCellAddress, simpleCellAddress, simpleColumnAddress, simpleRowAddress } from '../Cell';\nimport { columnIndexToLabel } from './addressRepresentationConverters';\n/** Possible kinds of cell references */\n\nexport var CellReferenceType;\n\n(function (CellReferenceType) {\n  /** Cell reference with both row and column relative. */\n  CellReferenceType[\"CELL_REFERENCE_RELATIVE\"] = \"CELL_REFERENCE\";\n  /** Cell reference with both row and column absolute. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE\"] = \"CELL_REFERENCE_ABSOLUTE\";\n  /** Cell reference with absolute column and relative row. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE_COL\"] = \"CELL_REFERENCE_ABSOLUTE_COL\";\n  /** Cell reference with relative column and absolute row. */\n\n  CellReferenceType[\"CELL_REFERENCE_ABSOLUTE_ROW\"] = \"CELL_REFERENCE_ABSOLUTE_ROW\";\n})(CellReferenceType || (CellReferenceType = {}));\n\nexport var CellAddress = /*#__PURE__*/function () {\n  function CellAddress(sheet, col, row, type) {\n    _classCallCheck(this, CellAddress);\n\n    this.sheet = sheet;\n    this.col = col;\n    this.row = row;\n    this.type = type;\n  }\n\n  _createClass(CellAddress, [{\n    key: \"toSimpleCellAddress\",\n    value:\n    /**\n     * Converts R0C0 representation of cell address to simple object representation.\n     *\n     * @param baseAddress - base address for R0C0 shifts\n     */\n    function toSimpleCellAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n\n      if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE) {\n        return simpleCellAddress(sheet, this.col, this.row);\n      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW) {\n        return simpleCellAddress(sheet, baseAddress.col + this.col, this.row);\n      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL) {\n        return simpleCellAddress(sheet, this.col, baseAddress.row + this.row);\n      } else {\n        return simpleCellAddress(sheet, baseAddress.col + this.col, baseAddress.row + this.row);\n      }\n    }\n  }, {\n    key: \"toSimpleColumnAddress\",\n    value: function toSimpleColumnAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n      var column = this.col;\n\n      if (this.isColumnRelative()) {\n        column += baseAddress.col;\n      }\n\n      return simpleColumnAddress(sheet, column);\n    }\n  }, {\n    key: \"toSimpleRowAddress\",\n    value: function toSimpleRowAddress(baseAddress) {\n      var sheet = absoluteSheetReference(this, baseAddress);\n      var row = this.row;\n\n      if (this.isRowRelative()) {\n        row += baseAddress.row;\n      }\n\n      return simpleRowAddress(sheet, row);\n    }\n  }, {\n    key: \"isRowAbsolute\",\n    value: function isRowAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;\n    }\n  }, {\n    key: \"isColumnAbsolute\",\n    value: function isColumnAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;\n    }\n  }, {\n    key: \"isColumnRelative\",\n    value: function isColumnRelative() {\n      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;\n    }\n  }, {\n    key: \"isRowRelative\",\n    value: function isRowRelative() {\n      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;\n    }\n  }, {\n    key: \"isAbsolute\",\n    value: function isAbsolute() {\n      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE && this.sheet !== null;\n    }\n  }, {\n    key: \"shiftedByRows\",\n    value: function shiftedByRows(numberOfRows) {\n      return new CellAddress(this.sheet, this.col, this.row + numberOfRows, this.type);\n    }\n  }, {\n    key: \"shiftedByColumns\",\n    value: function shiftedByColumns(numberOfColumns) {\n      return new CellAddress(this.sheet, this.col + numberOfColumns, this.row, this.type);\n    }\n  }, {\n    key: \"moved\",\n    value: function moved(toSheet, toRight, toBottom) {\n      var newSheet = this.sheet === null ? null : toSheet;\n      return new CellAddress(newSheet, this.col + toRight, this.row + toBottom, this.type);\n    }\n  }, {\n    key: \"withAbsoluteSheet\",\n    value: function withAbsoluteSheet(sheet) {\n      return new CellAddress(sheet, this.col, this.row, this.type);\n    }\n  }, {\n    key: \"isInvalid\",\n    value: function isInvalid(baseAddress) {\n      return invalidSimpleCellAddress(this.toSimpleCellAddress(baseAddress));\n    }\n  }, {\n    key: \"shiftRelativeDimensions\",\n    value: function shiftRelativeDimensions(toRight, toBottom) {\n      var col = this.isColumnAbsolute() ? this.col : this.col + toRight;\n      var row = this.isRowAbsolute() ? this.row : this.row + toBottom;\n      return new CellAddress(this.sheet, col, row, this.type);\n    }\n  }, {\n    key: \"shiftAbsoluteDimensions\",\n    value: function shiftAbsoluteDimensions(toRight, toBottom) {\n      var col = this.isColumnRelative() ? this.col : this.col + toRight;\n      var row = this.isRowRelative() ? this.row : this.row + toBottom;\n      return new CellAddress(this.sheet, col, row, this.type);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(withSheet) {\n      var sheetPart = withSheet && this.sheet !== null ? \"#\".concat(this.sheet) : '';\n\n      switch (this.type) {\n        case CellReferenceType.CELL_REFERENCE_RELATIVE:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"R\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"A\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"AC\").concat(this.col);\n          }\n\n        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW:\n          {\n            return \"\".concat(sheetPart, \"#\").concat(this.row, \"AR\").concat(this.col);\n          }\n      }\n    }\n  }, {\n    key: \"unparse\",\n    value: function unparse(baseAddress) {\n      var simpleAddress = this.toSimpleCellAddress(baseAddress);\n\n      if (invalidSimpleCellAddress(simpleAddress)) {\n        return undefined;\n      }\n\n      var column = columnIndexToLabel(simpleAddress.col);\n      var rowDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW ? '$' : '';\n      var colDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL ? '$' : '';\n      return \"\".concat(colDollar).concat(column).concat(rowDollar).concat(simpleAddress.row + 1);\n    }\n  }, {\n    key: \"exceedsSheetSizeLimits\",\n    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {\n      return this.row >= maxRows || this.col >= maxColumns;\n    }\n  }], [{\n    key: \"relative\",\n    value: function relative(sheet, col, row) {\n      return new CellAddress(sheet, col, row, CellReferenceType.CELL_REFERENCE_RELATIVE);\n    }\n  }, {\n    key: \"absolute\",\n    value: function absolute(sheet, col, row) {\n      return new CellAddress(sheet, col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE);\n    }\n  }, {\n    key: \"absoluteCol\",\n    value: function absoluteCol(sheet, col, row) {\n      return new CellAddress(sheet, col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL);\n    }\n  }, {\n    key: \"absoluteRow\",\n    value: function absoluteRow(sheet, col, row) {\n      return new CellAddress(sheet, col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW);\n    }\n  }]);\n\n  return CellAddress;\n}();"]},"metadata":{},"sourceType":"module"}