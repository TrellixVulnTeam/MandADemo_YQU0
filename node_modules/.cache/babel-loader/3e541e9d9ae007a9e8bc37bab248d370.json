{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { CellError, ErrorType } from '../Cell';\nimport { AstNodeType, buildCellErrorAst, CellAddress } from '../parser';\nexport var Transformer = /*#__PURE__*/function () {\n  function Transformer() {\n    _classCallCheck(this, Transformer);\n  }\n\n  _createClass(Transformer, [{\n    key: \"performEagerTransformations\",\n    value: function performEagerTransformations(graph, parser) {\n      var _iterator = _createForOfIteratorHelper(graph.arrayFormulaNodes()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n\n          var _this$transformSingle = this.transformSingleAst(node.getFormula(graph.lazilyTransformingAstService), node.getAddress(graph.lazilyTransformingAstService)),\n              _this$transformSingle2 = _slicedToArray(_this$transformSingle, 2),\n              newAst = _this$transformSingle2[0],\n              newAddress = _this$transformSingle2[1];\n\n          var cachedAst = parser.rememberNewAst(newAst);\n          node.setFormula(cachedAst);\n          node.setAddress(newAddress);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"transformSingleAst\",\n    value: function transformSingleAst(ast, address) {\n      var newAst = this.transformAst(ast, address);\n      var newAddress = this.fixNodeAddress(address);\n      return [newAst, newAddress];\n    }\n  }, {\n    key: \"transformAst\",\n    value: function transformAst(ast, address) {\n      var _this = this;\n\n      switch (ast.type) {\n        case AstNodeType.CELL_REFERENCE:\n          {\n            return this.transformCellReferenceAst(ast, address);\n          }\n\n        case AstNodeType.CELL_RANGE:\n          {\n            return this.transformCellRangeAst(ast, address);\n          }\n\n        case AstNodeType.COLUMN_RANGE:\n          {\n            return this.transformColumnRangeAst(ast, address);\n          }\n\n        case AstNodeType.ROW_RANGE:\n          {\n            return this.transformRowRangeAst(ast, address);\n          }\n\n        case AstNodeType.EMPTY:\n        case AstNodeType.ERROR:\n        case AstNodeType.NUMBER:\n        case AstNodeType.NAMED_EXPRESSION:\n        case AstNodeType.ERROR_WITH_RAW_INPUT:\n        case AstNodeType.STRING:\n          {\n            return ast;\n          }\n\n        case AstNodeType.PERCENT_OP:\n        case AstNodeType.MINUS_UNARY_OP:\n        case AstNodeType.PLUS_UNARY_OP:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              value: this.transformAst(ast.value, address)\n            });\n          }\n\n        case AstNodeType.FUNCTION_CALL:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              procedureName: ast.procedureName,\n              args: ast.args.map(function (arg) {\n                return _this.transformAst(arg, address);\n              })\n            });\n          }\n\n        case AstNodeType.PARENTHESIS:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              expression: this.transformAst(ast.expression, address)\n            });\n          }\n\n        case AstNodeType.ARRAY:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              args: ast.args.map(function (row) {\n                return row.map(function (val) {\n                  return _this.transformAst(val, address);\n                });\n              })\n            });\n          }\n\n        default:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              left: this.transformAst(ast.left, address),\n              right: this.transformAst(ast.right, address)\n            });\n          }\n      }\n    }\n  }, {\n    key: \"transformCellReferenceAst\",\n    value: function transformCellReferenceAst(ast, formulaAddress) {\n      var newCellAddress = this.transformCellAddress(ast.reference, formulaAddress);\n\n      if (newCellAddress instanceof CellAddress) {\n        return Object.assign(Object.assign({}, ast), {\n          reference: newCellAddress\n        });\n      } else if (newCellAddress === ErrorType.REF) {\n        return buildCellErrorAst(new CellError(ErrorType.REF));\n      } else {\n        return ast;\n      }\n    }\n  }, {\n    key: \"transformCellRangeAst\",\n    value: function transformCellRangeAst(ast, formulaAddress) {\n      var newRange = this.transformCellRange(ast.start, ast.end, formulaAddress);\n\n      if (Array.isArray(newRange)) {\n        return Object.assign(Object.assign({}, ast), {\n          start: newRange[0],\n          end: newRange[1]\n        });\n      } else if (newRange === ErrorType.REF) {\n        return buildCellErrorAst(new CellError(ErrorType.REF));\n      } else {\n        return ast;\n      }\n    }\n  }, {\n    key: \"transformColumnRangeAst\",\n    value: function transformColumnRangeAst(ast, formulaAddress) {\n      var newRange = this.transformColumnRange(ast.start, ast.end, formulaAddress);\n\n      if (Array.isArray(newRange)) {\n        return Object.assign(Object.assign({}, ast), {\n          start: newRange[0],\n          end: newRange[1]\n        });\n      } else if (newRange === ErrorType.REF) {\n        return buildCellErrorAst(new CellError(ErrorType.REF));\n      } else {\n        return ast;\n      }\n    }\n  }, {\n    key: \"transformRowRangeAst\",\n    value: function transformRowRangeAst(ast, formulaAddress) {\n      var newRange = this.transformRowRange(ast.start, ast.end, formulaAddress);\n\n      if (Array.isArray(newRange)) {\n        return Object.assign(Object.assign({}, ast), {\n          start: newRange[0],\n          end: newRange[1]\n        });\n      } else if (newRange === ErrorType.REF) {\n        return buildCellErrorAst(new CellError(ErrorType.REF));\n      } else {\n        return ast;\n      }\n    }\n  }]);\n\n  return Transformer;\n}();","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/dependencyTransformers/Transformer.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","Symbol","iterator","_arr","_n","_d","_s","_e","call","next","done","push","value","length","err","Array","isArray","_createForOfIteratorHelper","o","allowArrayLike","it","F","s","n","e","_e2","f","normalCompletion","didErr","step","_e3","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","CellError","ErrorType","AstNodeType","buildCellErrorAst","CellAddress","Transformer","performEagerTransformations","graph","parser","_iterator","arrayFormulaNodes","_step","node","_this$transformSingle","transformSingleAst","getFormula","lazilyTransformingAstService","getAddress","_this$transformSingle2","newAst","newAddress","cachedAst","rememberNewAst","setFormula","setAddress","ast","address","transformAst","fixNodeAddress","_this","type","CELL_REFERENCE","transformCellReferenceAst","CELL_RANGE","transformCellRangeAst","COLUMN_RANGE","transformColumnRangeAst","ROW_RANGE","transformRowRangeAst","EMPTY","ERROR","NUMBER","NAMED_EXPRESSION","ERROR_WITH_RAW_INPUT","STRING","PERCENT_OP","MINUS_UNARY_OP","PLUS_UNARY_OP","assign","FUNCTION_CALL","procedureName","args","map","arg","PARENTHESIS","expression","ARRAY","row","val","left","right","formulaAddress","newCellAddress","transformCellAddress","reference","REF","newRange","transformCellRange","start","end","transformColumnRange","transformRowRange"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { CellError, ErrorType } from '../Cell';\nimport { AstNodeType, buildCellErrorAst, CellAddress } from '../parser';\nexport var Transformer = /*#__PURE__*/function () {\n  function Transformer() {\n    _classCallCheck(this, Transformer);\n  }\n\n  _createClass(Transformer, [{\n    key: \"performEagerTransformations\",\n    value: function performEagerTransformations(graph, parser) {\n      var _iterator = _createForOfIteratorHelper(graph.arrayFormulaNodes()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n\n          var _this$transformSingle = this.transformSingleAst(node.getFormula(graph.lazilyTransformingAstService), node.getAddress(graph.lazilyTransformingAstService)),\n              _this$transformSingle2 = _slicedToArray(_this$transformSingle, 2),\n              newAst = _this$transformSingle2[0],\n              newAddress = _this$transformSingle2[1];\n\n          var cachedAst = parser.rememberNewAst(newAst);\n          node.setFormula(cachedAst);\n          node.setAddress(newAddress);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"transformSingleAst\",\n    value: function transformSingleAst(ast, address) {\n      var newAst = this.transformAst(ast, address);\n      var newAddress = this.fixNodeAddress(address);\n      return [newAst, newAddress];\n    }\n  }, {\n    key: \"transformAst\",\n    value: function transformAst(ast, address) {\n      var _this = this;\n\n      switch (ast.type) {\n        case AstNodeType.CELL_REFERENCE:\n          {\n            return this.transformCellReferenceAst(ast, address);\n          }\n\n        case AstNodeType.CELL_RANGE:\n          {\n            return this.transformCellRangeAst(ast, address);\n          }\n\n        case AstNodeType.COLUMN_RANGE:\n          {\n            return this.transformColumnRangeAst(ast, address);\n          }\n\n        case AstNodeType.ROW_RANGE:\n          {\n            return this.transformRowRangeAst(ast, address);\n          }\n\n        case AstNodeType.EMPTY:\n        case AstNodeType.ERROR:\n        case AstNodeType.NUMBER:\n        case AstNodeType.NAMED_EXPRESSION:\n        case AstNodeType.ERROR_WITH_RAW_INPUT:\n        case AstNodeType.STRING:\n          {\n            return ast;\n          }\n\n        case AstNodeType.PERCENT_OP:\n        case AstNodeType.MINUS_UNARY_OP:\n        case AstNodeType.PLUS_UNARY_OP:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              value: this.transformAst(ast.value, address)\n            });\n          }\n\n        case AstNodeType.FUNCTION_CALL:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              procedureName: ast.procedureName,\n              args: ast.args.map(function (arg) {\n                return _this.transformAst(arg, address);\n              })\n            });\n          }\n\n        case AstNodeType.PARENTHESIS:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              expression: this.transformAst(ast.expression, address)\n            });\n          }\n\n        case AstNodeType.ARRAY:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              args: ast.args.map(function (row) {\n                return row.map(function (val) {\n                  return _this.transformAst(val, address);\n                });\n              })\n            });\n          }\n\n        default:\n          {\n            return Object.assign(Object.assign({}, ast), {\n              left: this.transformAst(ast.left, address),\n              right: this.transformAst(ast.right, address)\n            });\n          }\n      }\n    }\n  }, {\n    key: \"transformCellReferenceAst\",\n    value: function transformCellReferenceAst(ast, formulaAddress) {\n      var newCellAddress = this.transformCellAddress(ast.reference, formulaAddress);\n\n      if (newCellAddress instanceof CellAddress) {\n        return Object.assign(Object.assign({}, ast), {\n          reference: newCellAddress\n        });\n      } else if (newCellAddress === ErrorType.REF) {\n        return buildCellErrorAst(new CellError(ErrorType.REF));\n      } else {\n        return ast;\n      }\n    }\n  }, {\n    key: \"transformCellRangeAst\",\n    value: function transformCellRangeAst(ast, formulaAddress) {\n      var newRange = this.transformCellRange(ast.start, ast.end, formulaAddress);\n\n      if (Array.isArray(newRange)) {\n        return Object.assign(Object.assign({}, ast), {\n          start: newRange[0],\n          end: newRange[1]\n        });\n      } else if (newRange === ErrorType.REF) {\n        return buildCellErrorAst(new CellError(ErrorType.REF));\n      } else {\n        return ast;\n      }\n    }\n  }, {\n    key: \"transformColumnRangeAst\",\n    value: function transformColumnRangeAst(ast, formulaAddress) {\n      var newRange = this.transformColumnRange(ast.start, ast.end, formulaAddress);\n\n      if (Array.isArray(newRange)) {\n        return Object.assign(Object.assign({}, ast), {\n          start: newRange[0],\n          end: newRange[1]\n        });\n      } else if (newRange === ErrorType.REF) {\n        return buildCellErrorAst(new CellError(ErrorType.REF));\n      } else {\n        return ast;\n      }\n    }\n  }, {\n    key: \"transformRowRangeAst\",\n    value: function transformRowRangeAst(ast, formulaAddress) {\n      var newRange = this.transformRowRange(ast.start, ast.end, formulaAddress);\n\n      if (Array.isArray(newRange)) {\n        return Object.assign(Object.assign({}, ast), {\n          start: newRange[0],\n          end: newRange[1]\n        });\n      } else if (newRange === ErrorType.REF) {\n        return buildCellErrorAst(new CellError(ErrorType.REF));\n      } else {\n        return ast;\n      }\n    }\n  }]);\n\n  return Transformer;\n}();"]},"metadata":{},"sourceType":"module"}