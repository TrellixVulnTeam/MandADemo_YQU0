{"ast":null,"code":"import { contains } from \"../utils/utils\";\nvar MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nvar NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nvar EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nvar NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nvar RECOGNITION_EXCEPTION_NAMES = [MISMATCHED_TOKEN_EXCEPTION, NO_VIABLE_ALT_EXCEPTION, EARLY_EXIT_EXCEPTION, NOT_ALL_INPUT_PARSED_EXCEPTION];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES); // hacks to bypass no support for custom Errors in javascript/typescript\n\nexport function isRecognitionException(error) {\n  // can't do instanceof on hacked custom js exceptions\n  return contains(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nexport function MismatchedTokenException(message, token, previousToken) {\n  this.name = MISMATCHED_TOKEN_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.previousToken = previousToken;\n  this.resyncedTokens = [];\n} // must use the \"Error.prototype\" instead of \"new Error\"\n// because the stack trace points to where \"new Error\" was invoked\"\n\nMismatchedTokenException.prototype = Error.prototype;\nexport function NoViableAltException(message, token, previousToken) {\n  this.name = NO_VIABLE_ALT_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.previousToken = previousToken;\n  this.resyncedTokens = [];\n}\nNoViableAltException.prototype = Error.prototype;\nexport function NotAllInputParsedException(message, token) {\n  this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.resyncedTokens = [];\n}\nNotAllInputParsedException.prototype = Error.prototype;\nexport function EarlyExitException(message, token, previousToken) {\n  this.name = EARLY_EXIT_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.previousToken = previousToken;\n  this.resyncedTokens = [];\n}\nEarlyExitException.prototype = Error.prototype;","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js"],"names":["contains","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","Object","freeze","isRecognitionException","error","name","MismatchedTokenException","message","token","previousToken","resyncedTokens","prototype","Error","NoViableAltException","NotAllInputParsedException","EarlyExitException"],"mappings":"AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,IAAIC,0BAA0B,GAAG,0BAAjC;AACA,IAAIC,uBAAuB,GAAG,sBAA9B;AACA,IAAIC,oBAAoB,GAAG,oBAA3B;AACA,IAAIC,8BAA8B,GAAG,4BAArC;AACA,IAAIC,2BAA2B,GAAG,CAC9BJ,0BAD8B,EAE9BC,uBAF8B,EAG9BC,oBAH8B,EAI9BC,8BAJ8B,CAAlC;AAMAE,MAAM,CAACC,MAAP,CAAcF,2BAAd,E,CACA;;AACA,OAAO,SAASG,sBAAT,CAAgCC,KAAhC,EAAuC;AAC1C;AACA,SAAOT,QAAQ,CAACK,2BAAD,EAA8BI,KAAK,CAACC,IAApC,CAAf;AACH;AACD,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2CC,KAA3C,EAAkDC,aAAlD,EAAiE;AACpE,OAAKJ,IAAL,GAAYT,0BAAZ;AACA,OAAKW,OAAL,GAAeA,OAAf;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,aAAL,GAAqBA,aAArB;AACA,OAAKC,cAAL,GAAsB,EAAtB;AACH,C,CACD;AACA;;AACAJ,wBAAwB,CAACK,SAAzB,GAAqCC,KAAK,CAACD,SAA3C;AACA,OAAO,SAASE,oBAAT,CAA8BN,OAA9B,EAAuCC,KAAvC,EAA8CC,aAA9C,EAA6D;AAChE,OAAKJ,IAAL,GAAYR,uBAAZ;AACA,OAAKU,OAAL,GAAeA,OAAf;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,aAAL,GAAqBA,aAArB;AACA,OAAKC,cAAL,GAAsB,EAAtB;AACH;AACDG,oBAAoB,CAACF,SAArB,GAAiCC,KAAK,CAACD,SAAvC;AACA,OAAO,SAASG,0BAAT,CAAoCP,OAApC,EAA6CC,KAA7C,EAAoD;AACvD,OAAKH,IAAL,GAAYN,8BAAZ;AACA,OAAKQ,OAAL,GAAeA,OAAf;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKE,cAAL,GAAsB,EAAtB;AACH;AACDI,0BAA0B,CAACH,SAA3B,GAAuCC,KAAK,CAACD,SAA7C;AACA,OAAO,SAASI,kBAAT,CAA4BR,OAA5B,EAAqCC,KAArC,EAA4CC,aAA5C,EAA2D;AAC9D,OAAKJ,IAAL,GAAYP,oBAAZ;AACA,OAAKS,OAAL,GAAeA,OAAf;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,aAAL,GAAqBA,aAArB;AACA,OAAKC,cAAL,GAAsB,EAAtB;AACH;AACDK,kBAAkB,CAACJ,SAAnB,GAA+BC,KAAK,CAACD,SAArC","sourcesContent":["import { contains } from \"../utils/utils\";\nvar MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nvar NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nvar EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nvar NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nvar RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION\n];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return contains(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nexport function MismatchedTokenException(message, token, previousToken) {\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\n// must use the \"Error.prototype\" instead of \"new Error\"\n// because the stack trace points to where \"new Error\" was invoked\"\nMismatchedTokenException.prototype = Error.prototype;\nexport function NoViableAltException(message, token, previousToken) {\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\nNoViableAltException.prototype = Error.prototype;\nexport function NotAllInputParsedException(message, token) {\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.resyncedTokens = [];\n}\nNotAllInputParsedException.prototype = Error.prototype;\nexport function EarlyExitException(message, token, previousToken) {\n    this.name = EARLY_EXIT_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\nEarlyExitException.prototype = Error.prototype;\n//# sourceMappingURL=exceptions_public.js.map"]},"metadata":{},"sourceType":"module"}