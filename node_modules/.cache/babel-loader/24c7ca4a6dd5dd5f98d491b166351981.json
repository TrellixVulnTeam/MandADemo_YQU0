{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { StatType } from './StatType';\n/**\n * Provides tracking performance statistics to the engine\n */\n\nexport var Statistics = /*#__PURE__*/function () {\n  function Statistics() {\n    _classCallCheck(this, Statistics);\n\n    this.stats = new Map([[StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0], [StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0]]);\n    this.startTimes = new Map();\n  }\n\n  _createClass(Statistics, [{\n    key: \"incrementCriterionFunctionFullCacheUsed\",\n    value: function incrementCriterionFunctionFullCacheUsed() {\n      var _a;\n\n      var newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_FULL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n      this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, newValue);\n    }\n  }, {\n    key: \"incrementCriterionFunctionPartialCacheUsed\",\n    value: function incrementCriterionFunctionPartialCacheUsed() {\n      var _a;\n\n      var newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n      this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, newValue);\n    }\n    /**\n     * Resets statistics\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.stats.clear();\n      this.startTimes.clear();\n      this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0);\n      this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0);\n    }\n    /**\n     * Starts tracking particular statistic.\n     *\n     * @param name - statistic to start tracking\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(name) {\n      if (this.startTimes.get(name)) {\n        throw Error(\"Statistics \".concat(name, \" already started\"));\n      } else {\n        this.startTimes.set(name, Date.now());\n      }\n    }\n    /**\n     * Stops tracking particular statistic.\n     * Raise error if tracking statistic wasn't started.\n     *\n     * @param name - statistic to stop tracking\n     */\n\n  }, {\n    key: \"end\",\n    value: function end(name) {\n      var _a;\n\n      var now = Date.now();\n      var startTime = this.startTimes.get(name);\n\n      if (startTime) {\n        var values = (_a = this.stats.get(name)) !== null && _a !== void 0 ? _a : 0;\n        values += now - startTime;\n        this.stats.set(name, values);\n        this.startTimes.delete(name);\n      } else {\n        throw Error(\"Statistics \".concat(name, \" not started\"));\n      }\n    }\n    /**\n     * Measure given statistic as execution of given function.\n     *\n     * @param name - statistic to track\n     * @param func - function to call\n     * @returns result of the function call\n     */\n\n  }, {\n    key: \"measure\",\n    value: function measure(name, func) {\n      this.start(name);\n      var result = func();\n      this.end(name);\n      return result;\n    }\n    /**\n     * Returns the snapshot of current results\n     */\n\n  }, {\n    key: \"snapshot\",\n    value: function snapshot() {\n      return new Map(this.stats);\n    }\n  }]);\n\n  return Statistics;\n}();","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/statistics/Statistics.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","StatType","Statistics","stats","Map","CRITERION_FUNCTION_FULL_CACHE_USED","CRITERION_FUNCTION_PARTIAL_CACHE_USED","startTimes","value","incrementCriterionFunctionFullCacheUsed","_a","newValue","get","set","incrementCriterionFunctionPartialCacheUsed","reset","clear","start","name","Error","concat","Date","now","end","startTime","values","delete","measure","func","result","snapshot"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { StatType } from './StatType';\n/**\n * Provides tracking performance statistics to the engine\n */\n\nexport var Statistics = /*#__PURE__*/function () {\n  function Statistics() {\n    _classCallCheck(this, Statistics);\n\n    this.stats = new Map([[StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0], [StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0]]);\n    this.startTimes = new Map();\n  }\n\n  _createClass(Statistics, [{\n    key: \"incrementCriterionFunctionFullCacheUsed\",\n    value: function incrementCriterionFunctionFullCacheUsed() {\n      var _a;\n\n      var newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_FULL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n      this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, newValue);\n    }\n  }, {\n    key: \"incrementCriterionFunctionPartialCacheUsed\",\n    value: function incrementCriterionFunctionPartialCacheUsed() {\n      var _a;\n\n      var newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n      this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, newValue);\n    }\n    /**\n     * Resets statistics\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.stats.clear();\n      this.startTimes.clear();\n      this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0);\n      this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0);\n    }\n    /**\n     * Starts tracking particular statistic.\n     *\n     * @param name - statistic to start tracking\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(name) {\n      if (this.startTimes.get(name)) {\n        throw Error(\"Statistics \".concat(name, \" already started\"));\n      } else {\n        this.startTimes.set(name, Date.now());\n      }\n    }\n    /**\n     * Stops tracking particular statistic.\n     * Raise error if tracking statistic wasn't started.\n     *\n     * @param name - statistic to stop tracking\n     */\n\n  }, {\n    key: \"end\",\n    value: function end(name) {\n      var _a;\n\n      var now = Date.now();\n      var startTime = this.startTimes.get(name);\n\n      if (startTime) {\n        var values = (_a = this.stats.get(name)) !== null && _a !== void 0 ? _a : 0;\n        values += now - startTime;\n        this.stats.set(name, values);\n        this.startTimes.delete(name);\n      } else {\n        throw Error(\"Statistics \".concat(name, \" not started\"));\n      }\n    }\n    /**\n     * Measure given statistic as execution of given function.\n     *\n     * @param name - statistic to track\n     * @param func - function to call\n     * @returns result of the function call\n     */\n\n  }, {\n    key: \"measure\",\n    value: function measure(name, func) {\n      this.start(name);\n      var result = func();\n      this.end(name);\n      return result;\n    }\n    /**\n     * Returns the snapshot of current results\n     */\n\n  }, {\n    key: \"snapshot\",\n    value: function snapshot() {\n      return new Map(this.stats);\n    }\n  }]);\n\n  return Statistics;\n}();"]},"metadata":{},"sourceType":"module"}