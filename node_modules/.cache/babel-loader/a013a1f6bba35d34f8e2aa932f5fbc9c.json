{"ast":null,"code":"import { has, timer } from \"../../../utils/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\n\nvar PerformanceTracer = function () {\n  function PerformanceTracer() {}\n\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if (has(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  };\n\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n\n      var _a = timer(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  return PerformanceTracer;\n}();\n\nexport { PerformanceTracer };","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/chevrotain/lib_esm/src/parse/parser/traits/perf_tracer.js"],"names":["has","timer","DEFAULT_PARSER_CONFIG","PerformanceTracer","prototype","initPerformanceTracer","config","userTraceInitPerf","traceInitPerf","traceIsNumber","traceInitMaxIdent","Infinity","traceInitIndent","TRACE_INIT","phaseDesc","phaseImpl","indent","Array","join","console","log","_a","time","value","traceMethod","warn"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,sBAA3B;AACA,SAASC,qBAAT,QAAsC,WAAtC;AACA;AACA;AACA;;AACA,IAAIC,iBAAiB,GAAkB,YAAY;AAC/C,WAASA,iBAAT,GAA6B,CAC5B;;AACDA,EAAAA,iBAAiB,CAACC,SAAlB,CAA4BC,qBAA5B,GAAoD,UAAUC,MAAV,EAAkB;AAClE,QAAIN,GAAG,CAACM,MAAD,EAAS,eAAT,CAAP,EAAkC;AAC9B,UAAIC,iBAAiB,GAAGD,MAAM,CAACE,aAA/B;AACA,UAAIC,aAAa,GAAG,OAAOF,iBAAP,KAA6B,QAAjD;AACA,WAAKG,iBAAL,GAAyBD,aAAa,GAChCF,iBADgC,GAEhCI,QAFN;AAGA,WAAKH,aAAL,GAAqBC,aAAa,GAC5BF,iBAAiB,GAAG,CADQ,GAE5BA,iBAFN;AAGH,KATD,MAUK;AACD,WAAKG,iBAAL,GAAyB,CAAzB;AACA,WAAKF,aAAL,GAAqBN,qBAAqB,CAACM,aAA3C;AACH;;AACD,SAAKI,eAAL,GAAuB,CAAC,CAAxB;AACH,GAhBD;;AAiBAT,EAAAA,iBAAiB,CAACC,SAAlB,CAA4BS,UAA5B,GAAyC,UAAUC,SAAV,EAAqBC,SAArB,EAAgC;AACrE;AACA;AACA,QAAI,KAAKP,aAAL,KAAuB,IAA3B,EAAiC;AAC7B,WAAKI,eAAL;AACA,UAAII,MAAM,GAAG,IAAIC,KAAJ,CAAU,KAAKL,eAAL,GAAuB,CAAjC,EAAoCM,IAApC,CAAyC,IAAzC,CAAb;;AACA,UAAI,KAAKN,eAAL,GAAuB,KAAKF,iBAAhC,EAAmD;AAC/CS,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,GAAG,OAAT,GAAmBF,SAAnB,GAA+B,GAA3C;AACH;;AACD,UAAIO,EAAE,GAAGpB,KAAK,CAACc,SAAD,CAAd;AAAA,UAA2BO,IAAI,GAAGD,EAAE,CAACC,IAArC;AAAA,UAA2CC,KAAK,GAAGF,EAAE,CAACE,KAAtD;AACA;;;AACA,UAAIC,WAAW,GAAGF,IAAI,GAAG,EAAP,GAAYH,OAAO,CAACM,IAApB,GAA2BN,OAAO,CAACC,GAArD;;AACA,UAAI,KAAKR,eAAL,GAAuB,KAAKF,iBAAhC,EAAmD;AAC/Cc,QAAAA,WAAW,CAACR,MAAM,GAAG,OAAT,GAAmBF,SAAnB,GAA+B,UAA/B,GAA4CQ,IAA5C,GAAmD,IAApD,CAAX;AACH;;AACD,WAAKV,eAAL;AACA,aAAOW,KAAP;AACH,KAdD,MAeK;AACD,aAAOR,SAAS,EAAhB;AACH;AACJ,GArBD;;AAsBA,SAAOZ,iBAAP;AACH,CA3CsC,EAAvC;;AA4CA,SAASA,iBAAT","sourcesContent":["import { has, timer } from \"../../../utils/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */ (function () {\n    function PerformanceTracer() {\n    }\n    PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n        if (has(config, \"traceInitPerf\")) {\n            var userTraceInitPerf = config.traceInitPerf;\n            var traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf;\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    };\n    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(indent + \"--> <\" + phaseDesc + \">\");\n            }\n            var _a = timer(phaseImpl), time = _a.time, value = _a.value;\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            var traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    };\n    return PerformanceTracer;\n}());\nexport { PerformanceTracer };\n//# sourceMappingURL=perf_tracer.js.map"]},"metadata":{},"sourceType":"module"}