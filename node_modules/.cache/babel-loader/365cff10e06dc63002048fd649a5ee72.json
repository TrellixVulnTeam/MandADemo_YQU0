{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n\nimport { AbsoluteCellRange } from './AbsoluteCellRange';\nimport { invalidSimpleCellAddress, simpleCellAddress } from './Cell';\nimport { CellContent } from './CellContentParser';\nimport { InvalidAddressError, InvalidArgumentsError, NamedExpressionDoesNotExistError, NamedExpressionNameIsAlreadyTakenError, NamedExpressionNameIsInvalidError, NoOperationToRedoError, NoOperationToUndoError, NoRelativeAddressesAllowedError, NoSheetWithIdError, NothingToPasteError, SheetNameAlreadyTakenError, SheetSizeLimitExceededError, SourceLocationHasArrayError, TargetLocationHasArrayError } from './errors';\nimport { doesContainRelativeReferences } from './NamedExpressions';\nimport { AddColumnsCommand, AddRowsCommand, RemoveColumnsCommand, RemoveRowsCommand } from './Operations';\nimport { findBoundaries, validateAsSheet } from './Sheet';\nimport { ColumnsSpan, RowsSpan } from './Span';\nimport { AddColumnsUndoEntry, AddNamedExpressionUndoEntry, AddRowsUndoEntry, AddSheetUndoEntry, ChangeNamedExpressionUndoEntry, ClearSheetUndoEntry, MoveCellsUndoEntry, MoveColumnsUndoEntry, MoveRowsUndoEntry, PasteUndoEntry, RemoveColumnsUndoEntry, RemoveNamedExpressionUndoEntry, RemoveRowsUndoEntry, RemoveSheetUndoEntry, RenameSheetUndoEntry, SetCellContentsUndoEntry, SetColumnOrderUndoEntry, SetRowOrderUndoEntry, SetSheetContentUndoEntry } from './UndoRedo';\nexport var CrudOperations = /*#__PURE__*/function () {\n  function CrudOperations(config, operations, undoRedo, clipboardOperations, dependencyGraph, columnSearch, parser, cellContentParser, lazilyTransformingAstService, namedExpressions) {\n    _classCallCheck(this, CrudOperations);\n\n    this.operations = operations;\n    this.undoRedo = undoRedo;\n    this.clipboardOperations = clipboardOperations;\n    this.dependencyGraph = dependencyGraph;\n    this.columnSearch = columnSearch;\n    this.parser = parser;\n    this.cellContentParser = cellContentParser;\n    this.lazilyTransformingAstService = lazilyTransformingAstService;\n    this.namedExpressions = namedExpressions;\n    this.maxRows = config.maxRows;\n    this.maxColumns = config.maxColumns;\n  }\n\n  _createClass(CrudOperations, [{\n    key: \"addRows\",\n    value: function addRows(sheet) {\n      for (var _len = arguments.length, indexes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        indexes[_key - 1] = arguments[_key];\n      }\n\n      var addRowsCommand = new AddRowsCommand(sheet, indexes);\n      this.ensureItIsPossibleToAddRows.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.operations.addRows(addRowsCommand);\n      this.undoRedo.saveOperation(new AddRowsUndoEntry(addRowsCommand));\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(sheet) {\n      for (var _len2 = arguments.length, indexes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        indexes[_key2 - 1] = arguments[_key2];\n      }\n\n      var removeRowsCommand = new RemoveRowsCommand(sheet, indexes);\n      this.ensureItIsPossibleToRemoveRows.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var rowsRemovals = this.operations.removeRows(removeRowsCommand);\n      this.undoRedo.saveOperation(new RemoveRowsUndoEntry(removeRowsCommand, rowsRemovals));\n    }\n  }, {\n    key: \"addColumns\",\n    value: function addColumns(sheet) {\n      for (var _len3 = arguments.length, indexes = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        indexes[_key3 - 1] = arguments[_key3];\n      }\n\n      var addColumnsCommand = new AddColumnsCommand(sheet, indexes);\n      this.ensureItIsPossibleToAddColumns.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.operations.addColumns(addColumnsCommand);\n      this.undoRedo.saveOperation(new AddColumnsUndoEntry(addColumnsCommand));\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(sheet) {\n      for (var _len4 = arguments.length, indexes = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        indexes[_key4 - 1] = arguments[_key4];\n      }\n\n      var removeColumnsCommand = new RemoveColumnsCommand(sheet, indexes);\n      this.ensureItIsPossibleToRemoveColumns.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var columnsRemovals = this.operations.removeColumns(removeColumnsCommand);\n      this.undoRedo.saveOperation(new RemoveColumnsUndoEntry(removeColumnsCommand, columnsRemovals));\n    }\n  }, {\n    key: \"moveCells\",\n    value: function moveCells(sourceLeftCorner, width, height, destinationLeftCorner) {\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n\n      var _this$operations$move = this.operations.moveCells(sourceLeftCorner, width, height, destinationLeftCorner),\n          version = _this$operations$move.version,\n          overwrittenCellsData = _this$operations$move.overwrittenCellsData,\n          addedGlobalNamedExpressions = _this$operations$move.addedGlobalNamedExpressions;\n\n      this.undoRedo.saveOperation(new MoveCellsUndoEntry(sourceLeftCorner, width, height, destinationLeftCorner, overwrittenCellsData, addedGlobalNamedExpressions, version));\n    }\n  }, {\n    key: \"moveRows\",\n    value: function moveRows(sheet, startRow, numberOfRows, targetRow) {\n      this.ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var version = this.operations.moveRows(sheet, startRow, numberOfRows, targetRow);\n      this.undoRedo.saveOperation(new MoveRowsUndoEntry(sheet, startRow, numberOfRows, targetRow, version));\n    }\n  }, {\n    key: \"moveColumns\",\n    value: function moveColumns(sheet, startColumn, numberOfColumns, targetColumn) {\n      this.ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn);\n      this.undoRedo.clearRedoStack();\n      var version = this.operations.moveColumns(sheet, startColumn, numberOfColumns, targetColumn);\n      this.undoRedo.saveOperation(new MoveColumnsUndoEntry(sheet, startColumn, numberOfColumns, targetColumn, version));\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(sourceLeftCorner, width, height) {\n      this.clipboardOperations.cut(sourceLeftCorner, width, height);\n    }\n  }, {\n    key: \"ensureItIsPossibleToCopy\",\n    value: function ensureItIsPossibleToCopy(sourceLeftCorner, width, height) {\n      if (!isPositiveInteger(width)) {\n        throw new InvalidArgumentsError('width to be positive integer.');\n      }\n\n      if (!isPositiveInteger(height)) {\n        throw new InvalidArgumentsError('height to be positive integer.');\n      }\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(sourceLeftCorner, width, height) {\n      this.ensureItIsPossibleToCopy(sourceLeftCorner, width, height);\n      this.clipboardOperations.copy(sourceLeftCorner, width, height);\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(targetLeftCorner) {\n      var clipboard = this.clipboardOperations.clipboard;\n\n      if (clipboard === undefined) {\n        throw new NothingToPasteError();\n      } else if (this.clipboardOperations.isCutClipboard()) {\n        this.moveCells(clipboard.sourceLeftCorner, clipboard.width, clipboard.height, targetLeftCorner);\n      } else if (this.clipboardOperations.isCopyClipboard()) {\n        this.clipboardOperations.ensureItIsPossibleToCopyPaste(targetLeftCorner);\n        var targetRange = AbsoluteCellRange.spanFrom(targetLeftCorner, clipboard.width, clipboard.height);\n        var oldContent = this.operations.getRangeClipboardCells(targetRange);\n        this.undoRedo.clearRedoStack();\n        var addedGlobalNamedExpressions = this.operations.restoreClipboardCells(clipboard.sourceLeftCorner.sheet, clipboard.getContent(targetLeftCorner));\n        this.undoRedo.saveOperation(new PasteUndoEntry(targetLeftCorner, oldContent, clipboard.content, addedGlobalNamedExpressions));\n      }\n    }\n  }, {\n    key: \"beginUndoRedoBatchMode\",\n    value: function beginUndoRedoBatchMode() {\n      this.undoRedo.beginBatchMode();\n    }\n  }, {\n    key: \"commitUndoRedoBatchMode\",\n    value: function commitUndoRedoBatchMode() {\n      this.undoRedo.commitBatchMode();\n    }\n  }, {\n    key: \"isClipboardEmpty\",\n    value: function isClipboardEmpty() {\n      return this.clipboardOperations.clipboard === undefined;\n    }\n  }, {\n    key: \"clearClipboard\",\n    value: function clearClipboard() {\n      this.clipboardOperations.clear();\n    }\n  }, {\n    key: \"addSheet\",\n    value: function addSheet(name) {\n      if (name !== undefined) {\n        this.ensureItIsPossibleToAddSheet(name);\n      }\n\n      this.undoRedo.clearRedoStack();\n      var addedSheetName = this.operations.addSheet(name);\n      this.undoRedo.saveOperation(new AddSheetUndoEntry(addedSheetName));\n      return addedSheetName;\n    }\n  }, {\n    key: \"removeSheet\",\n    value: function removeSheet(sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var originalName = this.sheetMapping.fetchDisplayName(sheetId);\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n\n      var _this$operations$remo = this.operations.removeSheet(sheetId),\n          version = _this$operations$remo.version,\n          scopedNamedExpressions = _this$operations$remo.scopedNamedExpressions;\n\n      this.undoRedo.saveOperation(new RemoveSheetUndoEntry(originalName, sheetId, oldSheetContent, scopedNamedExpressions, version));\n    }\n  }, {\n    key: \"renameSheet\",\n    value: function renameSheet(sheetId, newName) {\n      this.ensureItIsPossibleToRenameSheet(sheetId, newName);\n      var oldName = this.operations.renameSheet(sheetId, newName);\n\n      if (oldName !== undefined) {\n        this.undoRedo.clearRedoStack();\n        this.undoRedo.saveOperation(new RenameSheetUndoEntry(sheetId, oldName, newName));\n      }\n\n      return oldName;\n    }\n  }, {\n    key: \"clearSheet\",\n    value: function clearSheet(sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n      this.operations.clearSheet(sheetId);\n      this.undoRedo.saveOperation(new ClearSheetUndoEntry(sheetId, oldSheetContent));\n    }\n  }, {\n    key: \"setCellContents\",\n    value: function setCellContents(topLeftCornerAddress, cellContents) {\n      if (!(cellContents instanceof Array)) {\n        cellContents = [[cellContents]];\n      } else {\n        for (var i = 0; i < cellContents.length; i++) {\n          if (!(cellContents[i] instanceof Array)) {\n            throw new InvalidArgumentsError('an array of arrays or a raw cell value.');\n          }\n        }\n      }\n\n      this.ensureItIsPossibleToChangeCellContents(topLeftCornerAddress, cellContents);\n      this.undoRedo.clearRedoStack();\n      var oldContents = [];\n\n      for (var _i = 0; _i < cellContents.length; _i++) {\n        for (var j = 0; j < cellContents[_i].length; j++) {\n          var address = {\n            sheet: topLeftCornerAddress.sheet,\n            row: topLeftCornerAddress.row + _i,\n            col: topLeftCornerAddress.col + j\n          };\n          var newContent = cellContents[_i][j];\n          this.clipboardOperations.abortCut();\n          var oldContent = this.operations.setCellContent(address, newContent);\n          oldContents.push({\n            address: address,\n            newContent: newContent,\n            oldContent: oldContent\n          });\n        }\n      }\n\n      this.undoRedo.saveOperation(new SetCellContentsUndoEntry(oldContents));\n    }\n  }, {\n    key: \"setSheetContent\",\n    value: function setSheetContent(sheetId, values) {\n      this.ensureScopeIdIsValid(sheetId);\n      this.ensureItIsPossibleToChangeSheetContents(sheetId, values);\n      validateAsSheet(values);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n      this.operations.setSheetContent(sheetId, values);\n      this.undoRedo.saveOperation(new SetSheetContentUndoEntry(sheetId, oldSheetContent, values));\n    }\n  }, {\n    key: \"setRowOrder\",\n    value: function setRowOrder(sheetId, rowMapping) {\n      this.validateSwapRowIndexes(sheetId, rowMapping);\n      this.testRowOrderForArrays(sheetId, rowMapping);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldContent = this.operations.setRowOrder(sheetId, rowMapping);\n      this.undoRedo.saveOperation(new SetRowOrderUndoEntry(sheetId, rowMapping, oldContent));\n    }\n  }, {\n    key: \"validateSwapRowIndexes\",\n    value: function validateSwapRowIndexes(sheetId, rowMapping) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      this.validateRowOrColumnMapping(sheetId, rowMapping, 'row');\n    }\n  }, {\n    key: \"testColumnOrderForArrays\",\n    value: function testColumnOrderForArrays(sheetId, columnMapping) {\n      var _iterator = _createForOfIteratorHelper(columnMapping),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              source = _step$value[0],\n              target = _step$value[1];\n\n          if (source !== target) {\n            var rowRange = AbsoluteCellRange.spanFrom({\n              sheet: sheetId,\n              col: source,\n              row: 0\n            }, 1, Infinity);\n\n            if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(rowRange)) {\n              throw new SourceLocationHasArrayError();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"setColumnOrder\",\n    value: function setColumnOrder(sheetId, columnMapping) {\n      this.validateSwapColumnIndexes(sheetId, columnMapping);\n      this.testColumnOrderForArrays(sheetId, columnMapping);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldContent = this.operations.setColumnOrder(sheetId, columnMapping);\n      this.undoRedo.saveOperation(new SetColumnOrderUndoEntry(sheetId, columnMapping, oldContent));\n    }\n  }, {\n    key: \"validateSwapColumnIndexes\",\n    value: function validateSwapColumnIndexes(sheetId, columnMapping) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      this.validateRowOrColumnMapping(sheetId, columnMapping, 'column');\n    }\n  }, {\n    key: \"testRowOrderForArrays\",\n    value: function testRowOrderForArrays(sheetId, rowMapping) {\n      var _iterator2 = _createForOfIteratorHelper(rowMapping),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              source = _step2$value[0],\n              target = _step2$value[1];\n\n          if (source !== target) {\n            var rowRange = AbsoluteCellRange.spanFrom({\n              sheet: sheetId,\n              col: 0,\n              row: source\n            }, Infinity, 1);\n\n            if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(rowRange)) {\n              throw new SourceLocationHasArrayError();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"mappingFromOrder\",\n    value: function mappingFromOrder(sheetId, newOrder, rowOrColumn) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);\n\n      if (newOrder.length !== limit) {\n        throw new InvalidArgumentsError(\"number of \".concat(rowOrColumn, \"s provided to be sheet \").concat(rowOrColumn === 'row' ? 'height' : 'width', \".\"));\n      }\n\n      var ret = [];\n\n      for (var i = 0; i < limit; i++) {\n        if (newOrder[i] !== i) {\n          ret.push([i, newOrder[i]]);\n        }\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"validateRowOrColumnMapping\",\n    value: function validateRowOrColumnMapping(sheetId, rowMapping, rowOrColumn) {\n      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);\n      var sources = rowMapping.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            a = _ref2[0],\n            _ = _ref2[1];\n\n        return a;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n      var targets = rowMapping.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            _ = _ref4[0],\n            b = _ref4[1];\n\n        return b;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n\n      for (var i = 0; i < sources.length; i++) {\n        if (!isNonnegativeInteger(sources[i]) || sources[i] >= limit) {\n          throw new InvalidArgumentsError(\"\".concat(rowOrColumn, \" numbers to be nonnegative integers and less than sheet \").concat(rowOrColumn === 'row' ? 'height' : 'width', \".\"));\n        }\n\n        if (sources[i] === sources[i + 1]) {\n          throw new InvalidArgumentsError(\"source \".concat(rowOrColumn, \" numbers to be unique.\"));\n        }\n\n        if (sources[i] !== targets[i]) {\n          throw new InvalidArgumentsError(\"target \".concat(rowOrColumn, \" numbers to be permutation of source \").concat(rowOrColumn, \" numbers.\"));\n        }\n      }\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      if (this.undoRedo.isUndoStackEmpty()) {\n        throw new NoOperationToUndoError();\n      }\n\n      this.clipboardOperations.abortCut();\n      this.undoRedo.undo();\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      if (this.undoRedo.isRedoStackEmpty()) {\n        throw new NoOperationToRedoError();\n      }\n\n      this.clipboardOperations.abortCut();\n      this.undoRedo.redo();\n    }\n  }, {\n    key: \"addNamedExpression\",\n    value: function addNamedExpression(expressionName, expression, sheetId, options) {\n      this.ensureItIsPossibleToAddNamedExpression(expressionName, expression, sheetId);\n      this.operations.addNamedExpression(expressionName, expression, sheetId, options);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new AddNamedExpressionUndoEntry(expressionName, expression, sheetId, options));\n    }\n  }, {\n    key: \"changeNamedExpressionExpression\",\n    value: function changeNamedExpressionExpression(expressionName, sheetId, newExpression, options) {\n      this.ensureItIsPossibleToChangeNamedExpression(expressionName, newExpression, sheetId);\n\n      var _this$operations$chan = this.operations.changeNamedExpressionExpression(expressionName, newExpression, sheetId, options),\n          _this$operations$chan2 = _slicedToArray(_this$operations$chan, 2),\n          oldNamedExpression = _this$operations$chan2[0],\n          content = _this$operations$chan2[1];\n\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new ChangeNamedExpressionUndoEntry(oldNamedExpression, newExpression, content, sheetId, options));\n    }\n  }, {\n    key: \"removeNamedExpression\",\n    value: function removeNamedExpression(expressionName, sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n\n      var _this$operations$remo2 = this.operations.removeNamedExpression(expressionName, sheetId),\n          _this$operations$remo3 = _slicedToArray(_this$operations$remo2, 2),\n          namedExpression = _this$operations$remo3[0],\n          content = _this$operations$remo3[1];\n\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new RemoveNamedExpressionUndoEntry(namedExpression, content, sheetId));\n      return namedExpression;\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddNamedExpression\",\n    value: function ensureItIsPossibleToAddNamedExpression(expressionName, expression, sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n      this.ensureNamedExpressionNameIsValid(expressionName, sheetId);\n      this.ensureNamedExpressionIsValid(expression);\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeNamedExpression\",\n    value: function ensureItIsPossibleToChangeNamedExpression(expressionName, expression, sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n\n      if (this.namedExpressions.namedExpressionForScope(expressionName, sheetId) === undefined) {\n        throw new NamedExpressionDoesNotExistError(expressionName);\n      }\n\n      this.ensureNamedExpressionIsValid(expression);\n    }\n  }, {\n    key: \"isItPossibleToRemoveNamedExpression\",\n    value: function isItPossibleToRemoveNamedExpression(expressionName, sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n\n      if (this.namedExpressions.namedExpressionForScope(expressionName, sheetId) === undefined) {\n        throw new NamedExpressionDoesNotExistError(expressionName);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddRows\",\n    value: function ensureItIsPossibleToAddRows(sheet) {\n      if (!this.sheetMapping.hasSheetWithId(sheet)) {\n        throw new NoSheetWithIdError(sheet);\n      }\n\n      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);\n\n      for (var _len5 = arguments.length, indexes = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        indexes[_key5 - 1] = arguments[_key5];\n      }\n\n      var newRowsCount = indexes.map(function (index) {\n        return index[1];\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      if (sheetHeight + newRowsCount > this.maxRows) {\n        throw new SheetSizeLimitExceededError();\n      }\n\n      for (var _i2 = 0, _indexes = indexes; _i2 < _indexes.length; _i2++) {\n        var _indexes$_i = _slicedToArray(_indexes[_i2], 2),\n            row = _indexes$_i[0],\n            numberOfRowsToAdd = _indexes$_i[1];\n\n        if (!isNonnegativeInteger(row) || !isPositiveInteger(numberOfRowsToAdd)) {\n          throw new InvalidArgumentsError('row number to be nonnegative and number of rows to add to be positive.');\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRemoveRows\",\n    value: function ensureItIsPossibleToRemoveRows(sheet) {\n      for (var _len6 = arguments.length, indexes = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        indexes[_key6 - 1] = arguments[_key6];\n      }\n\n      for (var _i3 = 0, _indexes2 = indexes; _i3 < _indexes2.length; _i3++) {\n        var _indexes2$_i = _slicedToArray(_indexes2[_i3], 2),\n            rowStart = _indexes2$_i[0],\n            numberOfRows = _indexes2$_i[1];\n\n        var rowEnd = rowStart + numberOfRows - 1;\n\n        if (!isNonnegativeInteger(rowStart) || !isNonnegativeInteger(rowEnd)) {\n          throw new InvalidArgumentsError('starting and ending row to be nonnegative.');\n        }\n\n        if (rowEnd < rowStart) {\n          throw new InvalidArgumentsError('starting row to be smaller than the ending row.');\n        }\n\n        if (!this.sheetMapping.hasSheetWithId(sheet)) {\n          throw new NoSheetWithIdError(sheet);\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddColumns\",\n    value: function ensureItIsPossibleToAddColumns(sheet) {\n      if (!this.sheetMapping.hasSheetWithId(sheet)) {\n        throw new NoSheetWithIdError(sheet);\n      }\n\n      var sheetWidth = this.dependencyGraph.getSheetWidth(sheet);\n\n      for (var _len7 = arguments.length, indexes = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        indexes[_key7 - 1] = arguments[_key7];\n      }\n\n      var newColumnsCount = indexes.map(function (index) {\n        return index[1];\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      if (sheetWidth + newColumnsCount > this.maxColumns) {\n        throw new SheetSizeLimitExceededError();\n      }\n\n      for (var _i4 = 0, _indexes3 = indexes; _i4 < _indexes3.length; _i4++) {\n        var _indexes3$_i = _slicedToArray(_indexes3[_i4], 2),\n            column = _indexes3$_i[0],\n            numberOfColumnsToAdd = _indexes3$_i[1];\n\n        if (!isNonnegativeInteger(column) || !isPositiveInteger(numberOfColumnsToAdd)) {\n          throw new InvalidArgumentsError('column number to be nonnegative and number of columns to add to be positive.');\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRemoveColumns\",\n    value: function ensureItIsPossibleToRemoveColumns(sheet) {\n      for (var _len8 = arguments.length, indexes = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        indexes[_key8 - 1] = arguments[_key8];\n      }\n\n      for (var _i5 = 0, _indexes4 = indexes; _i5 < _indexes4.length; _i5++) {\n        var _indexes4$_i = _slicedToArray(_indexes4[_i5], 2),\n            columnStart = _indexes4$_i[0],\n            numberOfColumns = _indexes4$_i[1];\n\n        var columnEnd = columnStart + numberOfColumns - 1;\n\n        if (!isNonnegativeInteger(columnStart) || !isNonnegativeInteger(columnEnd)) {\n          throw new InvalidArgumentsError('starting and ending column to be nonnegative.');\n        }\n\n        if (columnEnd < columnStart) {\n          throw new InvalidArgumentsError('starting column to be smaller than the ending column.');\n        }\n\n        if (!this.sheetMapping.hasSheetWithId(sheet)) {\n          throw new NoSheetWithIdError(sheet);\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToMoveRows\",\n    value: function ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow) {\n      this.ensureItIsPossibleToAddRows(sheet, [targetRow, numberOfRows]);\n      var sourceStart = simpleCellAddress(sheet, 0, startRow);\n      var targetStart = simpleCellAddress(sheet, 0, targetRow);\n\n      if (!this.sheetMapping.hasSheetWithId(sheet) || invalidSimpleCellAddress(sourceStart) || invalidSimpleCellAddress(targetStart) || !isPositiveInteger(numberOfRows) || targetRow <= startRow + numberOfRows && targetRow >= startRow) {\n        throw new InvalidArgumentsError('a valid range of rows to move.');\n      }\n\n      var width = this.dependencyGraph.getSheetWidth(sheet);\n      var sourceRange = AbsoluteCellRange.spanFrom(sourceStart, width, numberOfRows);\n\n      if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(sourceRange)) {\n        throw new SourceLocationHasArrayError();\n      }\n\n      if (targetRow > 0 && this.dependencyGraph.arrayMapping.isFormulaArrayInAllRows(RowsSpan.fromNumberOfRows(sheet, targetRow - 1, 2))) {\n        throw new TargetLocationHasArrayError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToMoveColumns\",\n    value: function ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn) {\n      this.ensureItIsPossibleToAddColumns(sheet, [targetColumn, numberOfColumns]);\n      var sourceStart = simpleCellAddress(sheet, startColumn, 0);\n      var targetStart = simpleCellAddress(sheet, targetColumn, 0);\n\n      if (!this.sheetMapping.hasSheetWithId(sheet) || invalidSimpleCellAddress(sourceStart) || invalidSimpleCellAddress(targetStart) || !isPositiveInteger(numberOfColumns) || targetColumn <= startColumn + numberOfColumns && targetColumn >= startColumn) {\n        throw new InvalidArgumentsError('a valid range of columns to move.');\n      }\n\n      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);\n      var sourceRange = AbsoluteCellRange.spanFrom(sourceStart, numberOfColumns, sheetHeight);\n\n      if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(sourceRange)) {\n        throw new SourceLocationHasArrayError();\n      }\n\n      if (targetColumn > 0 && this.dependencyGraph.arrayMapping.isFormulaArrayInAllColumns(ColumnsSpan.fromNumberOfColumns(sheet, targetColumn - 1, 2))) {\n        throw new TargetLocationHasArrayError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddSheet\",\n    value: function ensureItIsPossibleToAddSheet(name) {\n      if (this.sheetMapping.hasSheetWithName(name)) {\n        throw new SheetNameAlreadyTakenError(name);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRenameSheet\",\n    value: function ensureItIsPossibleToRenameSheet(sheetId, name) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      var existingSheetId = this.sheetMapping.get(name);\n\n      if (existingSheetId !== undefined && existingSheetId !== sheetId) {\n        throw new SheetNameAlreadyTakenError(name);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeContent\",\n    value: function ensureItIsPossibleToChangeContent(address) {\n      if (invalidSimpleCellAddress(address)) {\n        throw new InvalidAddressError(address);\n      }\n\n      if (!this.sheetMapping.hasSheetWithId(address.sheet)) {\n        throw new NoSheetWithIdError(address.sheet);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeCellContents\",\n    value: function ensureItIsPossibleToChangeCellContents(inputAddress, content) {\n      var boundaries = findBoundaries(content);\n      var targetRange = AbsoluteCellRange.spanFrom(inputAddress, boundaries.width, boundaries.height);\n      this.ensureRangeInSizeLimits(targetRange);\n\n      var _iterator3 = _createForOfIteratorHelper(targetRange.addresses(this.dependencyGraph)),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var address = _step3.value;\n          this.ensureItIsPossibleToChangeContent(address);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeSheetContents\",\n    value: function ensureItIsPossibleToChangeSheetContents(sheetId, content) {\n      var boundaries = findBoundaries(content);\n      var targetRange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheetId, 0, 0), boundaries.width, boundaries.height);\n      this.ensureRangeInSizeLimits(targetRange);\n    }\n  }, {\n    key: \"ensureRangeInSizeLimits\",\n    value: function ensureRangeInSizeLimits(range) {\n      if (range.exceedsSheetSizeLimits(this.maxColumns, this.maxRows)) {\n        throw new SheetSizeLimitExceededError();\n      }\n    }\n  }, {\n    key: \"isThereSomethingToUndo\",\n    value: function isThereSomethingToUndo() {\n      return !this.undoRedo.isUndoStackEmpty();\n    }\n  }, {\n    key: \"isThereSomethingToRedo\",\n    value: function isThereSomethingToRedo() {\n      return !this.undoRedo.isRedoStackEmpty();\n    }\n  }, {\n    key: \"getAndClearContentChanges\",\n    value: function getAndClearContentChanges() {\n      return this.operations.getAndClearContentChanges();\n    }\n  }, {\n    key: \"ensureScopeIdIsValid\",\n    value: function ensureScopeIdIsValid(scopeId) {\n      if (scopeId !== undefined && !this.sheetMapping.hasSheetWithId(scopeId)) {\n        throw new NoSheetWithIdError(scopeId);\n      }\n    }\n  }, {\n    key: \"sheetMapping\",\n    get: function get() {\n      return this.dependencyGraph.sheetMapping;\n    }\n  }, {\n    key: \"ensureNamedExpressionNameIsValid\",\n    value: function ensureNamedExpressionNameIsValid(expressionName, sheetId) {\n      if (!this.namedExpressions.isNameValid(expressionName)) {\n        throw new NamedExpressionNameIsInvalidError(expressionName);\n      }\n\n      if (!this.namedExpressions.isNameAvailable(expressionName, sheetId)) {\n        throw new NamedExpressionNameIsAlreadyTakenError(expressionName);\n      }\n    }\n  }, {\n    key: \"ensureNamedExpressionIsValid\",\n    value: function ensureNamedExpressionIsValid(expression) {\n      var parsedExpression = this.cellContentParser.parse(expression);\n\n      if (parsedExpression instanceof CellContent.Formula) {\n        var parsingResult = this.parser.parse(parsedExpression.formula, simpleCellAddress(-1, 0, 0));\n\n        if (doesContainRelativeReferences(parsingResult.ast)) {\n          throw new NoRelativeAddressesAllowedError();\n        }\n      }\n    }\n  }]);\n\n  return CrudOperations;\n}();\n\nfunction isPositiveInteger(x) {\n  return Number.isInteger(x) && x > 0;\n}\n\nfunction isNonnegativeInteger(x) {\n  return Number.isInteger(x) && x >= 0;\n}","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/CrudOperations.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","Symbol","iterator","_arr","_n","_d","_s","_e","call","next","done","push","value","length","err","Array","isArray","_createForOfIteratorHelper","o","allowArrayLike","it","F","s","n","e","_e2","f","normalCompletion","didErr","step","_e3","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","AbsoluteCellRange","invalidSimpleCellAddress","simpleCellAddress","CellContent","InvalidAddressError","InvalidArgumentsError","NamedExpressionDoesNotExistError","NamedExpressionNameIsAlreadyTakenError","NamedExpressionNameIsInvalidError","NoOperationToRedoError","NoOperationToUndoError","NoRelativeAddressesAllowedError","NoSheetWithIdError","NothingToPasteError","SheetNameAlreadyTakenError","SheetSizeLimitExceededError","SourceLocationHasArrayError","TargetLocationHasArrayError","doesContainRelativeReferences","AddColumnsCommand","AddRowsCommand","RemoveColumnsCommand","RemoveRowsCommand","findBoundaries","validateAsSheet","ColumnsSpan","RowsSpan","AddColumnsUndoEntry","AddNamedExpressionUndoEntry","AddRowsUndoEntry","AddSheetUndoEntry","ChangeNamedExpressionUndoEntry","ClearSheetUndoEntry","MoveCellsUndoEntry","MoveColumnsUndoEntry","MoveRowsUndoEntry","PasteUndoEntry","RemoveColumnsUndoEntry","RemoveNamedExpressionUndoEntry","RemoveRowsUndoEntry","RemoveSheetUndoEntry","RenameSheetUndoEntry","SetCellContentsUndoEntry","SetColumnOrderUndoEntry","SetRowOrderUndoEntry","SetSheetContentUndoEntry","CrudOperations","config","operations","undoRedo","clipboardOperations","dependencyGraph","columnSearch","parser","cellContentParser","lazilyTransformingAstService","namedExpressions","maxRows","maxColumns","addRows","sheet","_len","arguments","indexes","_key","addRowsCommand","ensureItIsPossibleToAddRows","apply","concat","clearRedoStack","abortCut","saveOperation","removeRows","_len2","_key2","removeRowsCommand","ensureItIsPossibleToRemoveRows","rowsRemovals","addColumns","_len3","_key3","addColumnsCommand","ensureItIsPossibleToAddColumns","removeColumns","_len4","_key4","removeColumnsCommand","ensureItIsPossibleToRemoveColumns","columnsRemovals","moveCells","sourceLeftCorner","width","height","destinationLeftCorner","_this$operations$move","version","overwrittenCellsData","addedGlobalNamedExpressions","moveRows","startRow","numberOfRows","targetRow","ensureItIsPossibleToMoveRows","moveColumns","startColumn","numberOfColumns","targetColumn","ensureItIsPossibleToMoveColumns","cut","ensureItIsPossibleToCopy","isPositiveInteger","copy","paste","targetLeftCorner","clipboard","undefined","isCutClipboard","isCopyClipboard","ensureItIsPossibleToCopyPaste","targetRange","spanFrom","oldContent","getRangeClipboardCells","restoreClipboardCells","getContent","content","beginUndoRedoBatchMode","beginBatchMode","commitUndoRedoBatchMode","commitBatchMode","isClipboardEmpty","clearClipboard","clear","addSheet","ensureItIsPossibleToAddSheet","addedSheetName","removeSheet","sheetId","ensureScopeIdIsValid","originalName","sheetMapping","fetchDisplayName","oldSheetContent","getSheetClipboardCells","_this$operations$remo","scopedNamedExpressions","renameSheet","newName","ensureItIsPossibleToRenameSheet","oldName","clearSheet","setCellContents","topLeftCornerAddress","cellContents","ensureItIsPossibleToChangeCellContents","oldContents","j","address","row","col","newContent","setCellContent","setSheetContent","values","ensureItIsPossibleToChangeSheetContents","setRowOrder","rowMapping","validateSwapRowIndexes","testRowOrderForArrays","hasSheetWithId","validateRowOrColumnMapping","testColumnOrderForArrays","columnMapping","_iterator","_step","_step$value","source","rowRange","Infinity","arrayMapping","isFormulaArrayInRange","setColumnOrder","validateSwapColumnIndexes","_iterator2","_step2","_step2$value","mappingFromOrder","newOrder","rowOrColumn","limit","getSheetHeight","getSheetWidth","ret","sources","map","_ref","_ref2","a","_","sort","b","targets","_ref3","_ref4","isNonnegativeInteger","undo","isUndoStackEmpty","redo","isRedoStackEmpty","addNamedExpression","expressionName","expression","options","ensureItIsPossibleToAddNamedExpression","changeNamedExpressionExpression","newExpression","ensureItIsPossibleToChangeNamedExpression","_this$operations$chan","_this$operations$chan2","oldNamedExpression","removeNamedExpression","_this$operations$remo2","_this$operations$remo3","namedExpression","ensureNamedExpressionNameIsValid","ensureNamedExpressionIsValid","namedExpressionForScope","isItPossibleToRemoveNamedExpression","sheetHeight","_len5","_key5","newRowsCount","index","reduce","_i2","_indexes","_indexes$_i","numberOfRowsToAdd","_len6","_key6","_i3","_indexes2","_indexes2$_i","rowStart","rowEnd","sheetWidth","_len7","_key7","newColumnsCount","_i4","_indexes3","_indexes3$_i","column","numberOfColumnsToAdd","_len8","_key8","_i5","_indexes4","_indexes4$_i","columnStart","columnEnd","sourceStart","targetStart","sourceRange","isFormulaArrayInAllRows","fromNumberOfRows","isFormulaArrayInAllColumns","fromNumberOfColumns","hasSheetWithName","existingSheetId","get","ensureItIsPossibleToChangeContent","inputAddress","boundaries","ensureRangeInSizeLimits","_iterator3","addresses","_step3","range","exceedsSheetSizeLimits","isThereSomethingToUndo","isThereSomethingToRedo","getAndClearContentChanges","scopeId","isNameValid","isNameAvailable","parsedExpression","parse","Formula","parsingResult","formula","ast","x","Number","isInteger"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { AbsoluteCellRange } from './AbsoluteCellRange';\nimport { invalidSimpleCellAddress, simpleCellAddress } from './Cell';\nimport { CellContent } from './CellContentParser';\nimport { InvalidAddressError, InvalidArgumentsError, NamedExpressionDoesNotExistError, NamedExpressionNameIsAlreadyTakenError, NamedExpressionNameIsInvalidError, NoOperationToRedoError, NoOperationToUndoError, NoRelativeAddressesAllowedError, NoSheetWithIdError, NothingToPasteError, SheetNameAlreadyTakenError, SheetSizeLimitExceededError, SourceLocationHasArrayError, TargetLocationHasArrayError } from './errors';\nimport { doesContainRelativeReferences } from './NamedExpressions';\nimport { AddColumnsCommand, AddRowsCommand, RemoveColumnsCommand, RemoveRowsCommand } from './Operations';\nimport { findBoundaries, validateAsSheet } from './Sheet';\nimport { ColumnsSpan, RowsSpan } from './Span';\nimport { AddColumnsUndoEntry, AddNamedExpressionUndoEntry, AddRowsUndoEntry, AddSheetUndoEntry, ChangeNamedExpressionUndoEntry, ClearSheetUndoEntry, MoveCellsUndoEntry, MoveColumnsUndoEntry, MoveRowsUndoEntry, PasteUndoEntry, RemoveColumnsUndoEntry, RemoveNamedExpressionUndoEntry, RemoveRowsUndoEntry, RemoveSheetUndoEntry, RenameSheetUndoEntry, SetCellContentsUndoEntry, SetColumnOrderUndoEntry, SetRowOrderUndoEntry, SetSheetContentUndoEntry } from './UndoRedo';\nexport var CrudOperations = /*#__PURE__*/function () {\n  function CrudOperations(config, operations, undoRedo, clipboardOperations, dependencyGraph, columnSearch, parser, cellContentParser, lazilyTransformingAstService, namedExpressions) {\n    _classCallCheck(this, CrudOperations);\n\n    this.operations = operations;\n    this.undoRedo = undoRedo;\n    this.clipboardOperations = clipboardOperations;\n    this.dependencyGraph = dependencyGraph;\n    this.columnSearch = columnSearch;\n    this.parser = parser;\n    this.cellContentParser = cellContentParser;\n    this.lazilyTransformingAstService = lazilyTransformingAstService;\n    this.namedExpressions = namedExpressions;\n    this.maxRows = config.maxRows;\n    this.maxColumns = config.maxColumns;\n  }\n\n  _createClass(CrudOperations, [{\n    key: \"addRows\",\n    value: function addRows(sheet) {\n      for (var _len = arguments.length, indexes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        indexes[_key - 1] = arguments[_key];\n      }\n\n      var addRowsCommand = new AddRowsCommand(sheet, indexes);\n      this.ensureItIsPossibleToAddRows.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.operations.addRows(addRowsCommand);\n      this.undoRedo.saveOperation(new AddRowsUndoEntry(addRowsCommand));\n    }\n  }, {\n    key: \"removeRows\",\n    value: function removeRows(sheet) {\n      for (var _len2 = arguments.length, indexes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        indexes[_key2 - 1] = arguments[_key2];\n      }\n\n      var removeRowsCommand = new RemoveRowsCommand(sheet, indexes);\n      this.ensureItIsPossibleToRemoveRows.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var rowsRemovals = this.operations.removeRows(removeRowsCommand);\n      this.undoRedo.saveOperation(new RemoveRowsUndoEntry(removeRowsCommand, rowsRemovals));\n    }\n  }, {\n    key: \"addColumns\",\n    value: function addColumns(sheet) {\n      for (var _len3 = arguments.length, indexes = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        indexes[_key3 - 1] = arguments[_key3];\n      }\n\n      var addColumnsCommand = new AddColumnsCommand(sheet, indexes);\n      this.ensureItIsPossibleToAddColumns.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.operations.addColumns(addColumnsCommand);\n      this.undoRedo.saveOperation(new AddColumnsUndoEntry(addColumnsCommand));\n    }\n  }, {\n    key: \"removeColumns\",\n    value: function removeColumns(sheet) {\n      for (var _len4 = arguments.length, indexes = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        indexes[_key4 - 1] = arguments[_key4];\n      }\n\n      var removeColumnsCommand = new RemoveColumnsCommand(sheet, indexes);\n      this.ensureItIsPossibleToRemoveColumns.apply(this, [sheet].concat(indexes));\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var columnsRemovals = this.operations.removeColumns(removeColumnsCommand);\n      this.undoRedo.saveOperation(new RemoveColumnsUndoEntry(removeColumnsCommand, columnsRemovals));\n    }\n  }, {\n    key: \"moveCells\",\n    value: function moveCells(sourceLeftCorner, width, height, destinationLeftCorner) {\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n\n      var _this$operations$move = this.operations.moveCells(sourceLeftCorner, width, height, destinationLeftCorner),\n          version = _this$operations$move.version,\n          overwrittenCellsData = _this$operations$move.overwrittenCellsData,\n          addedGlobalNamedExpressions = _this$operations$move.addedGlobalNamedExpressions;\n\n      this.undoRedo.saveOperation(new MoveCellsUndoEntry(sourceLeftCorner, width, height, destinationLeftCorner, overwrittenCellsData, addedGlobalNamedExpressions, version));\n    }\n  }, {\n    key: \"moveRows\",\n    value: function moveRows(sheet, startRow, numberOfRows, targetRow) {\n      this.ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var version = this.operations.moveRows(sheet, startRow, numberOfRows, targetRow);\n      this.undoRedo.saveOperation(new MoveRowsUndoEntry(sheet, startRow, numberOfRows, targetRow, version));\n    }\n  }, {\n    key: \"moveColumns\",\n    value: function moveColumns(sheet, startColumn, numberOfColumns, targetColumn) {\n      this.ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn);\n      this.undoRedo.clearRedoStack();\n      var version = this.operations.moveColumns(sheet, startColumn, numberOfColumns, targetColumn);\n      this.undoRedo.saveOperation(new MoveColumnsUndoEntry(sheet, startColumn, numberOfColumns, targetColumn, version));\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(sourceLeftCorner, width, height) {\n      this.clipboardOperations.cut(sourceLeftCorner, width, height);\n    }\n  }, {\n    key: \"ensureItIsPossibleToCopy\",\n    value: function ensureItIsPossibleToCopy(sourceLeftCorner, width, height) {\n      if (!isPositiveInteger(width)) {\n        throw new InvalidArgumentsError('width to be positive integer.');\n      }\n\n      if (!isPositiveInteger(height)) {\n        throw new InvalidArgumentsError('height to be positive integer.');\n      }\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(sourceLeftCorner, width, height) {\n      this.ensureItIsPossibleToCopy(sourceLeftCorner, width, height);\n      this.clipboardOperations.copy(sourceLeftCorner, width, height);\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(targetLeftCorner) {\n      var clipboard = this.clipboardOperations.clipboard;\n\n      if (clipboard === undefined) {\n        throw new NothingToPasteError();\n      } else if (this.clipboardOperations.isCutClipboard()) {\n        this.moveCells(clipboard.sourceLeftCorner, clipboard.width, clipboard.height, targetLeftCorner);\n      } else if (this.clipboardOperations.isCopyClipboard()) {\n        this.clipboardOperations.ensureItIsPossibleToCopyPaste(targetLeftCorner);\n        var targetRange = AbsoluteCellRange.spanFrom(targetLeftCorner, clipboard.width, clipboard.height);\n        var oldContent = this.operations.getRangeClipboardCells(targetRange);\n        this.undoRedo.clearRedoStack();\n        var addedGlobalNamedExpressions = this.operations.restoreClipboardCells(clipboard.sourceLeftCorner.sheet, clipboard.getContent(targetLeftCorner));\n        this.undoRedo.saveOperation(new PasteUndoEntry(targetLeftCorner, oldContent, clipboard.content, addedGlobalNamedExpressions));\n      }\n    }\n  }, {\n    key: \"beginUndoRedoBatchMode\",\n    value: function beginUndoRedoBatchMode() {\n      this.undoRedo.beginBatchMode();\n    }\n  }, {\n    key: \"commitUndoRedoBatchMode\",\n    value: function commitUndoRedoBatchMode() {\n      this.undoRedo.commitBatchMode();\n    }\n  }, {\n    key: \"isClipboardEmpty\",\n    value: function isClipboardEmpty() {\n      return this.clipboardOperations.clipboard === undefined;\n    }\n  }, {\n    key: \"clearClipboard\",\n    value: function clearClipboard() {\n      this.clipboardOperations.clear();\n    }\n  }, {\n    key: \"addSheet\",\n    value: function addSheet(name) {\n      if (name !== undefined) {\n        this.ensureItIsPossibleToAddSheet(name);\n      }\n\n      this.undoRedo.clearRedoStack();\n      var addedSheetName = this.operations.addSheet(name);\n      this.undoRedo.saveOperation(new AddSheetUndoEntry(addedSheetName));\n      return addedSheetName;\n    }\n  }, {\n    key: \"removeSheet\",\n    value: function removeSheet(sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var originalName = this.sheetMapping.fetchDisplayName(sheetId);\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n\n      var _this$operations$remo = this.operations.removeSheet(sheetId),\n          version = _this$operations$remo.version,\n          scopedNamedExpressions = _this$operations$remo.scopedNamedExpressions;\n\n      this.undoRedo.saveOperation(new RemoveSheetUndoEntry(originalName, sheetId, oldSheetContent, scopedNamedExpressions, version));\n    }\n  }, {\n    key: \"renameSheet\",\n    value: function renameSheet(sheetId, newName) {\n      this.ensureItIsPossibleToRenameSheet(sheetId, newName);\n      var oldName = this.operations.renameSheet(sheetId, newName);\n\n      if (oldName !== undefined) {\n        this.undoRedo.clearRedoStack();\n        this.undoRedo.saveOperation(new RenameSheetUndoEntry(sheetId, oldName, newName));\n      }\n\n      return oldName;\n    }\n  }, {\n    key: \"clearSheet\",\n    value: function clearSheet(sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n      this.operations.clearSheet(sheetId);\n      this.undoRedo.saveOperation(new ClearSheetUndoEntry(sheetId, oldSheetContent));\n    }\n  }, {\n    key: \"setCellContents\",\n    value: function setCellContents(topLeftCornerAddress, cellContents) {\n      if (!(cellContents instanceof Array)) {\n        cellContents = [[cellContents]];\n      } else {\n        for (var i = 0; i < cellContents.length; i++) {\n          if (!(cellContents[i] instanceof Array)) {\n            throw new InvalidArgumentsError('an array of arrays or a raw cell value.');\n          }\n        }\n      }\n\n      this.ensureItIsPossibleToChangeCellContents(topLeftCornerAddress, cellContents);\n      this.undoRedo.clearRedoStack();\n      var oldContents = [];\n\n      for (var _i = 0; _i < cellContents.length; _i++) {\n        for (var j = 0; j < cellContents[_i].length; j++) {\n          var address = {\n            sheet: topLeftCornerAddress.sheet,\n            row: topLeftCornerAddress.row + _i,\n            col: topLeftCornerAddress.col + j\n          };\n          var newContent = cellContents[_i][j];\n          this.clipboardOperations.abortCut();\n          var oldContent = this.operations.setCellContent(address, newContent);\n          oldContents.push({\n            address: address,\n            newContent: newContent,\n            oldContent: oldContent\n          });\n        }\n      }\n\n      this.undoRedo.saveOperation(new SetCellContentsUndoEntry(oldContents));\n    }\n  }, {\n    key: \"setSheetContent\",\n    value: function setSheetContent(sheetId, values) {\n      this.ensureScopeIdIsValid(sheetId);\n      this.ensureItIsPossibleToChangeSheetContents(sheetId, values);\n      validateAsSheet(values);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);\n      this.operations.setSheetContent(sheetId, values);\n      this.undoRedo.saveOperation(new SetSheetContentUndoEntry(sheetId, oldSheetContent, values));\n    }\n  }, {\n    key: \"setRowOrder\",\n    value: function setRowOrder(sheetId, rowMapping) {\n      this.validateSwapRowIndexes(sheetId, rowMapping);\n      this.testRowOrderForArrays(sheetId, rowMapping);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldContent = this.operations.setRowOrder(sheetId, rowMapping);\n      this.undoRedo.saveOperation(new SetRowOrderUndoEntry(sheetId, rowMapping, oldContent));\n    }\n  }, {\n    key: \"validateSwapRowIndexes\",\n    value: function validateSwapRowIndexes(sheetId, rowMapping) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      this.validateRowOrColumnMapping(sheetId, rowMapping, 'row');\n    }\n  }, {\n    key: \"testColumnOrderForArrays\",\n    value: function testColumnOrderForArrays(sheetId, columnMapping) {\n      var _iterator = _createForOfIteratorHelper(columnMapping),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              source = _step$value[0],\n              target = _step$value[1];\n\n          if (source !== target) {\n            var rowRange = AbsoluteCellRange.spanFrom({\n              sheet: sheetId,\n              col: source,\n              row: 0\n            }, 1, Infinity);\n\n            if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(rowRange)) {\n              throw new SourceLocationHasArrayError();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"setColumnOrder\",\n    value: function setColumnOrder(sheetId, columnMapping) {\n      this.validateSwapColumnIndexes(sheetId, columnMapping);\n      this.testColumnOrderForArrays(sheetId, columnMapping);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      var oldContent = this.operations.setColumnOrder(sheetId, columnMapping);\n      this.undoRedo.saveOperation(new SetColumnOrderUndoEntry(sheetId, columnMapping, oldContent));\n    }\n  }, {\n    key: \"validateSwapColumnIndexes\",\n    value: function validateSwapColumnIndexes(sheetId, columnMapping) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      this.validateRowOrColumnMapping(sheetId, columnMapping, 'column');\n    }\n  }, {\n    key: \"testRowOrderForArrays\",\n    value: function testRowOrderForArrays(sheetId, rowMapping) {\n      var _iterator2 = _createForOfIteratorHelper(rowMapping),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              source = _step2$value[0],\n              target = _step2$value[1];\n\n          if (source !== target) {\n            var rowRange = AbsoluteCellRange.spanFrom({\n              sheet: sheetId,\n              col: 0,\n              row: source\n            }, Infinity, 1);\n\n            if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(rowRange)) {\n              throw new SourceLocationHasArrayError();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"mappingFromOrder\",\n    value: function mappingFromOrder(sheetId, newOrder, rowOrColumn) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);\n\n      if (newOrder.length !== limit) {\n        throw new InvalidArgumentsError(\"number of \".concat(rowOrColumn, \"s provided to be sheet \").concat(rowOrColumn === 'row' ? 'height' : 'width', \".\"));\n      }\n\n      var ret = [];\n\n      for (var i = 0; i < limit; i++) {\n        if (newOrder[i] !== i) {\n          ret.push([i, newOrder[i]]);\n        }\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"validateRowOrColumnMapping\",\n    value: function validateRowOrColumnMapping(sheetId, rowMapping, rowOrColumn) {\n      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);\n      var sources = rowMapping.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            a = _ref2[0],\n            _ = _ref2[1];\n\n        return a;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n      var targets = rowMapping.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            _ = _ref4[0],\n            b = _ref4[1];\n\n        return b;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n\n      for (var i = 0; i < sources.length; i++) {\n        if (!isNonnegativeInteger(sources[i]) || sources[i] >= limit) {\n          throw new InvalidArgumentsError(\"\".concat(rowOrColumn, \" numbers to be nonnegative integers and less than sheet \").concat(rowOrColumn === 'row' ? 'height' : 'width', \".\"));\n        }\n\n        if (sources[i] === sources[i + 1]) {\n          throw new InvalidArgumentsError(\"source \".concat(rowOrColumn, \" numbers to be unique.\"));\n        }\n\n        if (sources[i] !== targets[i]) {\n          throw new InvalidArgumentsError(\"target \".concat(rowOrColumn, \" numbers to be permutation of source \").concat(rowOrColumn, \" numbers.\"));\n        }\n      }\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      if (this.undoRedo.isUndoStackEmpty()) {\n        throw new NoOperationToUndoError();\n      }\n\n      this.clipboardOperations.abortCut();\n      this.undoRedo.undo();\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      if (this.undoRedo.isRedoStackEmpty()) {\n        throw new NoOperationToRedoError();\n      }\n\n      this.clipboardOperations.abortCut();\n      this.undoRedo.redo();\n    }\n  }, {\n    key: \"addNamedExpression\",\n    value: function addNamedExpression(expressionName, expression, sheetId, options) {\n      this.ensureItIsPossibleToAddNamedExpression(expressionName, expression, sheetId);\n      this.operations.addNamedExpression(expressionName, expression, sheetId, options);\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new AddNamedExpressionUndoEntry(expressionName, expression, sheetId, options));\n    }\n  }, {\n    key: \"changeNamedExpressionExpression\",\n    value: function changeNamedExpressionExpression(expressionName, sheetId, newExpression, options) {\n      this.ensureItIsPossibleToChangeNamedExpression(expressionName, newExpression, sheetId);\n\n      var _this$operations$chan = this.operations.changeNamedExpressionExpression(expressionName, newExpression, sheetId, options),\n          _this$operations$chan2 = _slicedToArray(_this$operations$chan, 2),\n          oldNamedExpression = _this$operations$chan2[0],\n          content = _this$operations$chan2[1];\n\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new ChangeNamedExpressionUndoEntry(oldNamedExpression, newExpression, content, sheetId, options));\n    }\n  }, {\n    key: \"removeNamedExpression\",\n    value: function removeNamedExpression(expressionName, sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n\n      var _this$operations$remo2 = this.operations.removeNamedExpression(expressionName, sheetId),\n          _this$operations$remo3 = _slicedToArray(_this$operations$remo2, 2),\n          namedExpression = _this$operations$remo3[0],\n          content = _this$operations$remo3[1];\n\n      this.undoRedo.clearRedoStack();\n      this.clipboardOperations.abortCut();\n      this.undoRedo.saveOperation(new RemoveNamedExpressionUndoEntry(namedExpression, content, sheetId));\n      return namedExpression;\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddNamedExpression\",\n    value: function ensureItIsPossibleToAddNamedExpression(expressionName, expression, sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n      this.ensureNamedExpressionNameIsValid(expressionName, sheetId);\n      this.ensureNamedExpressionIsValid(expression);\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeNamedExpression\",\n    value: function ensureItIsPossibleToChangeNamedExpression(expressionName, expression, sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n\n      if (this.namedExpressions.namedExpressionForScope(expressionName, sheetId) === undefined) {\n        throw new NamedExpressionDoesNotExistError(expressionName);\n      }\n\n      this.ensureNamedExpressionIsValid(expression);\n    }\n  }, {\n    key: \"isItPossibleToRemoveNamedExpression\",\n    value: function isItPossibleToRemoveNamedExpression(expressionName, sheetId) {\n      this.ensureScopeIdIsValid(sheetId);\n\n      if (this.namedExpressions.namedExpressionForScope(expressionName, sheetId) === undefined) {\n        throw new NamedExpressionDoesNotExistError(expressionName);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddRows\",\n    value: function ensureItIsPossibleToAddRows(sheet) {\n      if (!this.sheetMapping.hasSheetWithId(sheet)) {\n        throw new NoSheetWithIdError(sheet);\n      }\n\n      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);\n\n      for (var _len5 = arguments.length, indexes = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        indexes[_key5 - 1] = arguments[_key5];\n      }\n\n      var newRowsCount = indexes.map(function (index) {\n        return index[1];\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      if (sheetHeight + newRowsCount > this.maxRows) {\n        throw new SheetSizeLimitExceededError();\n      }\n\n      for (var _i2 = 0, _indexes = indexes; _i2 < _indexes.length; _i2++) {\n        var _indexes$_i = _slicedToArray(_indexes[_i2], 2),\n            row = _indexes$_i[0],\n            numberOfRowsToAdd = _indexes$_i[1];\n\n        if (!isNonnegativeInteger(row) || !isPositiveInteger(numberOfRowsToAdd)) {\n          throw new InvalidArgumentsError('row number to be nonnegative and number of rows to add to be positive.');\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRemoveRows\",\n    value: function ensureItIsPossibleToRemoveRows(sheet) {\n      for (var _len6 = arguments.length, indexes = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        indexes[_key6 - 1] = arguments[_key6];\n      }\n\n      for (var _i3 = 0, _indexes2 = indexes; _i3 < _indexes2.length; _i3++) {\n        var _indexes2$_i = _slicedToArray(_indexes2[_i3], 2),\n            rowStart = _indexes2$_i[0],\n            numberOfRows = _indexes2$_i[1];\n\n        var rowEnd = rowStart + numberOfRows - 1;\n\n        if (!isNonnegativeInteger(rowStart) || !isNonnegativeInteger(rowEnd)) {\n          throw new InvalidArgumentsError('starting and ending row to be nonnegative.');\n        }\n\n        if (rowEnd < rowStart) {\n          throw new InvalidArgumentsError('starting row to be smaller than the ending row.');\n        }\n\n        if (!this.sheetMapping.hasSheetWithId(sheet)) {\n          throw new NoSheetWithIdError(sheet);\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddColumns\",\n    value: function ensureItIsPossibleToAddColumns(sheet) {\n      if (!this.sheetMapping.hasSheetWithId(sheet)) {\n        throw new NoSheetWithIdError(sheet);\n      }\n\n      var sheetWidth = this.dependencyGraph.getSheetWidth(sheet);\n\n      for (var _len7 = arguments.length, indexes = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        indexes[_key7 - 1] = arguments[_key7];\n      }\n\n      var newColumnsCount = indexes.map(function (index) {\n        return index[1];\n      }).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      if (sheetWidth + newColumnsCount > this.maxColumns) {\n        throw new SheetSizeLimitExceededError();\n      }\n\n      for (var _i4 = 0, _indexes3 = indexes; _i4 < _indexes3.length; _i4++) {\n        var _indexes3$_i = _slicedToArray(_indexes3[_i4], 2),\n            column = _indexes3$_i[0],\n            numberOfColumnsToAdd = _indexes3$_i[1];\n\n        if (!isNonnegativeInteger(column) || !isPositiveInteger(numberOfColumnsToAdd)) {\n          throw new InvalidArgumentsError('column number to be nonnegative and number of columns to add to be positive.');\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRemoveColumns\",\n    value: function ensureItIsPossibleToRemoveColumns(sheet) {\n      for (var _len8 = arguments.length, indexes = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        indexes[_key8 - 1] = arguments[_key8];\n      }\n\n      for (var _i5 = 0, _indexes4 = indexes; _i5 < _indexes4.length; _i5++) {\n        var _indexes4$_i = _slicedToArray(_indexes4[_i5], 2),\n            columnStart = _indexes4$_i[0],\n            numberOfColumns = _indexes4$_i[1];\n\n        var columnEnd = columnStart + numberOfColumns - 1;\n\n        if (!isNonnegativeInteger(columnStart) || !isNonnegativeInteger(columnEnd)) {\n          throw new InvalidArgumentsError('starting and ending column to be nonnegative.');\n        }\n\n        if (columnEnd < columnStart) {\n          throw new InvalidArgumentsError('starting column to be smaller than the ending column.');\n        }\n\n        if (!this.sheetMapping.hasSheetWithId(sheet)) {\n          throw new NoSheetWithIdError(sheet);\n        }\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToMoveRows\",\n    value: function ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow) {\n      this.ensureItIsPossibleToAddRows(sheet, [targetRow, numberOfRows]);\n      var sourceStart = simpleCellAddress(sheet, 0, startRow);\n      var targetStart = simpleCellAddress(sheet, 0, targetRow);\n\n      if (!this.sheetMapping.hasSheetWithId(sheet) || invalidSimpleCellAddress(sourceStart) || invalidSimpleCellAddress(targetStart) || !isPositiveInteger(numberOfRows) || targetRow <= startRow + numberOfRows && targetRow >= startRow) {\n        throw new InvalidArgumentsError('a valid range of rows to move.');\n      }\n\n      var width = this.dependencyGraph.getSheetWidth(sheet);\n      var sourceRange = AbsoluteCellRange.spanFrom(sourceStart, width, numberOfRows);\n\n      if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(sourceRange)) {\n        throw new SourceLocationHasArrayError();\n      }\n\n      if (targetRow > 0 && this.dependencyGraph.arrayMapping.isFormulaArrayInAllRows(RowsSpan.fromNumberOfRows(sheet, targetRow - 1, 2))) {\n        throw new TargetLocationHasArrayError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToMoveColumns\",\n    value: function ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn) {\n      this.ensureItIsPossibleToAddColumns(sheet, [targetColumn, numberOfColumns]);\n      var sourceStart = simpleCellAddress(sheet, startColumn, 0);\n      var targetStart = simpleCellAddress(sheet, targetColumn, 0);\n\n      if (!this.sheetMapping.hasSheetWithId(sheet) || invalidSimpleCellAddress(sourceStart) || invalidSimpleCellAddress(targetStart) || !isPositiveInteger(numberOfColumns) || targetColumn <= startColumn + numberOfColumns && targetColumn >= startColumn) {\n        throw new InvalidArgumentsError('a valid range of columns to move.');\n      }\n\n      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);\n      var sourceRange = AbsoluteCellRange.spanFrom(sourceStart, numberOfColumns, sheetHeight);\n\n      if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(sourceRange)) {\n        throw new SourceLocationHasArrayError();\n      }\n\n      if (targetColumn > 0 && this.dependencyGraph.arrayMapping.isFormulaArrayInAllColumns(ColumnsSpan.fromNumberOfColumns(sheet, targetColumn - 1, 2))) {\n        throw new TargetLocationHasArrayError();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToAddSheet\",\n    value: function ensureItIsPossibleToAddSheet(name) {\n      if (this.sheetMapping.hasSheetWithName(name)) {\n        throw new SheetNameAlreadyTakenError(name);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToRenameSheet\",\n    value: function ensureItIsPossibleToRenameSheet(sheetId, name) {\n      if (!this.sheetMapping.hasSheetWithId(sheetId)) {\n        throw new NoSheetWithIdError(sheetId);\n      }\n\n      var existingSheetId = this.sheetMapping.get(name);\n\n      if (existingSheetId !== undefined && existingSheetId !== sheetId) {\n        throw new SheetNameAlreadyTakenError(name);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeContent\",\n    value: function ensureItIsPossibleToChangeContent(address) {\n      if (invalidSimpleCellAddress(address)) {\n        throw new InvalidAddressError(address);\n      }\n\n      if (!this.sheetMapping.hasSheetWithId(address.sheet)) {\n        throw new NoSheetWithIdError(address.sheet);\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeCellContents\",\n    value: function ensureItIsPossibleToChangeCellContents(inputAddress, content) {\n      var boundaries = findBoundaries(content);\n      var targetRange = AbsoluteCellRange.spanFrom(inputAddress, boundaries.width, boundaries.height);\n      this.ensureRangeInSizeLimits(targetRange);\n\n      var _iterator3 = _createForOfIteratorHelper(targetRange.addresses(this.dependencyGraph)),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var address = _step3.value;\n          this.ensureItIsPossibleToChangeContent(address);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"ensureItIsPossibleToChangeSheetContents\",\n    value: function ensureItIsPossibleToChangeSheetContents(sheetId, content) {\n      var boundaries = findBoundaries(content);\n      var targetRange = AbsoluteCellRange.spanFrom(simpleCellAddress(sheetId, 0, 0), boundaries.width, boundaries.height);\n      this.ensureRangeInSizeLimits(targetRange);\n    }\n  }, {\n    key: \"ensureRangeInSizeLimits\",\n    value: function ensureRangeInSizeLimits(range) {\n      if (range.exceedsSheetSizeLimits(this.maxColumns, this.maxRows)) {\n        throw new SheetSizeLimitExceededError();\n      }\n    }\n  }, {\n    key: \"isThereSomethingToUndo\",\n    value: function isThereSomethingToUndo() {\n      return !this.undoRedo.isUndoStackEmpty();\n    }\n  }, {\n    key: \"isThereSomethingToRedo\",\n    value: function isThereSomethingToRedo() {\n      return !this.undoRedo.isRedoStackEmpty();\n    }\n  }, {\n    key: \"getAndClearContentChanges\",\n    value: function getAndClearContentChanges() {\n      return this.operations.getAndClearContentChanges();\n    }\n  }, {\n    key: \"ensureScopeIdIsValid\",\n    value: function ensureScopeIdIsValid(scopeId) {\n      if (scopeId !== undefined && !this.sheetMapping.hasSheetWithId(scopeId)) {\n        throw new NoSheetWithIdError(scopeId);\n      }\n    }\n  }, {\n    key: \"sheetMapping\",\n    get: function get() {\n      return this.dependencyGraph.sheetMapping;\n    }\n  }, {\n    key: \"ensureNamedExpressionNameIsValid\",\n    value: function ensureNamedExpressionNameIsValid(expressionName, sheetId) {\n      if (!this.namedExpressions.isNameValid(expressionName)) {\n        throw new NamedExpressionNameIsInvalidError(expressionName);\n      }\n\n      if (!this.namedExpressions.isNameAvailable(expressionName, sheetId)) {\n        throw new NamedExpressionNameIsAlreadyTakenError(expressionName);\n      }\n    }\n  }, {\n    key: \"ensureNamedExpressionIsValid\",\n    value: function ensureNamedExpressionIsValid(expression) {\n      var parsedExpression = this.cellContentParser.parse(expression);\n\n      if (parsedExpression instanceof CellContent.Formula) {\n        var parsingResult = this.parser.parse(parsedExpression.formula, simpleCellAddress(-1, 0, 0));\n\n        if (doesContainRelativeReferences(parsingResult.ast)) {\n          throw new NoRelativeAddressesAllowedError();\n        }\n      }\n    }\n  }]);\n\n  return CrudOperations;\n}();\n\nfunction isPositiveInteger(x) {\n  return Number.isInteger(x) && x > 0;\n}\n\nfunction isNonnegativeInteger(x) {\n  return Number.isInteger(x) && x >= 0;\n}"]},"metadata":{},"sourceType":"module"}