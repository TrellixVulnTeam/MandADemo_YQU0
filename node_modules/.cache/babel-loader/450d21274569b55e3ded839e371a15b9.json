{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { InvalidArgumentsError } from './errors';\nexport function validateAsSheet(sheet) {\n  if (!Array.isArray(sheet)) {\n    throw new InvalidArgumentsError('an array of arrays.');\n  }\n\n  for (var i = 0; i < sheet.length; i++) {\n    if (!Array.isArray(sheet[i])) {\n      throw new InvalidArgumentsError('an array of arrays.');\n    }\n  }\n}\n/**\n * Returns actual width, height and fill ratio of a sheet\n *\n * @param sheet - two-dimmensional array sheet representation\n */\n\nexport function findBoundaries(sheet) {\n  var width = 0;\n  var height = 0;\n  var cellsCount = 0;\n\n  for (var currentRow = 0; currentRow < sheet.length; currentRow++) {\n    var currentRowWidth = 0;\n\n    for (var currentCol = 0; currentCol < sheet[currentRow].length; currentCol++) {\n      var currentValue = sheet[currentRow][currentCol];\n\n      if (currentValue === undefined || currentValue === null) {\n        continue;\n      }\n\n      currentRowWidth = currentCol + 1;\n      ++cellsCount;\n    }\n\n    width = Math.max(width, currentRowWidth);\n\n    if (currentRowWidth > 0) {\n      height = currentRow + 1;\n    }\n  }\n\n  var sheetSize = width * height;\n  return {\n    height: height,\n    width: width,\n    fill: sheetSize === 0 ? 0 : cellsCount / sheetSize\n  };\n}","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/Sheet.js"],"names":["InvalidArgumentsError","validateAsSheet","sheet","Array","isArray","i","length","findBoundaries","width","height","cellsCount","currentRow","currentRowWidth","currentCol","currentValue","undefined","Math","max","sheetSize","fill"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,qBAAT,QAAsC,UAAtC;AACA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B;AACzB,UAAM,IAAIF,qBAAJ,CAA0B,qBAA1B,CAAN;AACD;;AAED,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAI,CAACF,KAAK,CAACC,OAAN,CAAcF,KAAK,CAACG,CAAD,CAAnB,CAAL,EAA8B;AAC5B,YAAM,IAAIL,qBAAJ,CAA0B,qBAA1B,CAAN;AACD;AACF;AACF;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASO,cAAT,CAAwBL,KAAxB,EAA+B;AACpC,MAAIM,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,UAAU,GAAG,CAAjB;;AAEA,OAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGT,KAAK,CAACI,MAA5C,EAAoDK,UAAU,EAA9D,EAAkE;AAChE,QAAIC,eAAe,GAAG,CAAtB;;AAEA,SAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGX,KAAK,CAACS,UAAD,CAAL,CAAkBL,MAAxD,EAAgEO,UAAU,EAA1E,EAA8E;AAC5E,UAAIC,YAAY,GAAGZ,KAAK,CAACS,UAAD,CAAL,CAAkBE,UAAlB,CAAnB;;AAEA,UAAIC,YAAY,KAAKC,SAAjB,IAA8BD,YAAY,KAAK,IAAnD,EAAyD;AACvD;AACD;;AAEDF,MAAAA,eAAe,GAAGC,UAAU,GAAG,CAA/B;AACA,QAAEH,UAAF;AACD;;AAEDF,IAAAA,KAAK,GAAGQ,IAAI,CAACC,GAAL,CAAST,KAAT,EAAgBI,eAAhB,CAAR;;AAEA,QAAIA,eAAe,GAAG,CAAtB,EAAyB;AACvBH,MAAAA,MAAM,GAAGE,UAAU,GAAG,CAAtB;AACD;AACF;;AAED,MAAIO,SAAS,GAAGV,KAAK,GAAGC,MAAxB;AACA,SAAO;AACLA,IAAAA,MAAM,EAAEA,MADH;AAELD,IAAAA,KAAK,EAAEA,KAFF;AAGLW,IAAAA,IAAI,EAAED,SAAS,KAAK,CAAd,GAAkB,CAAlB,GAAsBR,UAAU,GAAGQ;AAHpC,GAAP;AAKD","sourcesContent":["/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\nimport { InvalidArgumentsError } from './errors';\nexport function validateAsSheet(sheet) {\n  if (!Array.isArray(sheet)) {\n    throw new InvalidArgumentsError('an array of arrays.');\n  }\n\n  for (var i = 0; i < sheet.length; i++) {\n    if (!Array.isArray(sheet[i])) {\n      throw new InvalidArgumentsError('an array of arrays.');\n    }\n  }\n}\n/**\n * Returns actual width, height and fill ratio of a sheet\n *\n * @param sheet - two-dimmensional array sheet representation\n */\n\nexport function findBoundaries(sheet) {\n  var width = 0;\n  var height = 0;\n  var cellsCount = 0;\n\n  for (var currentRow = 0; currentRow < sheet.length; currentRow++) {\n    var currentRowWidth = 0;\n\n    for (var currentCol = 0; currentCol < sheet[currentRow].length; currentCol++) {\n      var currentValue = sheet[currentRow][currentCol];\n\n      if (currentValue === undefined || currentValue === null) {\n        continue;\n      }\n\n      currentRowWidth = currentCol + 1;\n      ++cellsCount;\n    }\n\n    width = Math.max(width, currentRowWidth);\n\n    if (currentRowWidth > 0) {\n      height = currentRow + 1;\n    }\n  }\n\n  var sheetSize = width * height;\n  return {\n    height: height,\n    width: width,\n    fill: sheetSize === 0 ? 0 : cellsCount / sheetSize\n  };\n}"]},"metadata":{},"sourceType":"module"}