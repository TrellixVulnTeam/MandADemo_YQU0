{"ast":null,"code":"import { defaults, forEach } from \"../../../utils/utils\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks\";\nimport { defaultGrammarResolverErrorProvider, defaultGrammarValidatorErrorProvider } from \"../../errors_public\";\nimport { DslMethodsCollectorVisitor } from \"./gast\";\nexport function resolveGrammar(options) {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider\n  });\n  var topRulesTable = {};\n  forEach(options.rules, function (rule) {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, options.errMsgProvider);\n}\nexport function validateGrammar(options) {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n    ignoredIssues: {}\n  });\n  return orgValidateGrammar(options.rules, options.maxLookahead, options.tokenTypes, options.ignoredIssues, options.errMsgProvider, options.grammarName);\n}\nexport function assignOccurrenceIndices(options) {\n  forEach(options.rules, function (currRule) {\n    var methodsCollector = new DslMethodsCollectorVisitor();\n    currRule.accept(methodsCollector);\n    forEach(methodsCollector.dslMethods, function (methods) {\n      forEach(methods, function (currMethod, arrIdx) {\n        currMethod.idx = arrIdx + 1;\n      });\n    });\n  });\n}","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/chevrotain/lib_esm/src/parse/grammar/gast/gast_resolver_public.js"],"names":["defaults","forEach","resolveGrammar","orgResolveGrammar","validateGrammar","orgValidateGrammar","defaultGrammarResolverErrorProvider","defaultGrammarValidatorErrorProvider","DslMethodsCollectorVisitor","options","errMsgProvider","topRulesTable","rules","rule","name","ignoredIssues","maxLookahead","tokenTypes","grammarName","assignOccurrenceIndices","currRule","methodsCollector","accept","dslMethods","methods","currMethod","arrIdx","idx"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,sBAAlC;AACA,SAASC,cAAc,IAAIC,iBAA3B,QAAoD,aAApD;AACA,SAASC,eAAe,IAAIC,kBAA5B,QAAsD,WAAtD;AACA,SAASC,mCAAT,EAA8CC,oCAA9C,QAA0F,qBAA1F;AACA,SAASC,0BAAT,QAA2C,QAA3C;AACA,OAAO,SAASN,cAAT,CAAwBO,OAAxB,EAAiC;AACpCA,EAAAA,OAAO,GAAGT,QAAQ,CAACS,OAAD,EAAU;AACxBC,IAAAA,cAAc,EAAEJ;AADQ,GAAV,CAAlB;AAGA,MAAIK,aAAa,GAAG,EAApB;AACAV,EAAAA,OAAO,CAACQ,OAAO,CAACG,KAAT,EAAgB,UAAUC,IAAV,EAAgB;AACnCF,IAAAA,aAAa,CAACE,IAAI,CAACC,IAAN,CAAb,GAA2BD,IAA3B;AACH,GAFM,CAAP;AAGA,SAAOV,iBAAiB,CAACQ,aAAD,EAAgBF,OAAO,CAACC,cAAxB,CAAxB;AACH;AACD,OAAO,SAASN,eAAT,CAAyBK,OAAzB,EAAkC;AACrCA,EAAAA,OAAO,GAAGT,QAAQ,CAACS,OAAD,EAAU;AACxBC,IAAAA,cAAc,EAAEH,oCADQ;AAExBQ,IAAAA,aAAa,EAAE;AAFS,GAAV,CAAlB;AAIA,SAAOV,kBAAkB,CAACI,OAAO,CAACG,KAAT,EAAgBH,OAAO,CAACO,YAAxB,EAAsCP,OAAO,CAACQ,UAA9C,EAA0DR,OAAO,CAACM,aAAlE,EAAiFN,OAAO,CAACC,cAAzF,EAAyGD,OAAO,CAACS,WAAjH,CAAzB;AACH;AACD,OAAO,SAASC,uBAAT,CAAiCV,OAAjC,EAA0C;AAC7CR,EAAAA,OAAO,CAACQ,OAAO,CAACG,KAAT,EAAgB,UAAUQ,QAAV,EAAoB;AACvC,QAAIC,gBAAgB,GAAG,IAAIb,0BAAJ,EAAvB;AACAY,IAAAA,QAAQ,CAACE,MAAT,CAAgBD,gBAAhB;AACApB,IAAAA,OAAO,CAACoB,gBAAgB,CAACE,UAAlB,EAA8B,UAAUC,OAAV,EAAmB;AACpDvB,MAAAA,OAAO,CAACuB,OAAD,EAAU,UAAUC,UAAV,EAAsBC,MAAtB,EAA8B;AAC3CD,QAAAA,UAAU,CAACE,GAAX,GAAiBD,MAAM,GAAG,CAA1B;AACH,OAFM,CAAP;AAGH,KAJM,CAAP;AAKH,GARM,CAAP;AASH","sourcesContent":["import { defaults, forEach } from \"../../../utils/utils\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks\";\nimport { defaultGrammarResolverErrorProvider, defaultGrammarValidatorErrorProvider } from \"../../errors_public\";\nimport { DslMethodsCollectorVisitor } from \"./gast\";\nexport function resolveGrammar(options) {\n    options = defaults(options, {\n        errMsgProvider: defaultGrammarResolverErrorProvider\n    });\n    var topRulesTable = {};\n    forEach(options.rules, function (rule) {\n        topRulesTable[rule.name] = rule;\n    });\n    return orgResolveGrammar(topRulesTable, options.errMsgProvider);\n}\nexport function validateGrammar(options) {\n    options = defaults(options, {\n        errMsgProvider: defaultGrammarValidatorErrorProvider,\n        ignoredIssues: {}\n    });\n    return orgValidateGrammar(options.rules, options.maxLookahead, options.tokenTypes, options.ignoredIssues, options.errMsgProvider, options.grammarName);\n}\nexport function assignOccurrenceIndices(options) {\n    forEach(options.rules, function (currRule) {\n        var methodsCollector = new DslMethodsCollectorVisitor();\n        currRule.accept(methodsCollector);\n        forEach(methodsCollector.dslMethods, function (methods) {\n            forEach(methods, function (currMethod, arrIdx) {\n                currMethod.idx = arrIdx + 1;\n            });\n        });\n    });\n}\n//# sourceMappingURL=gast_resolver_public.js.map"]},"metadata":{},"sourceType":"module"}