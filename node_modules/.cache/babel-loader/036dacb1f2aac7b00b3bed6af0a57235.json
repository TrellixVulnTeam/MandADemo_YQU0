{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n/**\n * Represents vertex which keeps formula\n */\n\n\nexport var FormulaCellVertex = /*#__PURE__*/function () {\n  function FormulaCellVertex(\n  /** Formula in AST format */\n  formula,\n  /** Address which this vertex represents */\n  cellAddress, version) {\n    _classCallCheck(this, FormulaCellVertex);\n\n    this.formula = formula;\n    this.cellAddress = cellAddress;\n    this.version = version;\n    this.formula = formula;\n    this.cellAddress = cellAddress;\n    this.cachedCellValue = null;\n  }\n  /**\n   * Returns formula stored in this vertex\n   */\n\n\n  _createClass(FormulaCellVertex, [{\n    key: \"getFormula\",\n    value: function getFormula(updatingService) {\n      this.ensureRecentData(updatingService);\n      return this.formula;\n    }\n  }, {\n    key: \"ensureRecentData\",\n    value: function ensureRecentData(updatingService) {\n      if (this.version != updatingService.version()) {\n        var _updatingService$appl = updatingService.applyTransformations(this.formula, this.address, this.version),\n            _updatingService$appl2 = _slicedToArray(_updatingService$appl, 3),\n            newAst = _updatingService$appl2[0],\n            newAddress = _updatingService$appl2[1],\n            newVersion = _updatingService$appl2[2];\n\n        this.formula = newAst;\n        this.cellAddress = newAddress;\n        this.version = newVersion;\n      }\n    }\n    /**\n     * Returns address of the cell associated with vertex\n     */\n\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(updatingService) {\n      this.ensureRecentData(updatingService);\n      return this.cellAddress;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.cellAddress;\n    }\n    /**\n     * Sets computed cell value stored in this vertex\n     */\n\n  }, {\n    key: \"setCellValue\",\n    value: function setCellValue(cellValue) {\n      this.cachedCellValue = cellValue;\n    }\n    /**\n     * Returns cell value stored in vertex\n     */\n\n  }, {\n    key: \"getCellValue\",\n    value: function getCellValue() {\n      if (this.cachedCellValue !== null) {\n        return this.cachedCellValue;\n      } else {\n        throw Error('Value of the formula cell is not computed.');\n      }\n    }\n  }, {\n    key: \"valueOrNull\",\n    value: function valueOrNull() {\n      return this.cachedCellValue;\n    }\n  }, {\n    key: \"isComputed\",\n    value: function isComputed() {\n      return this.cachedCellValue !== null;\n    }\n  }]);\n\n  return FormulaCellVertex;\n}();","map":{"version":3,"sources":["/Users/mingjie.wang/Documents/Uber/MandA/demo-project/node_modules/hyperformula/es/DependencyGraph/FormulaCellVertex.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","FormulaCellVertex","formula","cellAddress","version","cachedCellValue","getFormula","updatingService","ensureRecentData","_updatingService$appl","applyTransformations","address","_updatingService$appl2","newAst","newAddress","newVersion","getAddress","get","setCellValue","cellValue","getCellValue","Error","valueOrNull","isComputed"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2021 Handsoncode. All rights reserved.\n */\n\n/**\n * Represents vertex which keeps formula\n */\nexport var FormulaCellVertex = /*#__PURE__*/function () {\n  function FormulaCellVertex(\n  /** Formula in AST format */\n  formula,\n  /** Address which this vertex represents */\n  cellAddress, version) {\n    _classCallCheck(this, FormulaCellVertex);\n\n    this.formula = formula;\n    this.cellAddress = cellAddress;\n    this.version = version;\n    this.formula = formula;\n    this.cellAddress = cellAddress;\n    this.cachedCellValue = null;\n  }\n  /**\n   * Returns formula stored in this vertex\n   */\n\n\n  _createClass(FormulaCellVertex, [{\n    key: \"getFormula\",\n    value: function getFormula(updatingService) {\n      this.ensureRecentData(updatingService);\n      return this.formula;\n    }\n  }, {\n    key: \"ensureRecentData\",\n    value: function ensureRecentData(updatingService) {\n      if (this.version != updatingService.version()) {\n        var _updatingService$appl = updatingService.applyTransformations(this.formula, this.address, this.version),\n            _updatingService$appl2 = _slicedToArray(_updatingService$appl, 3),\n            newAst = _updatingService$appl2[0],\n            newAddress = _updatingService$appl2[1],\n            newVersion = _updatingService$appl2[2];\n\n        this.formula = newAst;\n        this.cellAddress = newAddress;\n        this.version = newVersion;\n      }\n    }\n    /**\n     * Returns address of the cell associated with vertex\n     */\n\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(updatingService) {\n      this.ensureRecentData(updatingService);\n      return this.cellAddress;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.cellAddress;\n    }\n    /**\n     * Sets computed cell value stored in this vertex\n     */\n\n  }, {\n    key: \"setCellValue\",\n    value: function setCellValue(cellValue) {\n      this.cachedCellValue = cellValue;\n    }\n    /**\n     * Returns cell value stored in vertex\n     */\n\n  }, {\n    key: \"getCellValue\",\n    value: function getCellValue() {\n      if (this.cachedCellValue !== null) {\n        return this.cachedCellValue;\n      } else {\n        throw Error('Value of the formula cell is not computed.');\n      }\n    }\n  }, {\n    key: \"valueOrNull\",\n    value: function valueOrNull() {\n      return this.cachedCellValue;\n    }\n  }, {\n    key: \"isComputed\",\n    value: function isComputed() {\n      return this.cachedCellValue !== null;\n    }\n  }]);\n\n  return FormulaCellVertex;\n}();"]},"metadata":{},"sourceType":"module"}